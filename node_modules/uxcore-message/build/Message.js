'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _rcNotification = require('rc-notification');

var _rcNotification2 = _interopRequireDefault(_rcNotification);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultDuration = 1.5;
var messageInstance = void 0;
var key = 1;
var prefixCls = 'kuma-message';
var transitionName = 'message-moveUp';
var className = void 0;
var getContainer = void 0;
var multipleInstance = true;
var size = 'small';
var messageCounter = 0;

function createMessageInstance(options, type) {
  if (messageInstance && messageInstance.destroy) {
    messageInstance.destroy();
  }
  var notification = null;
  _rcNotification2["default"].newInstance({
    prefixCls: prefixCls,
    className: className,
    transitionName: type === 'mask_loading' ? '' : transitionName,
    getContainer: getContainer,
    style: {
      left: '50%'
    } // 覆盖原来的样式
  }, function (n) {
    notification = n;
    messageInstance = n;
  });

  return notification;
}

function incrementCounter() {
  if (multipleInstance) {
    messageCounter += 1;
  }
}

function decrementCounter() {
  if (multipleInstance) {
    messageCounter = Math.max(messageCounter - 1, 0);
  }
}

function tryRemoveMessageInstance() {
  if (!multipleInstance || messageCounter) {
    return;
  }

  if (messageInstance && messageInstance.destroy) {
    messageInstance.destroy();
    messageInstance = null;
  }
}

function notice(content) {
  var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultDuration;

  var _classnames;

  var type = arguments[2];
  var _onClose = arguments[3];

  var options = content && content.content ? content : null;
  var isLoadingType = type === 'mask_loading';
  var iconClass = {
    info: 'uxcore-icon uxicon-tishi-full',
    success: 'uxcore-icon uxicon-chenggong-full',
    error: 'uxcore-icon uxicon-biaodanlei-tongyongqingchu',
    loading: 'uxcore-icon uxicon-loading-icon-round',
    mask_loading: 'uxcore-icon uxicon-loading-icon-round',
    nw_loading: 'kuma-loading'
  }[type];

  var instance = multipleInstance && messageInstance && type !== 'mask_loading' ? messageInstance : createMessageInstance(options, type);

  incrementCounter();
  var activeWrapStyle = {
    right: '50%'
  };
  var activeContentStyle = {};
  if (isLoadingType) {
    activeWrapStyle = {
      right: '50%',
      width: '100vw',
      position: 'fixed',
      maxWidth: '100vw',
      height: '100vh',
      margin: 0,
      top: 0,
      left: 0,
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      background: 'rgba(0, 0, 0, 0.2)'
    };
    activeContentStyle = { padding: '23px 38px', backgroundColor: '#fff' };
  }

  instance.notice({
    key: key,
    duration: options ? options.duration : duration,
    className: options ? options.className : null,
    style: activeWrapStyle,
    content: _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-container ' + prefixCls + '-container-' + type, true), _defineProperty(_classnames, 'fn-clear', true), _classnames)),
        style: activeContentStyle
      },
      _react2["default"].createElement('i', { className: iconClass }),
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-content' },
        options ? options.content : content
      )
    ),
    onClose: function onClose() {
      // see https://github.com/uxcore/uxcore-message/issues/17
      decrementCounter();
      tryRemoveMessageInstance();

      var callback = options && options.onClose || _onClose || function noop() {};

      callback.apply(undefined, arguments);
    }
  });

  return function removeNotice() {
    var target = key;
    key += 1;
    return function () {
      return instance.removeNotice(target);
    };
  }();
}

var methods = {};

['info', 'success', 'error', 'loading', 'mask_loading', 'nw_loading'].forEach(function (item) {
  methods[item] = function (content, duration, onClose) {
    return notice(content, duration, item, onClose);
  };
});

exports["default"] = _extends({}, methods, {
  clear: function clear() {
    createMessageInstance();
  },
  config: function config(options) {
    if (options) {
      prefixCls = options.prefixCls || prefixCls;
      transitionName = options.transitionName || transitionName;
      className = options.className || className;
      multipleInstance = options.multipleInstance === undefined ? multipleInstance : options.multipleInstance;
      getContainer = options.getContainer;
      size = options.size || size;
    }
  }
});
module.exports = exports['default'];