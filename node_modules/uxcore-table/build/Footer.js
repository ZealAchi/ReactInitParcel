'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Footer = function (_React$Component) {
  _inherits(Footer, _React$Component);

  function Footer() {
    _classCallCheck(this, Footer);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Footer.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    if (fixedColumn === 'scroll') {
      me.rootEl = me.root;
      me.scrollHandler = me.onScroll.bind(me);
      me.scrollListener = (0, _addEventListener2["default"])(me.rootEl, 'scroll', me.scrollHandler);
    }
  };

  Footer.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.scrollListener) {
      this.scrollListener.remove();
    }
  };

  Footer.prototype.onScroll = function onScroll() {
    var me = this;
    var fixedColumn = me.props.fixedColumn;

    if (me.scrollEndTimer) {
      clearTimeout(me.scrollEndTimer);
    }
    me.scrollEndTimer = setTimeout(function () {
      me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
    }, 500);
    me.props.onScroll(me.rootEl.scrollLeft, me.rootEl.scrollTop, fixedColumn);
  };

  Footer.prototype.getDom = function getDom() {
    return this.root;
  };

  Footer.prototype.processColumns = function processColumns() {
    var props = this.props;
    var columns = void 0;
    var width = 0;
    var footerWrapClassName = void 0;
    var leftFixedType = ['checkboxSelector', 'radioSelector', 'treeIcon'];
    if (props.fixedColumn === 'fixed') {
      columns = props.columns.filter(function (item) {
        if (item.fixed && !item.hidden || leftFixedType.indexOf(item.type) !== -1) {
          width = parseInt(item.width, 10) + width;
          return true;
        }
        return false;
      });
      footerWrapClassName = 'kuma-uxtable-footer-fixed';
    } else if (props.fixedColumn === 'rightFixed') {
      columns = props.columns.filter(function (item) {
        if (item.rightFixed && !item.hidden) {
          width = parseInt(item.width, 10) + width;
          return true;
        }
        return false;
      });
      footerWrapClassName = 'kuma-uxtable-footer-right-fixed';
    } else if (props.fixedColumn === 'scroll') {
      var leftFixedColumns = [];
      var normalColumns = [];
      var rightFixedColumns = [];
      props.columns.forEach(function (item) {
        if (!item.hidden) {
          if (item.fixed || leftFixedType.indexOf(item.type) !== -1) {
            leftFixedColumns.push(item);
          } else if (item.rightFixed) {
            rightFixedColumns.push(item);
          } else {
            normalColumns.push(item);
          }
        }
      });

      columns = leftFixedColumns.concat(normalColumns, rightFixedColumns);

      footerWrapClassName = 'kuma-uxtable-footer-scroll';
    } else {
      columns = props.columns;
      footerWrapClassName = 'kuma-uxtable-footer-no';
    }

    return { columns: columns, footerWrapClassName: footerWrapClassName, width: width };
  };

  Footer.prototype.renderColumn = function renderColumn(item, index, last) {
    var _props = this.props,
        footer = _props.footer,
        data = _props.data,
        from = _props.from,
        rowGroupData = _props.rowGroupData;

    var style = {
      width: item.width ? item.width : '100px',
      textAlign: item.align ? item.align : 'left'
    };
    if (['checkbox', 'checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1) {
      style = _extends({}, style, {
        paddingRight: '4px',
        paddingLeft: '12px'
      });
    }
    return _react2["default"].createElement(
      'div',
      {
        key: index,
        className: (0, _classnames2["default"])({
          'kuma-uxtable-cell': true
        }),
        style: style
      },
      footer({ data: data, column: item, from: from, rowGroupData: rowGroupData })
    );
  };

  Footer.prototype.renderColumns = function renderColumns(_columns) {
    var me = this;
    var columns = _columns.map(function (item, index) {
      var last = index === _columns.length - 1;
      return me.renderColumn(item, index, last);
    });
    return columns;
  };

  Footer.prototype.render = function render() {
    var _this2 = this;

    var _processColumns = this.processColumns(),
        footerWrapClassName = _processColumns.footerWrapClassName,
        columns = _processColumns.columns;

    return _react2["default"].createElement(
      'div',
      { className: footerWrapClassName, ref: function ref(c) {
          _this2.root = c;
        } },
      _react2["default"].createElement(
        'div',
        { className: 'kuma-uxtable-footer' },
        this.renderColumns(columns)
      )
    );
  };

  return Footer;
}(_react2["default"].Component);

Footer.displayName = 'Footer';
Footer.propTypes = {
  columns: _propTypes2["default"].array,
  footer: _propTypes2["default"].func,
  data: _propTypes2["default"].any,
  onScroll: _propTypes2["default"].func,
  from: _propTypes2["default"].string,
  rowGroupData: _propTypes2["default"].array
};
Footer.defaultProps = {
  onScroll: function onScroll() {}
};
exports["default"] = Footer;
module.exports = exports['default'];