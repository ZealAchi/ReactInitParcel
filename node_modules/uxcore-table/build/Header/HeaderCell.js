'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _classnames5 = require('classnames');

var _classnames6 = _interopRequireDefault(_classnames5);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreCheckboxGroup = require('uxcore-checkbox-group');

var _uxcoreCheckboxGroup2 = _interopRequireDefault(_uxcoreCheckboxGroup);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _uxcoreMenu = require('uxcore-menu');

var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _CheckBox = require('../Cell/CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _MessageIcon = require('./MessageIcon');

var _MessageIcon2 = _interopRequireDefault(_MessageIcon);

var _reactDraggable = require('react-draggable');

var _reactDraggable2 = _interopRequireDefault(_reactDraggable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var HeaderCell = function (_React$Component) {
  _inherits(HeaderCell, _React$Component);

  function HeaderCell(props) {
    _classCallCheck(this, HeaderCell);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      filterSelectedKeys: props.filterSelectedKeys,
      lastFilterSelectedKeys: props.filterSelectedKeys,
      lastColumnWidth: 0
    };
    return _this;
  }

  HeaderCell.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  HeaderCell.prototype.getWidth = function getWidth() {
    if (this.root) {
      return this.root.clientWidth;
    }
    return 0;
  };

  HeaderCell.prototype.handleFilterDropdownVisible = function handleFilterDropdownVisible(filterVisible) {
    var _this2 = this;

    this.setState({
      filterVisible: filterVisible
    }, function () {
      if (filterVisible === false && !(0, _isEqual2["default"])(_this2.state.filterSelectedKeys, _this2.props.filterSelectedKeys)) {
        _this2.props.onFilter(_this2.state.filterSelectedKeys);
      }
    });
  };

  HeaderCell.prototype.handleFilterCheckboxChange = function handleFilterCheckboxChange(checked, value) {
    var filterSelectedKeys = this.state.filterSelectedKeys.slice(0);
    if (checked) {
      filterSelectedKeys.push(value);
    } else {
      filterSelectedKeys = filterSelectedKeys.filter(function (item) {
        return item !== value;
      });
    }
    this.setState({
      filterSelectedKeys: filterSelectedKeys
    });
  };

  HeaderCell.prototype.handleFilterActionReset = function handleFilterActionReset() {
    var _this3 = this;

    this.setState({
      filterVisible: false,
      filterSelectedKeys: []
    }, function () {
      _this3.props.onFilter([]);
    });
  };

  HeaderCell.prototype.handleFilterActionConfirm = function handleFilterActionConfirm() {
    var _this4 = this;

    this.setState({
      filterVisible: false
    }, function () {
      if (!(0, _isEqual2["default"])(_this4.state.filterSelectedKeys, _this4.props.filterSelectedKeys)) {
        _this4.props.onFilter(_this4.state.filterSelectedKeys);
      }
    });
  };

  HeaderCell.prototype.renderIndent = function renderIndent(index) {
    if (this.firstIndex !== index) {
      return null;
    }
    var me = this;
    var _me$props = me.props,
        renderModel = _me$props.renderModel,
        checkboxColumnKey = _me$props.checkboxColumnKey;

    if (renderModel === 'tree') {
      return _react2["default"].createElement('span', {
        className: (0, _classnames6["default"])({
          indent: true,
          hasCheck: checkboxColumnKey
        })
      });
    }
    return null;
  };

  HeaderCell.prototype.renderRequired = function renderRequired(item) {
    var prefixCls = this.props.prefixCls;

    if (item.required) {
      return _react2["default"].createElement(
        'span',
        { className: prefixCls + '-item-required' },
        '*',
        ' '
      );
    }
    return null;
  };

  HeaderCell.prototype.renderFilterMenu = function renderFilterMenu(filter) {
    var _this5 = this;

    var prefixCls = this.props.prefixCls;

    if (Array.isArray(filter.children) && filter.children.length) {
      return _react2["default"].createElement(
        _uxcoreMenu2["default"].SubMenu,
        { key: filter.value, title: filter.text },
        filter.children.map(function (child) {
          return _this5.renderFilterMenu(child);
        })
      );
    }
    return _react2["default"].createElement(
      _uxcoreMenu2["default"].Item,
      { key: filter.value },
      _react2["default"].createElement(_uxcoreCheckboxGroup2["default"].Item, {
        checked: this.state.filterSelectedKeys.indexOf(filter.value) !== -1,
        onChange: function onChange(checked, value) {
          _this5.handleFilterCheckboxChange(checked, value);
        },
        text: filter.text,
        value: filter.value,
        className: prefixCls + '-item-filter-checkbox'
      })
    );
  };

  HeaderCell.prototype.renderFilterIcon = function renderFilterIcon(column) {
    var _this6 = this;

    var prefixCls = this.props.prefixCls;

    if (Array.isArray(column.filters) && column.filters.length) {
      var menu = _react2["default"].createElement(
        _uxcoreMenu2["default"],
        {
          mode: 'vertical',
          prefixCls: 'kuma-dropdown-menu',
          getPopupContainer: function getPopupContainer(triggerNode) {
            return triggerNode.parentNode;
          }
        },
        column.filters.map(function (filter) {
          return _this6.renderFilterMenu(filter);
        })
      );

      var overlay = _react2["default"].createElement(
        'div',
        null,
        menu,
        _react2["default"].createElement(
          'div',
          { className: prefixCls + '-item-filter-action-bar' },
          _react2["default"].createElement(
            'div',
            {
              className: prefixCls + '-item-filter-action-button ' + prefixCls + '-item-filter-action-button-reset',
              onClick: function onClick() {
                _this6.handleFilterActionReset();
              }
            },
            '\u91CD\u7F6E'
          ),
          _react2["default"].createElement(
            'div',
            {
              className: prefixCls + '-item-filter-action-button ' + prefixCls + '-item-filter-action-button-confirm',
              onClick: function onClick() {
                _this6.handleFilterActionConfirm();
              }
            },
            '\u786E\u8BA4'
          )
        )
      );
      return _react2["default"].createElement(
        _uxcoreDropdown2["default"],
        {
          overlayClassName: prefixCls + '-item-filter-dropdown',
          overlay: overlay,
          trigger: ['click'],
          visible: this.state.filterVisible,
          onVisibleChange: function onVisibleChange(visible) {
            _this6.handleFilterDropdownVisible(visible);
          }
        },
        _react2["default"].createElement(_uxcoreIcon2["default"], {
          usei: true,
          name: 'shaixuan',
          className: (0, _classnames6["default"])(prefixCls + '-item-filter-icon', _defineProperty({}, prefixCls + '-item-filter-icon__active', this.state.filterSelectedKeys.length > 0))
        })
      );
    }
    return null;
  };

  HeaderCell.prototype.renderOrderIcon = function renderOrderIcon(column) {
    var me = this;
    var _me$props2 = me.props,
        orderType = _me$props2.orderType,
        activeColumn = _me$props2.activeColumn,
        onColumnOrder = _me$props2.onColumnOrder,
        tablePrefixCls = _me$props2.tablePrefixCls;

    if (column.ordered) {
      var _classnames2, _classnames3;

      var desc = 'triangle-down';
      var asc = 'triangle-up';
      var isActive = activeColumn && activeColumn.dataKey === column.dataKey;
      return _react2["default"].createElement(
        'span',
        { className: tablePrefixCls + '-h-sort', onClick: function onClick() {
            onColumnOrder();
          } },
        _react2["default"].createElement('i', {
          className: (0, _classnames6["default"])((_classnames2 = {}, _defineProperty(_classnames2, 'kuma-icon kuma-icon-' + asc, true), _defineProperty(_classnames2, 'active', isActive && orderType === 'asc'), _classnames2))
        }),
        _react2["default"].createElement('i', {
          className: (0, _classnames6["default"])((_classnames3 = {}, _defineProperty(_classnames3, 'kuma-icon kuma-icon-' + desc, true), _defineProperty(_classnames3, 'active', isActive && orderType === 'desc'), _classnames3))
        })
      );
    }
    return null;
  };

  HeaderCell.prototype.needResize = function needResize(column) {
    var _props = this.props,
        columnResizeable = _props.columnResizeable,
        last = _props.last;

    return columnResizeable && column.type !== 'treeIcon' && column.type !== 'checkboxSelector' && column.type !== 'radioSelector'
    // && !column.fixed
    && !column.rightFixed && !column.hidden && !last;
  };

  HeaderCell.prototype.render = function render() {
    var _classnames4,
        _this7 = this;

    var me = this;
    var _me$props3 = me.props,
        renderModel = _me$props3.renderModel,
        prefixCls = _me$props3.prefixCls,
        column = _me$props3.column,
        index = _me$props3.index,
        hasGroup = _me$props3.hasGroup,
        last = _me$props3.last,
        tablePrefixCls = _me$props3.tablePrefixCls,
        isStickyHeader = _me$props3.isStickyHeader,
        isFixedHeader = _me$props3.isFixedHeader,
        size = _me$props3.size,
        tooltipPlacement = _me$props3.tooltipPlacement;

    var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(column.type) !== -1 && renderModel === 'tree';
    if (column.hidden || rowSelectorInTreeMode) {
      me.firstIndex = index + 1;
      return null;
    }
    var noBorderColumn = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
    var style = {
      width: column.width ? column.width : '100px',
      textAlign: column.align ? column.align : 'left',
      position: 'relative',
      textOverflow: column.textOverflow || 'inherit'
    };
    var v = void 0;
    if (hasGroup) {
      (0, _objectAssign2["default"])(style, {
        height: !isFixedHeader ? size === 'small' ? '80px' : '100px' : size === 'small' ? '81px' : '101px',
        lineHeight: !isFixedHeader ? size === 'small' ? '80px' : '100px' : size === 'small' ? '81px' : '101px'
      });
    }

    if (column.type === 'checkbox' || column.type === 'checkboxSelector') {
      (0, _objectAssign2["default"])(style, {
        paddingRight: '4px',
        paddingLeft: '12px',
        width: column.width ? column.width : '32px'
      });

      var checkBoxProps = {
        ref: me.saveRef('checkbox'),
        checked: me.props.checkStatus.isAllChecked,
        halfChecked: me.props.checkStatus.isHalfChecked,
        disable: me.props.checkStatus.isAllDisabled,
        onChange: this.props.onCheckboxChange
      };

      v = _react2["default"].createElement(_CheckBox2["default"], checkBoxProps);
    } else {
      var content = typeof column.title === 'function' ? column.title() : column.title;
      var title = typeof column.title === 'function' ? undefined : column.title;
      v = _react2["default"].createElement(
        'span',
        { title: title },
        content
      );
    }
    if (noBorderColumn.indexOf(column.dataKey) !== -1 || last && !column.fixed) {
      (0, _objectAssign2["default"])(style, {
        borderRight: 'none'
      });
    }

    var needResize = this.needResize(column);
    if (needResize) {
      (0, _objectAssign2["default"])(style, {
        borderRight: '1px solid rgba(31, 56, 88, 0.1)'
      });
    }

    return _react2["default"].createElement(
      'div',
      {
        key: index,
        className: (0, _classnames6["default"])((_classnames4 = {}, _defineProperty(_classnames4, tablePrefixCls + '-cell', true), _defineProperty(_classnames4, tablePrefixCls + '-cell__action-collapsed', column.type === 'action' && column.collapseNum === 1), _defineProperty(_classnames4, 'show-border', me.props.showHeaderBorder), _classnames4)),
        style: style,
        ref: function ref(c) {
          _this7.root = c;
        }
      },
      me.renderIndent(index),
      me.renderRequired(column),
      v,
      me.renderOrderIcon(column),
      me.renderFilterIcon(column),
      _react2["default"].createElement(_MessageIcon2["default"], { message: column.message, prefixCls: prefixCls + '-msg', tooltipPlacement: column.tooltipPlacement || tooltipPlacement, isStickyHeader: isStickyHeader }),
      needResize ? _react2["default"].createElement(
        _reactDraggable2["default"],
        {
          axis: 'x',
          onDrag: function onDrag(e, dragNode) {
            _this7.onDrag(e, dragNode, column);
          }
        },
        _react2["default"].createElement('span', { className: tablePrefixCls + '-cell-resize-icon', style: { width: '10px', right: '0' } })
      ) : null
    );
  };

  return HeaderCell;
}(_react2["default"].Component);

HeaderCell.displayName = 'HeaderCell';
HeaderCell.propTypes = {
  prefixCls: _propTypes2["default"].string,
  onCheckboxChange: _propTypes2["default"].func,
  onFilter: _propTypes2["default"].func,
  filterSelectedKeys: _propTypes2["default"].array
};
HeaderCell.defaultProps = {
  onFilter: function onFilter() {},
  filterSelectedKeys: []
};

HeaderCell.getDerivedStateFromProps = function (props, state) {
  if (props.filterSelectedKeys !== state.lastFilterSelectedKeys) {
    return {
      filterSelectedKeys: props.filterSelectedKeys,
      lastFilterSelectedKeys: props.filterSelectedKeys
    };
  }
  return null;
};

var _initialiseProps = function _initialiseProps() {
  var _this8 = this;

  this.onDrag = function (e, data, column) {
    var changeWidth = data.lastX - _this8.state.lastColumnWidth;
    // console.log(data.lastX, this.state.lastColumnWidth, changeWidth)

    _this8.props.handleColumnResize(e, changeWidth, column, data.node);
    _this8.setState({
      lastColumnWidth: data.lastX
    });
  };
};

(0, _reactLifecyclesCompat.polyfill)(HeaderCell);

exports["default"] = HeaderCell;
module.exports = exports['default'];