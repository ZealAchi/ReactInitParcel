'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreAnimate = require('uxcore-animate');

var _uxcoreAnimate2 = _interopRequireDefault(_uxcoreAnimate);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _Cell = require('./Cell');

var _Cell2 = _interopRequireDefault(_Cell);

var _CheckBox = require('./Cell/CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Row = function (_React$Component) {
  _inherits(Row, _React$Component);

  function Row() {
    _classCallCheck(this, Row);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    // 需要考虑的 prop 包括
    // columns, rowIndex(s => simple), rowData, index(s),
    // addRowClassName(f => function), rowSelection, subComp(no support), renderSubComp(f), actions
    // mode(s), renderModel(s), fixedColumn(s), levels(s),
    // visible(s), expandedKeys, checkboxColumnKey(s)
    var me = this;
    var shouldUpdate = false;

    ['rowIndex', 'index', 'mode', 'renderModel', 'fixedColumn', 'levels', 'addRowClassName', 'renderSubComp', 'visible', 'checkboxColumnKey', 'locale', 'isHover', 'treeLoadingIds'].forEach(function (item) {
      if (me.props[item] !== nextProps[item]) {
        shouldUpdate = true;
      }
    });
    if (!shouldUpdate) {
      ['columns', 'rowData', 'rowSelection', 'actions', 'expandedKeys'].forEach(function (item) {
        if (!(0, _isEqual2["default"])(me.props[item], nextProps[item])) {
          shouldUpdate = true;
        }
      });
    }
    return shouldUpdate;
  };

  Row.prototype.getDom = function getDom() {
    return this.root;
  };

  Row.prototype.getInnerBox = function getInnerBox() {
    return this.container;
  };

  Row.prototype.handleClick = function handleClick() {
    this.props.onClick();
  };

  Row.prototype.handleMouseEnter = function handleMouseEnter() {
    this.props.root.handleRowHover(this.props.index, true);
  };

  Row.prototype.handleMouseLeave = function handleMouseLeave() {
    this.props.root.handleRowHover(this.props.index, false);
  };

  Row.prototype.handleDoubleClick = function handleDoubleClick(rowData) {
    var table = this.props.root;
    if (table.props.doubleClickToEdit) {
      table.editRow((0, _cloneDeep2["default"])(rowData));
    }
  };

  Row.prototype.handleTreeCheckChange = function handleTreeCheckChange(e) {
    var me = this;
    me.props.root.changeTreeSelected(e.target.checked, me.props.dataIndex || me.props.index);
  };

  Row.prototype.showSubCompFunc = function showSubCompFunc() {
    var me = this;
    me.props.root.toggleSubComp(me.props.rowData);
  };

  Row.prototype.toggleExpanded = function toggleExpanded(e) {
    e.stopPropagation();
    var me = this;
    var rowData = me.props.rowData;

    me.props.root.toggleTreeExpanded(rowData);
  };

  Row.prototype.renderSubComp = function renderSubComp() {
    var props = this.props;


    var sub = void 0;

    if (props.renderModel === 'tree') {
      return null;
    }
    if (props.subComp) {
      if (props.rowData.showSubComp) {
        var subComp = _react2["default"].cloneElement(props.subComp, {
          passedData: this.props.rowData,
          parentHasCheckbox: !!this.props.rowSelection,
          parentHasCheck: !!this.props.rowSelection
        });
        sub = _react2["default"].createElement(
          'div',
          { className: 'kuma-uxtable-subrow' },
          subComp
        );
      }
    } else if (props.renderSubComp) {
      var _subComp = props.renderSubComp((0, _cloneDeep2["default"])(props.rowData));
      var subRowStyle = {};
      if (props.fixedColumn === 'rightFixed') {
        subRowStyle.width = 0;
        _subComp && _subComp.props && _subComp.props.style && (_subComp.props.style.opacity = 0);
      }
      if (_subComp && props.rowData.showSubComp) {
        sub = _react2["default"].createElement(
          'div',
          { className: 'kuma-uxtable-subrow', style: subRowStyle },
          _subComp
        );
      }
    }
    if (sub) {
      return sub;
    }
    return null;
  };

  Row.prototype.renderChild = function renderChild() {
    var props = this.props;

    var me = this;
    var children = [];

    if (props.renderModel !== 'tree') {
      return children;
    }
    if (props.rowData.data) {
      var subRowData = props.rowData.data;
      // const needEmptyIconIntree = !!subRowData.filter(item => {console.log(setTimeout(0));return item.data}).length;
      subRowData.forEach(function (node, index) {
        var isLastItem = index === subRowData.length - 1;

        var last = props.isParentLast && isLastItem;
        if ({}.hasOwnProperty.call(node, 'data') && Array.isArray(node.data) && node.data.length > 0) {
          last = false;
        }

        var renderProps = (0, _objectAssign2["default"])({}, props, {
          level: me.props.level + 1,
          index: index,
          dataIndex: (me.props.dataIndex ? me.props.dataIndex : me.props.index) + '-' + index,
          rowData: node,
          rowIndex: node.jsxid,
          key: node.jsxid,
          showSubComp: false,
          visible: props.expandedKeys.indexOf(props.rowData.jsxid) !== -1,
          last: last,
          isParentLast: last,
          allowActionEventDefault: props.allowActionEventDefault
        });
        children.push(_react2["default"].createElement(Row, renderProps));
      });

      var renderProps = {
        key: 'treeRow' + this.props.rowData.jsxid,
        className: 'kuma-uxtable-tree-row'
      };

      children = _react2["default"].createElement(
        'ul',
        renderProps,
        children
      );
    }

    return children;
  };

  Row.prototype.renderExpandIcon = function renderExpandIcon(rowIndex, treeId) {
    var expandCollapseIcon = void 0;
    var _expandIconClass = void 0;
    var props = this.props;


    if (props.renderModel !== 'tree') {
      return false;
    }
    if (props.treeLoadingIds.indexOf(treeId) > -1) {
      expandCollapseIcon = _react2["default"].createElement(
        'span',
        {
          className: 'kuma-uxtable-expand-icon',
          'data-index': rowIndex
        },
        _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'loading-icon-round', className: props.prefixCls + '-tree-loading-icon', usei: true })
      );
    } else if (props.rowData.data) {
      var expanded = props.expandedKeys.indexOf(props.rowData.jsxid) !== -1;
      _expandIconClass = {
        'kuma-icon': true,
        'kuma-icon-triangle-right': true,
        expanded: expanded
      };
      expandCollapseIcon = _react2["default"].createElement(
        'span',
        {
          className: 'kuma-uxtable-expand-icon',
          'data-type': props.fixedColumn,
          'data-index': rowIndex,
          onClick: this.toggleExpanded.bind(this)
        },
        props.expandIconType === 'adderSubtractor' ? _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: expanded ? 'zhedie' : 'zhankai1' }) : _react2["default"].createElement('i', { className: (0, _classnames3["default"])(_expandIconClass) })
      );
    } else {
      expandCollapseIcon = _react2["default"].createElement('span', { className: 'kuma-uxtable-emptyicon' });
    }
    return expandCollapseIcon;
  };

  Row.prototype.renderIndent = function renderIndent() {
    var indents = [];
    if (this.props.renderModel === 'tree') {
      for (var i = 0; i < this.props.level - 1; i++) {
        var renderProps = {
          className: 'indent',
          key: 'indent' + i
        };
        indents.push(_react2["default"].createElement('span', renderProps));
      }
    }

    return indents;
  };

  Row.prototype.renderTreeRowSelector = function renderTreeRowSelector() {
    if (this.props.renderModel !== 'tree' || !this.props.checkboxColumnKey) {
      return false;
    }
    var me = this;
    var _me$props = me.props,
        rowData = _me$props.rowData,
        checkboxColumnKey = _me$props.checkboxColumnKey,
        prefixCls = _me$props.prefixCls;

    var isChecked = rowData[checkboxColumnKey];
    var isHalfChecked = false;
    if (!isChecked) {
      isHalfChecked = _util2["default"].isRowHalfChecked(rowData, checkboxColumnKey);
    }
    return _react2["default"].createElement(_CheckBox2["default"], {
      checked: isChecked,
      halfChecked: isHalfChecked,
      className: prefixCls + '-tree-selector',
      onChange: me.handleTreeCheckChange.bind(me)
    });
  };

  Row.prototype.render = function render() {
    var _classnames,
        _this2 = this;

    var me = this;
    var props = this.props;

    var _columns = [];
    var _style = {};
    var otherCls = props.addRowClassName((0, _cloneDeep2["default"])(props.rowData));

    if (!this.props.visible) {
      _style = {
        display: 'none'
      };
    }

    props.columns.forEach(function (column) {
      if ('group' in column) {
        _columns = _columns.concat(column.columns);
      } else {
        _columns.push(column);
      }
    });

    var firstVisableColumn = 0;
    var hasSubComp = !!props.subComp;
    if (!hasSubComp) {
      hasSubComp = props.renderSubComp ? !!props.renderSubComp((0, _cloneDeep2["default"])(props.rowData)) : false;
    }
    return _react2["default"].createElement(
      'li',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, this.props.prefixCls, true), _defineProperty(_classnames, this.props.prefixCls + '-hover', props.isHover), _defineProperty(_classnames, otherCls, !!otherCls), _defineProperty(_classnames, 'even', props.index % 2 === 1), _defineProperty(_classnames, 'last', props.last), _classnames)),
        style: _style,
        onClick: function onClick() {
          _this2.handleClick(props.rowData);
        },
        onDoubleClick: function onDoubleClick() {
          _this2.handleDoubleClick(props.rowData);
        },
        onMouseEnter: function onMouseEnter() {
          _this2.handleMouseEnter();
        },
        onMouseLeave: function onMouseLeave() {
          _this2.handleMouseLeave();
        },
        ref: function ref(c) {
          _this2.root = c;
        }
      },
      _react2["default"].createElement(
        'div',
        {
          className: this.props.prefixCls + '-cells',
          ref: function ref(c) {
            _this2.container = c;
          },
          style: {
            cursor: props.toggleSubCompOnRowClick || props.toggleTreeExpandOnRowClick ? 'pointer' : 'default'
          },
          onClick: function onClick(e) {
            if (props.toggleSubCompOnRowClick) {
              _this2.showSubCompFunc(props.rowData);
            }
            if (props.toggleTreeExpandOnRowClick) {
              _this2.toggleExpanded(e);
            }
          }
        },
        _columns.map(function (item, index) {
          var rowSelectorInTreeMode = ['checkboxSelector', 'radioSelector'].indexOf(item.type) !== -1 && props.renderModel === 'tree';
          if (item.hidden || rowSelectorInTreeMode) {
            return null;
          }
          firstVisableColumn += 1;
          var renderProps = {
            key: 'cell' + index,
            column: item,
            root: props.root,
            locale: props.locale,
            rowData: props.rowData,
            rowIndex: props.rowIndex,
            index: props.index,
            changeSelected: props.changeSelected,
            rowSelection: props.rowSelection,
            actions: props.actions,
            mode: props.mode,
            bodyNode: props.bodyNode,
            handleDataChange: props.handleDataChange,
            toggleSubCompOnRowClick: props.toggleSubCompOnRowClick,
            attachCellField: props.attachCellField,
            detachCellField: props.detachCellField,
            last: index === _columns.length - 1,
            cellIndex: index,
            hasSubComp: hasSubComp,
            showSubCompCallback: me.showSubCompFunc.bind(me),
            rowLength: props.data.length,
            prefixCls: props.tablePrefixCls + '-cell',
            getTooltipContainer: props.getTooltipContainer,
            expandIconType: props.expandIconType,
            allowActionEventDefault: props.allowActionEventDefault
          };
          //修复树形表格操作列右固定时会出现选择框
          if (firstVisableColumn === 1 && props.fixedColumn !== 'rightFixed') {
            return _react2["default"].createElement(
              _Cell2["default"],
              renderProps,
              me.renderIndent(),
              me.renderExpandIcon(props.rowIndex, props.rowData.__treeId__),
              me.renderTreeRowSelector()
            );
          }
          // if have vertical data structure, how to process it
          return _react2["default"].createElement(_Cell2["default"], renderProps);
        })
      ),
      me.renderChild(),
      _react2["default"].createElement(
        _uxcoreAnimate2["default"],
        {
          component: '',
          animation: {
            enter: function enter(node, done) {
              _util2["default"].toggleHeightAnim(node, true, done);
            },
            leave: function leave(node, done) {
              _util2["default"].toggleHeightAnim(node, false, done);
            }
          }
        },
        this.renderSubComp()
      )
    );
  };

  return Row;
}(_react2["default"].Component);

Row.propTypes = {
  prefixCls: _propTypes2["default"].string,
  renderModel: _propTypes2["default"].string,
  checkboxColumnKey: _propTypes2["default"].string,
  root: _propTypes2["default"].any,
  rowData: _propTypes2["default"].object,
  rowSelection: _propTypes2["default"].object,
  showSubComp: _propTypes2["default"].bool,
  last: _propTypes2["default"].bool,
  isParentLast: _propTypes2["default"].bool,
  visible: _propTypes2["default"].bool,
  isHover: _propTypes2["default"].bool,
  level: _propTypes2["default"].number,
  levels: _propTypes2["default"].number,
  onClick: _propTypes2["default"].func,
  onMouseEnter: _propTypes2["default"].func,
  index: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
  height: _propTypes2["default"].number,
  addRowClassName: _propTypes2["default"].func
};

Row.defaultProps = {
  prefixCls: 'kuma-uxtable-row',
  showSubComp: false,
  onClick: function onClick() {},
  onMouseEnter: function onMouseEnter() {},
  addRowClassName: function addRowClassName() {},
  height: undefined,
  index: undefined,
  levels: undefined,
  level: undefined,
  isHover: undefined,
  visible: undefined,
  last: undefined,
  isParentLast: undefined,
  rowSelection: undefined,
  rowData: undefined,
  root: undefined,
  checkboxColumnKey: undefined,
  renderModel: undefined
};

exports["default"] = Row;
module.exports = exports['default'];