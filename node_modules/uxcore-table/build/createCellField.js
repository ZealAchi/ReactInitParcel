'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var CellField = require('uxcore-cell-field');
var assign = require('object-assign');
var React = require('react');

var Input = function Input(props) {
  return React.createElement('input', _extends({ className: 'kuma-input' }, props, { value: props.value, onChange: function onChange(e) {
      props.onChange(e.target.value);
    } }));
};

Input.propTypes = {
  value: React.PropTypes.string,
  onChange: React.PropTypes.func
};

var createCellField = function createCellField(options) {
  var CustomField = function (_CellField) {
    _inherits(CustomField, _CellField);

    function CustomField() {
      _classCallCheck(this, CustomField);

      return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
    }

    CustomField.prototype.renderContent = function renderContent() {
      var _extends2;

      var me = this;
      var defaultOptions = {
        valuePropName: 'value',
        changePropName: 'onChange',
        component: React.createElement(Input, null),
        processValue: function processValue(value) {
          return value;
        },
        processText: function processText(value) {
          return JSON.stringify(value);
        }
      };
      var newOptions = assign({}, defaultOptions, options);
      return React.cloneElement(newOptions.component, _extends((_extends2 = {}, _defineProperty(_extends2, newOptions.valuePropName, me.props.value), _defineProperty(_extends2, newOptions.changePropName, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        me.handleDataChange({
          value: newOptions.processValue.apply(me, args),
          text: newOptions.processText.apply(me, args)
        });
      }), _extends2), me.props.column.config || {}));
    };

    return CustomField;
  }(CellField);

  return CustomField;
};

module.exports = createCellField;