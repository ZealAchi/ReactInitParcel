'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _nattyFetch = require('natty-fetch');

var _nattyFetch2 = _interopRequireDefault(_nattyFetch);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _uxcoreCellField = require('uxcore-cell-field');

var _uxcoreCellField2 = _interopRequireDefault(_uxcoreCellField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Option = _uxcoreSelect2["default"].Option;


var getTextFromValue = function getTextFromValue(value) {
  if (Array.isArray(value)) {
    return value.map(function (item) {
      return item.label;
    }).join(', ');
  }if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    return value.label;
  }
  return '';
};

var processValue = function processValue(value) {
  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
    if (value === undefined || value === null) {
      return value;
    }
    return {
      key: value
    };
  }
  return value;
};

var SelectField = function (_CellField) {
  _inherits(SelectField, _CellField);

  function SelectField(props) {
    _classCallCheck(this, SelectField);

    var _this = _possibleConstructorReturn(this, _CellField.call(this, props));

    var me = _this;

    var _me$getConfig = me.getConfig(),
        data = _me$getConfig.data;

    (0, _objectAssign2["default"])(me.state, {
      data: typeof data === 'function' ? data(props.rowData) : data
    });
    return _this;
  }

  SelectField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var me = this;
    var nextData = me.getConfig(nextProps).data;

    var _me$getConfig2 = me.getConfig(),
        data = _me$getConfig2.data;

    nextData = typeof nextData === 'function' ? nextData(nextProps.rowData) : nextData;
    data = typeof data === 'function' ? data(me.props.rowData) : data;
    if (!(0, _isEqual2["default"])(nextData, data)) {
      me.setState({
        data: nextData
      });
    }
  };

  SelectField.prototype.componentDidMount = function componentDidMount() {
    _CellField.prototype.componentDidMount.call(this);
    var me = this;
    me.fetchData();
  };

  SelectField.prototype.addSpecificClass = function addSpecificClass() {
    return 'kuma-uxtable-select-cell-field';
  };

  SelectField.prototype.getConfig = function getConfig(props) {
    var me = this;
    return (props || me.props).column.config || {};
  };

  SelectField.prototype.fetchData = function fetchData(value) {
    var me = this;
    var config = me.getConfig();
    var defaultBeforeFetch = function defaultBeforeFetch(data) {
      return data;
    };
    var defaultAfterFetch = function defaultAfterFetch(data) {
      return data;
    };
    if (!config.fetchUrl) {
      return;
    }
    if (me.fetch) {
      me.fetch.abort();
    }
    me.fetch = _nattyFetch2["default"].create({
      url: config.fetchUrl,
      jsonp: config.dataType ? config.dataType === 'jsonp' : /\.jsonp/.test(config.fetchUrl),
      data: (config.beforeFetch || defaultBeforeFetch)({
        q: value
      }, me.props.rowData),
      fit: function fit(response) {
        var content = response.content === undefined ? response : response.content;
        var success = true;
        if (response.success !== undefined) {
          success = response.success;
        } else if (response.hasError !== undefined) {
          success = !response.hasError;
        }
        return {
          content: content,
          success: success
        };
      },
      Promise: _lie2["default"]
    });
    me.fetch().then(function (content) {
      var fetchData = (config.afterFetch || defaultAfterFetch)(content, me.props.rowData);
      me.setState({
        data: fetchData
      });
    })["catch"](function (e) {
      console.error(e.stack);
    });
  };

  SelectField.prototype.renderChildren = function renderChildren() {
    var me = this;
    var _me$props = me.props,
        column = _me$props.column,
        rowData = _me$props.rowData;
    var renderChildren = column.renderChildren;

    if (renderChildren) {
      return renderChildren(rowData);
    }
    return (me.state.data || []).map(function (item) {
      return _react2["default"].createElement(
        Option,
        { key: item.value },
        item.text
      );
    });
  };

  SelectField.prototype.renderContent = function renderContent() {
    var me = this;
    var propsToDelete = ['value', 'data', 'onChange'];
    var fieldProps = {
      onChange: function onChange(value) {
        me.handleDataChange({
          text: getTextFromValue(value),
          value: value
        });
      },
      onSearch: function onSearch(key) {
        if (me.searchTimer) {
          clearTimeout(me.searchTimer);
        }
        me.searchTimer = setTimeout(function () {
          if (me.getConfig().fetchUrl) {
            me.fetchData(key);
          } else {
            var _me$getConfig3 = me.getConfig(),
                onSearch = _me$getConfig3.onSearch;

            if (typeof onSearch === 'function') {
              onSearch(key, me.props.rowData);
            }
          }
        }, me.getConfig().searchDelay || 100);
      },
      labelInValue: true,
      value: processValue(me.props.value)
    };
    if (me.props.column.config) {
      var customProps = _extends({}, me.props.column.config);
      propsToDelete.forEach(function (item) {
        delete customProps[item];
      });
      (0, _objectAssign2["default"])(fieldProps, customProps);
    }
    return _react2["default"].createElement(
      _uxcoreSelect2["default"],
      fieldProps,
      me.renderChildren()
    );
  };

  return SelectField;
}(_uxcoreCellField2["default"]);

SelectField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreCellField2["default"].propTypes);

SelectField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreCellField2["default"].defaultProps);

exports["default"] = SelectField;
module.exports = exports['default'];