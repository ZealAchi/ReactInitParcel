'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var DraggableList = function (_React$Component) {
  _inherits(DraggableList, _React$Component);

  function DraggableList(props) {
    _classCallCheck(this, DraggableList);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.onDragStart = function (e) {
      var dragElement = e.currentTarget;
      dragElement.classList.add('is-dragging');
      _this.setState({
        dragElement: dragElement,
        isDragging: true
      });
      _this.dragLock = true;
    };

    _this.onDragEnter = function (e) {
      var dragElement = _this.state.dragElement;

      var target = e.currentTarget;
      var parent = target.parentElement;
      if (target !== dragElement) {
        parent.insertBefore(dragElement, target);
      }
    };

    _this.onDragLeave = function (e) {
      var dragElement = _this.state.dragElement;

      var target = e.currentTarget;
      var parent = target.parentElement;
      if (target !== dragElement) {
        var last = parent.lastElementChild;
        if (_this.dragLock && target === last) {
          parent.appendChild(dragElement);
          _this.dragLock = false;
        } else {
          _this.dragLock = true;
        }
      }
    };

    _this.onDragEnd = function (e) {
      var _this$props = _this.props,
          prefixCls = _this$props.prefixCls,
          onDrop = _this$props.onDrop,
          data = _this$props.data;
      var dragElement = _this.state.dragElement;

      dragElement.classList.remove('is-dragging');
      var dragInfo = {
        dragColumn: dragElement.getAttribute('data-key'),
        dragPosition: +dragElement.getAttribute('data-index'),
        dropPosition: 0
      };
      _this.setState({
        dragElement: null,
        isDragging: false
      });
      var resultNodes = (dragElement.parentNode ? dragElement.parentNode : document).querySelectorAll('.' + prefixCls + '-item');
      var newData = [];
      for (var i = 0; i < resultNodes.length; i++) {
        var node = resultNodes[i];
        var index = node.getAttribute('data-index');
        if (index === dragInfo.dragPosition) {
          dragInfo.dropPosition = i;
        }
        newData[i] = data[index];
      }
      onDrop(newData, dragInfo);
    };

    _this.state = {
      dragElement: null,
      isDragging: false
    };
    return _this;
  }

  DraggableList.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        prefixCls = _props.prefixCls,
        draggable = _props.draggable,
        itemRender = _props.itemRender,
        data = _props.data;

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-wrapper' },
      data.map(function (item, index) {
        return _react2["default"].createElement(
          'div',
          {
            key: item.dataKey || item.type || 'key_' + Math.random(),
            className: (0, _classnames2["default"])(prefixCls + '-item', { 'can-drag': draggable }),
            'data-index': index,
            'data-key': item.dataKey || item.type,
            draggable: draggable,
            onDragStart: _this2.onDragStart,
            onDragEnter: _this2.onDragEnter,
            onDragLeave: _this2.onDragLeave,
            onDragEnd: _this2.onDragEnd,
            onDragOver: function onDragOver(e) {
              e.preventDefault();
            },
            onDrop: function onDrop(e) {
              e.preventDefault();
            }
          },
          itemRender(item),
          draggable ? _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'drag' }) : null
        );
      })
    );
  };

  return DraggableList;
}(_react2["default"].Component);

DraggableList.propTypes = {
  prefixCls: _propTypes2["default"].string,
  draggable: _propTypes2["default"].bool,
  data: _propTypes2["default"].array,
  itemRender: _propTypes2["default"].func,
  onDrop: _propTypes2["default"].func
};
DraggableList.defaultProps = {
  prefixCls: 'kuma-draggable-list',
  draggable: true,
  data: [],
  itemRender: function itemRender() {},
  onDrop: function onDrop() {}
};
exports["default"] = DraggableList;
module.exports = exports['default'];