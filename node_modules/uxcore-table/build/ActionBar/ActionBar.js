'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SearchBar = require('./SearchBar');

var _SearchBar2 = _interopRequireDefault(_SearchBar);

var _ColumnPicker = require('./ColumnPicker');

var _ColumnPicker2 = _interopRequireDefault(_ColumnPicker);

var _LinkBar = require('./LinkBar');

var _LinkBar2 = _interopRequireDefault(_LinkBar);

var _CheckBox = require('../Cell/CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _RowOrder = require('./RowOrder');

var _RowOrder2 = _interopRequireDefault(_RowOrder);

var _ColumnOrder = require('./ColumnOrder');

var _ColumnOrder2 = _interopRequireDefault(_ColumnOrder);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Grid Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zhouquan.yezq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, UXCore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ActionBar = function (_React$Component) {
  _inherits(ActionBar, _React$Component);

  /**
   *  convert ActionBar config from hash to array
   */
  ActionBar.getActionItem = function getActionItem(config, useListActionBar) {
    var items = [];
    if (useListActionBar) {
      return config.buttons || [];
    }
    if (config instanceof Array) {
      items = config;
    } else if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
      Object.keys(config).forEach(function (item) {
        var callback = config[item];
        if (typeof callback === 'function') {
          items.push({
            title: item,
            callback: callback
          });
        }
      });
    }
    return items;
  };

  function ActionBar(props) {
    _classCallCheck(this, ActionBar);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.handleCheckBoxChange = function (e) {
      var v = e.target.checked;
      _this.props.selectAll.apply(null, [v]);
    };

    _this.changeView = function (e) {
      var _this$props = _this.props,
          useCustomView = _this$props.useCustomView,
          actionBarConfig = _this$props.actionBarConfig,
          data = _this$props.data,
          currentPage = _this$props.currentPage;
      var customView = actionBarConfig.customView,
          removePagerInCustomView = actionBarConfig.removePagerInCustomView;

      var target = e.target;
      var name = target.getAttribute('data-name');
      if (!name) {
        return;
      }
      _this.setState({
        activatedView: name
      });
      if (name === 'custom') {
        _this.setState({
          removeMiniPagerInCustomView: true
        });
        var view = customView.render(data, currentPage);
        if (_typeof(view.$$typeof) === 'symbol') {
          useCustomView(view, removePagerInCustomView);
        } else if (view.constructor.name === 'Promise') {
          view.then(function (data) {
            useCustomView(data, removePagerInCustomView);
          });
        } else {
          console.warn('不支持的customView类型');
        }
        // const view = renderCustomView(data, currentPage);
        // if (view && typeof view === 'object' && view.type && view.props && name !== 'table') {
        //   useCustomView(view, removePagerInCustomView)
        // }
      } else {
        useCustomView(null);
        _this.setState({
          removeMiniPagerInCustomView: false
        });
      }
    };

    _this.state = {
      activatedView: 'table',
      removeMiniPagerInCustomView: false
    };
    return _this;
  }

  ActionBar.prototype.handleSearch = function handleSearch(value) {
    this.props.onSearch(value);
  };

  ActionBar.prototype.renderActionBtn = function renderActionBtn(item, index) {
    var me = this;
    var isCustomRender = !!item.render && typeof item.render === 'function';
    var isDisabled = (me.state.activatedView !== 'table' || item.disabled) && !item.keepActiveInCustomView;
    var itemProps = {
      className: me.props.prefixCls + '-item ' + (item.className || ''),
      onClick: isDisabled ? function () {} : item.callback || function () {},
      type: item.type || 'secondary',
      key: index
    };
    if (isCustomRender) {
      return _react2["default"].createElement(
        'div',
        _extends({}, itemProps, { style: { cursor: 'pointer' } }),
        item.render(item.title)
      );
    }
    if (index === 0 && !me.props.useListActionBar) {
      itemProps.type = 'outline';
    }
    return _react2["default"].createElement(
      _uxcoreButton2["default"],
      _extends({}, itemProps, {
        size: item.size || 'small',
        disabled: isDisabled
      }),
      item.title
    );
  };

  ActionBar.prototype.renderLinkBar = function renderLinkBar(config) {
    var me = this;
    var tablePrefixCls = me.props.tablePrefixCls;

    return _react2["default"].createElement(_LinkBar2["default"], { config: config, prefixCls: tablePrefixCls + '-linkbar' });
  };

  ActionBar.prototype.renderSearchBar = function renderSearchBar(config) {
    var me = this;
    var searchBarProps = {
      onSearch: function onSearch(value) {
        me.handleSearch(value);
        config.onSearch(value);
      },
      key: 'searchbar',
      placeholder: config.placeholder || _i18n2["default"][this.props.locale].searchPlaceholder,
      prefixCls: me.props.tablePrefixCls + '-searchbar'
    };
    return _react2["default"].createElement(_SearchBar2["default"], searchBarProps);
  };

  ActionBar.prototype.renderColumnPicker = function renderColumnPicker(config) {
    var me = this;
    var _me$props = me.props,
        columns = _me$props.columns,
        handleColumnPickerChange = _me$props.handleColumnPickerChange,
        handleColumnPickerCheckAll = _me$props.handleColumnPickerCheckAll,
        checkboxColumnKey = _me$props.checkboxColumnKey,
        showColumnPickerCheckAll = _me$props.showColumnPickerCheckAll,
        width = _me$props.width,
        locale = _me$props.locale,
        tablePrefixCls = _me$props.tablePrefixCls,
        useListActionBar = _me$props.useListActionBar;

    var commonRenders = {
      columns: columns,
      locale: locale,
      dropdownMaxWidth: width,
      checkboxColumnKey: checkboxColumnKey,
      handleColumnPickerChange: handleColumnPickerChange,
      handleColumnPickerCheckAll: handleColumnPickerCheckAll,
      showColumnPickerCheckAll: showColumnPickerCheckAll,
      prefixCls: tablePrefixCls + '-column-picker'
    };

    return _react2["default"].createElement(_ColumnPicker2["default"], _extends({}, commonRenders, config, {
      isTableView: me.state.activatedView === 'table',
      useListActionBar: useListActionBar
    }));
  };

  ActionBar.prototype.renderSelectAll = function renderSelectAll() {
    var me = this;
    var _me$props2 = me.props,
        locale = _me$props2.locale,
        checkStatus = _me$props2.checkStatus;
    var isHalfChecked = checkStatus.isHalfChecked,
        isAllChecked = checkStatus.isAllChecked,
        isAllDisabled = checkStatus.isAllDisabled;

    return _react2["default"].createElement(
      'span',
      { className: me.props.tablePrefixCls + '-select-all' },
      _react2["default"].createElement(_CheckBox2["default"], {
        key: 'actionBarSelectAll',
        checked: isAllChecked,
        halfChecked: isHalfChecked,
        disable: isAllDisabled,
        onChange: me.handleCheckBoxChange,
        text: _i18n2["default"][locale].check_all
      }),
      isHalfChecked ? _react2["default"].createElement(
        'span',
        { style: { verticalAlign: 'middle' } },
        ' ' + _i18n2["default"][locale].check_all
      ) : ''
    );
  };

  ActionBar.prototype.renderListActionBar = function renderListActionBar(config) {
    var me = this;
    var activatedView = me.state.activatedView;
    var _me$props3 = me.props,
        columns = _me$props3.columns,
        handleColumnOrderChange = _me$props3.handleColumnOrderChange,
        locale = _me$props3.locale;
    var className = config.className,
        showSelectAll = config.showSelectAll,
        actionBarTip = config.actionBarTip,
        customBarItem = config.customBarItem,
        rowOrder = config.rowOrder,
        columnsOrder = config.columnsOrder,
        columnsPicker = config.columnsPicker,
        showMiniPager = config.showMiniPager,
        customView = config.customView,
        linkBar = config.linkBar,
        search = config.search;

    return _react2["default"].createElement(
      'div',
      { className: (0, _classnames3["default"])(me.props.tablePrefixCls + '-list-action-bar', _defineProperty({}, className, className)) },
      _react2["default"].createElement(
        'div',
        { className: 'left' },
        showSelectAll ? me.renderSelectAll() : null,
        config.buttons.map(function (item, index) {
          return me.renderActionBtn(item, index);
        }),
        actionBarTip ? _react2["default"].createElement(
          'div',
          { style: { display: 'inline-block' } },
          typeof actionBarTip === 'string' ? actionBarTip : typeof actionBarTip === 'function' ? actionBarTip() : null
        ) : null
      ),
      customBarItem && customBarItem.render ? _react2["default"].createElement(
        'div',
        { className: 'custom' },
        customBarItem.render()
      ) : null,
      _react2["default"].createElement(
        'div',
        { className: 'right' },
        search ? this.renderSearchBar(search) : null,
        customView ? _react2["default"].createElement(
          'div',
          { onClick: this.changeView },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, className: (0, _classnames3["default"])({
              active: activatedView === 'table'
            }), 'data-name': 'table', name: 'renwufull' }),
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, className: (0, _classnames3["default"])({
              active: activatedView === 'custom'
            }), 'data-name': 'custom', name: 'biaoge1' })
        ) : null,
        showMiniPager && !this.state.removeMiniPagerInCustomView ? _react2["default"].createElement(
          'div',
          { style: { paddingTop: '5px' } },
          this.props.renderPager(true)
        ) : null,
        columnsPicker ? this.renderColumnPicker(columnsPicker) : null,
        columnsOrder ? _react2["default"].createElement(_ColumnOrder2["default"], _extends({}, columnsOrder, {
          locale: locale,
          handleColumnOrderChange: handleColumnOrderChange,
          columns: columns,
          isTableView: activatedView === 'table'
        })) : null,
        rowOrder ? _react2["default"].createElement(_RowOrder2["default"], _extends({}, rowOrder, {
          isTableView: activatedView === 'table'
        })) : null,
        linkBar ? this.renderLinkBar(linkBar) : null
      )
    );
  };

  ActionBar.prototype.fixActionBarConfig = function fixActionBarConfig() {
    // when useListActionBar is false or undefined
    var _props = this.props,
        showSearch = _props.showSearch,
        _onSearch = _props.onSearch,
        searchBarPlaceholder = _props.searchBarPlaceholder,
        showColumnPicker = _props.showColumnPicker,
        onColumnPicker = _props.onColumnPicker,
        linkBar = _props.linkBar,
        locale = _props.locale,
        actionBarConfig = _props.actionBarConfig,
        useListActionBar = _props.useListActionBar;

    var barConfig = {};
    if (useListActionBar) {
      if (!actionBarConfig || (typeof actionBarConfig === 'undefined' ? 'undefined' : _typeof(actionBarConfig)) !== 'object') {
        console.error('当useListActionBar为true时，actionBar参数不可省略');
      }
      barConfig = _extends({}, actionBarConfig);
      if (!barConfig.buttons || !barConfig.buttons.splice) {
        barConfig.buttons = [];
      }
    } else {
      barConfig.buttons = ActionBar.getActionItem(actionBarConfig);
    }

    if (showColumnPicker) {
      if (!barConfig.columnsPicker) {
        barConfig.columnsPicker = {
          iconName: 'zidingyilie',
          title: _i18n2["default"][locale].templated_column,
          keepActiveInCustomView: true,
          onChange: function onChange(data) {
            onColumnPicker && onColumnPicker(data);
          }
        };
      }
    }

    if (showSearch) {
      if (!barConfig.search) {
        barConfig.search = {
          placeholder: searchBarPlaceholder || _i18n2["default"][locale].searchPlaceholder,
          onSearch: function onSearch(value) {
            _onSearch && _onSearch(value);
          }
        };
      }
    }

    if (linkBar) {
      if (!barConfig.linkBar) {
        barConfig.linkBar = linkBar;
      }
    }
    return barConfig;
  };

  ActionBar.prototype.render = function render() {
    var props = this.props;

    var actionBarConfig = this.fixActionBarConfig();
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])(props.tablePrefixCls + '-actionbar', {
          'fn-clear': true
        })
      },
      this.renderListActionBar(actionBarConfig)
    );
  };

  return ActionBar;
}(_react2["default"].Component);

ActionBar.propTypes = {
  showSearch: _propTypes2["default"].bool,
  onSearch: _propTypes2["default"].func
};

ActionBar.defaultProps = {
  showSearch: false,
  onSearch: function onSearch() {}
};

exports["default"] = ActionBar;
module.exports = exports['default'];