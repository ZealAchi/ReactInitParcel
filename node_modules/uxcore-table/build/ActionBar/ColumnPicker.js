'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _uxcoreTree = require('uxcore-tree');

var _uxcoreTree2 = _interopRequireDefault(_uxcoreTree);

var _uxcorePopover = require('uxcore-popover');

var _uxcorePopover2 = _interopRequireDefault(_uxcorePopover);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _i18n = require('../i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _CheckBox = require('../Cell/CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _CheckBox3 = require('./CheckBox');

var _CheckBox4 = _interopRequireDefault(_CheckBox3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var getSelectedKeys = _util2["default"].getSelectedKeys,
    getConsts = _util2["default"].getConsts;
var TreeNode = _uxcoreTree2["default"].TreeNode;

var ColumnPicker = function (_React$Component) {
  _inherits(ColumnPicker, _React$Component);

  function ColumnPicker(props) {
    _classCallCheck(this, ColumnPicker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _initialiseProps.call(_this);

    var columnsInfo = _util2["default"].getColumnsInfo(props.columns);
    _this.state = {
      visible: false,
      columnsInfo: columnsInfo,
      preColumns: props.columns,
      selectedKeys: getSelectedKeys(props.columns).selectedKeys
    };
    return _this;
  }

  ColumnPicker.prototype.componentDidUpdate = function componentDidUpdate() {
    var me = this;
    if (this.state.visible) {
      var dropDownDOMNode = me.getDropDownDOMNOde();
      var commonTreeDOMNode = me.commonTree.refs.tree;
      var width = commonTreeDOMNode.offsetWidth + 41;
      for (var i = 0; i < me.groupNum; i++) {
        width += me['groupTree-' + i].refs.tree.offsetWidth;
      }
      var maxWidth = typeof me.props.dropdownMaxWidth === 'number' ? me.props.dropdownMaxWidth : 1000;
      dropDownDOMNode.style.width = (width <= maxWidth ? width : maxWidth) + 'px';
    }
  };

  ColumnPicker.prototype.getDropDownDOMNOde = function getDropDownDOMNOde() {
    return this.dropDownDOMNode;
  };

  ColumnPicker.prototype.handlePickerSelect = function handlePickerSelect(groupName, selectedKeys) {
    this.props.handleColumnPickerChange(selectedKeys, groupName);
  };

  ColumnPicker.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
      return false;
    };
  };

  ColumnPicker.prototype.renderCheckAll = function renderCheckAll() {
    var _props = this.props,
        locale = _props.locale,
        prefixCls = _props.prefixCls,
        columns = _props.columns,
        showColumnPickerCheckAll = _props.showColumnPickerCheckAll;

    if (!showColumnPickerCheckAll) {
      return false;
    }

    var _getSelectedKeys = getSelectedKeys(columns),
        selectedKeys = _getSelectedKeys.selectedKeys,
        isHalfChecked = _getSelectedKeys.isHalfChecked;

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-check-all' },
      _react2["default"].createElement('span', { style: { width: 22, display: 'inline-block' } }),
      _react2["default"].createElement(_CheckBox2["default"], {
        onChange: this.handleChexkAll,
        checked: selectedKeys.length !== 0,
        halfChecked: selectedKeys.length !== 0 ? isHalfChecked : false
      }),
      _i18n2["default"][locale].check_all,
      _react2["default"].createElement('div', { className: prefixCls + '-check-all-split-line' })
    );
  };

  ColumnPicker.prototype.isChecked = function isChecked(key) {
    return this.state.selectedKeys.indexOf(key) !== -1;
  };

  ColumnPicker.prototype.renderTree = function renderTree() {
    var me = this;
    var columns = me.props.columns;

    var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
    notRenderColumns.push(me.props.checkboxColumnKey);
    var options = [];
    var groupTree = [];
    me.groupNum = 0;
    columns.forEach(function (item) {
      // the column is not the notRender one and is not the group.
      var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
      if (isGroup) {
        me.hasGroup = true;
      }
      if (notRenderColumns.indexOf(item.dataKey) === -1 && !isGroup) {
        if (item.dataKey && item.type !== 'action') {
          options.push(_react2["default"].createElement(TreeNode, {
            key: item.dataKey,
            title: typeof item.title === 'function' ? item.title() : item.title
          }));
        }
      } else if (isGroup) {
        groupTree.push(me.renderGroupTree(item, me.groupNum));
        me.groupNum += 1;
      }
    });

    var commonGroupName = getConsts().commonGroup;

    var _getSelectedKeys2 = getSelectedKeys(columns.filter(function (item) {
      var isGroup = {}.hasOwnProperty.call(item, 'columns') && _typeof(item.columns) === 'object';
      return !isGroup;
    })),
        commonSelectedKeys = _getSelectedKeys2.selectedKeys;

    var commonTree = _react2["default"].createElement(
      _uxcoreTree2["default"],
      {
        checkable: true,
        multiple: true,
        selectable: false,
        className: !me.hasGroup ? 'no-group' : '',
        ref: me.saveRef('commonTree'),
        checkedKeys: commonSelectedKeys,
        onCheck: me.handlePickerSelect.bind(me, commonGroupName)
      },
      options
    );

    // if (!me.hasGroup) {
    //   return commonTree;
    // }

    return _react2["default"].createElement(
      'div',
      null,
      this.renderCheckAll(),
      groupTree,
      commonTree
    );
  };

  ColumnPicker.prototype.renderGroupTree = function renderGroupTree(group, index) {
    var me = this;
    var options = (group.columns || []).map(function (item) {
      return _react2["default"].createElement(TreeNode, {
        key: item.dataKey,
        title: typeof item.title === 'function' ? item.title() : item.title
      });
    });

    var _getSelectedKeys3 = getSelectedKeys(group.columns),
        selectedKeys = _getSelectedKeys3.selectedKeys;

    return _react2["default"].createElement(
      _uxcoreTree2["default"],
      {
        key: group.group,
        ref: this.saveRef('groupTree-' + index),
        checkable: true,
        multiple: true,
        selectable: false,
        defaultExpandAll: true,
        checkedKeys: selectedKeys,
        onCheck: me.handlePickerSelect.bind(me, group.group)
      },
      _react2["default"].createElement(
        TreeNode,
        { title: group.group, key: group.group },
        options
      )
    );
  };

  ColumnPicker.prototype.renderPickerGroup = function renderPickerGroup(group) {
    var _this2 = this;

    var prefixCls = this.props.prefixCls;

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-group', key: group.title },
      group.title ? _react2["default"].createElement(
        'p',
        { style: { width: '100%', lineHeight: 2 } },
        ' ',
        group.title
      ) : null,
      group.columns.map(function (column) {
        var title = typeof column.title === 'function' ? column.title() : column.title;
        return column.dataKey ? _react2["default"].createElement(
          _CheckBox4["default"],
          {
            key: column.dataKey,
            checked: _this2.isChecked(column.dataKey),
            disable: column.disable || column.isDisable && column.isDisable(),
            onChange: function onChange(e) {
              _this2.handleCheck(e, column.dataKey);
            }
          },
          _react2["default"].createElement(
            'span',
            { title: typeof title === 'string' ? title : column.dataKey },
            title || column.dataKey
          )
        ) : null;
      })
    );
  };

  ColumnPicker.prototype.renderPickerGroups = function renderPickerGroups() {
    var _this3 = this;

    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        locale = _props2.locale,
        showColumnPickerCheckAll = _props2.showColumnPickerCheckAll;
    var _state = this.state,
        selectedKeys = _state.selectedKeys,
        columnsInfo = _state.columnsInfo;
    var columns = columnsInfo.columns;

    var isChecked = selectedKeys.length === columns.length;
    var isHalfChecked = selectedKeys.length && !isChecked;
    var groups = this.getPickerGroups();
    return _react2["default"].createElement(
      'div',
      { style: { position: 'relative' } },
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-groups' },
        _react2["default"].createElement(
          'div',
          { className: prefixCls + '-header' },
          _i18n2["default"][locale].columnPickerTip
        ),
        _react2["default"].createElement(
          'div',
          { className: prefixCls + '-content' },
          groups.map(function (group) {
            return _this3.renderPickerGroup(group);
          })
        )
      ),
      showColumnPickerCheckAll ? _react2["default"].createElement(
        _CheckBox4["default"],
        {
          className: prefixCls + '-check-all',
          checked: isChecked,
          halfChecked: isHalfChecked,
          onChange: this.handleCheckAll
        },
        ' ',
        _i18n2["default"][locale].check_all
      ) : null
    );
  };

  ColumnPicker.prototype.getPickerGroups = function getPickerGroups() {
    var setPickerGroups = this.props.setPickerGroups;
    var columns = this.state.columnsInfo.columns;

    var groups = setPickerGroups(columns);
    if (groups && groups.length) {
      return groups;
    }
    return [{
      title: '',
      columns: columns
    }];
  };

  ColumnPicker.prototype.renderListActionBar = function renderListActionBar() {
    var me = this;
    var p = me.props;
    var columnsInfo = this.state.columnsInfo;

    var disabled = !p.keepActiveInCustomView && !p.isTableView || !columnsInfo.columns.length;
    return _react2["default"].createElement(
      _uxcorePopover2["default"],
      {
        placement: 'bottomRight',
        trigger: 'click',
        overlay: !disabled ? me.renderPickerGroups() : _react2["default"].createElement('div', null),
        overlayClassName: (0, _classnames3["default"])({
          'list-action-bar-picker-overlay': true,
          'kuma-popover-hidden': disabled
        }),
        onOk: this.handleOk,
        okText: _i18n2["default"][p.locale].okText,
        cancelText: _i18n2["default"][p.locale].cancelText,
        locale: p.locale,
        showButton: true
      },
      _react2["default"].createElement(
        'div',
        { className: (0, _classnames3["default"])('picker-title', {
            'disabled': disabled
          }) },
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: p.iconName }),
        _react2["default"].createElement(
          'span',
          null,
          p.title || _i18n2["default"][p.locale].templated_column
        )
      )
    );
  };

  ColumnPicker.prototype.render = function render() {
    var _classnames;

    var me = this;
    var p = me.props;
    if (p.useListActionBar) {
      return this.renderListActionBar();
    }
    var prefixCls = p.prefixCls,
        locale = p.locale;

    return _react2["default"].createElement(
      _uxcorePopover2["default"],
      {
        placement: 'bottomRight',
        trigger: 'click',
        overlay: me.renderTree(),
        overlayClassName: prefixCls + '-popover',
        align: {
          offset: [0, -10]
        }
      },
      _react2["default"].createElement(
        'div',
        { className: prefixCls },
        _react2["default"].createElement(
          'div',
          {
            className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-trigger', true), _defineProperty(_classnames, prefixCls + '-trigger__dropdown-visible', !!me.state.visible), _classnames))
          },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'zidingyilie', className: prefixCls + '-icon' }),
          _react2["default"].createElement(
            'span',
            { className: prefixCls + '-title' },
            _i18n2["default"][locale].templated_column
          )
        )
      )
    );
  };

  return ColumnPicker;
}(_react2["default"].Component);

ColumnPicker.getDerivedStateFromProps = function (props, state) {
  if (props.columns !== state.preColumns) {
    return {
      selectedKeys: getSelectedKeys(props.columns).selectedKeys,
      columnsInfo: _util2["default"].getColumnsInfo(props.columns),
      preColumns: props.columns
    };
  }
  return null;
};

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.handleChexkAll = function (e) {
    _this4.props.handleColumnPickerCheckAll(e.target.checked);
  };

  this.handleCheck = function (e, key) {
    var checked = e.target.checked;
    var selectKeys = [].concat(_toConsumableArray(_this4.state.selectedKeys));
    var hasChecked = _this4.isChecked(key);
    if (checked) {
      !hasChecked && selectKeys.push(key);
    } else {
      hasChecked && (selectKeys = selectKeys.filter(function (item) {
        return item !== key;
      }));
    }
    _this4.setState({
      selectedKeys: selectKeys
    });
  };

  this.handleCheckAll = function (e) {
    var checked = e.target.checked;
    var _state$columnsInfo = _this4.state.columnsInfo,
        readOnlyColumnKeys = _state$columnsInfo.readOnlyColumnKeys,
        columnsKey = _state$columnsInfo.columnsKey;

    _this4.setState({
      selectedKeys: !checked ? [].concat(readOnlyColumnKeys) : columnsKey
    });
  };

  this.handleOk = function (hideCallback) {
    var _state2 = _this4.state,
        selectedKeys = _state2.selectedKeys,
        columnsInfo = _state2.columnsInfo;
    var _props3 = _this4.props,
        handleColumnPickerChange = _props3.handleColumnPickerChange,
        handleColumnPickerCheckAll = _props3.handleColumnPickerCheckAll,
        onChange = _props3.onChange;

    var checkAll = selectedKeys.length === columnsInfo.columnsKey.length;
    var checkNone = !selectedKeys.length;
    if (checkAll || checkNone) {
      if (checkAll) {
        handleColumnPickerCheckAll(true);
      } else if (checkNone) {
        handleColumnPickerCheckAll(false);
      }
    } else {
      handleColumnPickerChange(selectedKeys, getConsts().commonGroup);
    }
    onChange(selectedKeys);
    hideCallback();
  };
};

ColumnPicker.defaultProps = {
  prefixCls: 'kuma-uxtable-column-picker',
  showColumnPickerCheckAll: false,
  locale: 'zh-cn',
  columns: [],
  handleColumnPickerChange: function handleColumnPickerChange() {},
  handleColumnPickerCheckAll: function handleColumnPickerCheckAll() {},
  onChange: function onChange() {},
  setPickerGroups: function setPickerGroups() {
    return null;
  }
};
ColumnPicker.propTypes = {
  prefixCls: _propTypes2["default"].string,
  showColumnPickerCheckAll: _propTypes2["default"].bool,
  locale: _propTypes2["default"].string,
  columns: _propTypes2["default"].array,
  handleColumnPickerChange: _propTypes2["default"].func,
  handleColumnPickerCheckAll: _propTypes2["default"].func,
  onChange: _propTypes2["default"].func,
  setPickerGroups: _propTypes2["default"].func
};

ColumnPicker.displayName = 'ColumnPicker';

exports["default"] = ColumnPicker;
module.exports = exports['default'];