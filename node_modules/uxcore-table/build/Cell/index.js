'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _uxcoreDateCellField = require('uxcore-date-cell-field');

var _uxcoreDateCellField2 = _interopRequireDefault(_uxcoreDateCellField);

var _uxcoreCheckboxCellField = require('uxcore-checkbox-cell-field');

var _uxcoreCheckboxCellField2 = _interopRequireDefault(_uxcoreCheckboxCellField);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _uxcoreButtonGroup = require('uxcore-button-group');

var _uxcoreButtonGroup2 = _interopRequireDefault(_uxcoreButtonGroup);

var _CheckBox = require('./CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _Radio = require('./Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _TextField = require('../CellField/TextField');

var _TextField2 = _interopRequireDefault(_TextField);

var _SelectField = require('../CellField/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _RadioField = require('../CellField/RadioField');

var _RadioField2 = _interopRequireDefault(_RadioField);

var _util = require('../util');

var _util2 = _interopRequireDefault(_util);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var fieldsMap = {
  select: _SelectField2["default"],
  text: _TextField2["default"],
  radio: _RadioField2["default"],
  date: _uxcoreDateCellField2["default"],
  check: _uxcoreCheckboxCellField2["default"]
};

var Cell = function (_React$Component) {
  _inherits(Cell, _React$Component);

  function Cell(props) {
    _classCallCheck(this, Cell);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.showSubComp = _this.showSubComp.bind(_this);
    _this.handleCheckChange = _this.handleCheckChange.bind(_this);
    return _this;
  }

  Cell.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    // 需要考虑的 prop 包括
    // column, rowData, rowIndex(s), index(s), cellIndex(s), hasSubComp(s)
    // rowSelection, actions, mode(s)
    var me = this;
    var shouldUpdate = false;

    // only tree mode has children
    if ('children' in nextProps) {
      return true;
    }

    ['rowIndex', 'index', 'cellIndex', 'hasSubComp', 'mode'].forEach(function (item) {
      if (me.props[item] !== nextProps[item]) {
        shouldUpdate = true;
      }
    });

    if (!shouldUpdate) {
      ['column', 'rowSelection', 'rowData', 'actions'].forEach(function (item) {
        if (!(0, _isEqual2["default"])(me.props[item], nextProps[item])) {
          shouldUpdate = true;
        }
      });
    }

    return shouldUpdate;
  };

  /**
   * @param actions {Array|Object|Function}
   */


  Cell.prototype.getActionItems = function getActionItems(actions) {
    if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== 'object' && typeof actions !== 'function') {
      console.error('Table: Actions should be an object/array/function');
      return [];
    }
    var me = this;
    me.items = [];
    if (typeof actions === 'function') {
      me.items = actions(me.props.rowData);
    } else if (actions instanceof Array) {
      me.items = actions;
    } else {
      Object.keys(actions).forEach(function (item) {
        me.items.push({
          title: item,
          callback: actions[item]
        });
      });
    }
    return me.items;
  };

  Cell.prototype.getEditData = function getEditData() {
    var me = this;
    var column = me.props.column;

    var editKey = column.editKey || column.dataKey;
    return me.props.rowData[editKey];
  };

  Cell.prototype.getCellData = function getCellData(nextProps) {
    var props = nextProps || this.props;
    var column = props.column;

    var cellData = props.rowData[column.dataKey];
    return cellData;
  };

  Cell.prototype.handleCheckChange = function handleCheckChange(e) {
    var me = this;
    me.props.changeSelected(e.target.checked, me.props.rowIndex, false);
  };

  Cell.prototype.handleActionClick = function handleActionClick(cb, e) {
    var allowActionEventDefault = this.props.allowActionEventDefault;

    if (!allowActionEventDefault) {
      e.stopPropagation();
      e.preventDefault();
    } else {
      console.warn('allowActionEventDefault 为真时与树形表格存在冲突，请谨慎选择使用!');
    }
    if (cb) {
      cb();
    }
  };

  Cell.prototype.handleCellClick = function handleCellClick(e) {
    var me = this;
    var _me$props = me.props,
        column = _me$props.column,
        toggleSubCompOnRowClick = _me$props.toggleSubCompOnRowClick;
    var type = column.type;

    if (type === 'action' && toggleSubCompOnRowClick) {
      e.stopPropagation();
    }
  };

  Cell.prototype.showSubComp = function showSubComp(e) {
    if (e.target.classList.contains('kuma-icon') && this.props.toggleSubCompOnRowClick) {
      return;
    }
    this.props.showSubCompCallback.apply();
  };

  /**
   * @param {Object} column current column config
   * @param {Object} rowData current row data
   * @param {String} mode current row mode: edit or view, same as rowData['__mode__']
   */

  Cell.prototype.renderActionItems = function renderActionItems(column, rowData, mode) {
    var _this2 = this;

    var me = this;
    var actions = me.getActionItems(column.actions).filter(function (item) {
      return !('mode' in item) || item.mode === mode;
    });
    var items = [];
    actions.forEach(function (action, index) {
      var content = action.render ? action.render(action.title, (0, _cloneDeep2["default"])(me.props.rowData)) : action.title;
      if (content) {
        items.push(_react2["default"].createElement(
          _uxcoreButton2["default"],
          {
            buttonType: action.buttonType,
            type: 'outline',
            key: index,
            disabled: typeof action.isDisable === 'function' ? action.isDisable(rowData) : false
            // onClick={me.handleActionClick.bind(me,
            //   (action.callback || (() => {})).bind(me, rowData, me.props.root))}
            , onClick: function onClick(e) {
              var noop = function noop() {};
              var cb = function cb() {
                (action.callback || noop)(rowData, me.props.root);
              };
              _this2.handleActionClick(cb, e);
            }
          },
          content
        ));
      }
    });
    return _react2["default"].createElement(
      _uxcoreButtonGroup2["default"],
      {
        separated: true,
        size: 'small',
        maxLength: column.collapseNum,
        actionType: column.actionType || 'link',
        locale: me.props.locale
      },
      items
    );
  };

  Cell.prototype.renderTreeIcon = function renderTreeIcon() {
    var _props = this.props,
        cellIndex = _props.cellIndex,
        hasSubComp = _props.hasSubComp,
        rowData = _props.rowData,
        expandIconType = _props.expandIconType;

    if (cellIndex === 0 && hasSubComp) {
      var open = rowData.showSubComp;
      return _react2["default"].createElement(
        'span',
        {
          className: 'kuma-uxtable-tree-icon',
          onClick: this.showSubComp
        },
        expandIconType === 'adderSubtractor' ? _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: open ? 'zhedie' : 'zhankai1' }) : _react2["default"].createElement('i', {
          className: (0, _classnames3["default"])({
            'kuma-icon': true,
            'kuma-icon-triangle-right': true,
            'kuma-icon-triangle-right__open': open
          })
        })
      );
    }
    return null;
  };

  Cell.prototype.render = function render() {
    var _classnames,
        _this3 = this;

    var me = this;
    var props = me.props;
    var column = props.column;
    var width = column.width;

    var mode = props.rowData.__mode__;
    var style = {
      width: width || '100px',
      textAlign: props.column.align ? props.column.align : 'left'
    };
    var content = (0, _cloneDeep2["default"])(props.rowData);
    var renderProps = void 0;

    if (column.type === 'action') {
      content = _react2["default"].createElement(
        'div',
        { className: 'action-container' },
        me.renderActionItems(column, content, mode)
      );
      style.cursor = 'default';
    } else if (column.type === 'checkbox' || column.type === 'checkboxSelector') {
      style.paddingRight = '4px';
      style.paddingLeft = '12px';
      style.borderRight = 'none';

      var checked = me.getCellData();
      var disable = props.rowSelection.isDisabled ? props.rowSelection.isDisabled(props.rowData) : false;
      if ('disable' in column) {
        disable = column.disable;
      } else if ('isDisable' in column) {
        disable = !!column.isDisable(props.rowData);
      }
      content = _react2["default"].createElement(_CheckBox2["default"], {
        disable: disable,
        mode: props.mode,
        align: props.column.align,
        checked: checked,
        onChange: me.handleCheckChange
      });
    } else if (column.type === 'radioSelector') {
      style.paddingRight = '4px';
      style.paddingLeft = '12px';
      style.borderRight = 'none';

      var _checked = me.getCellData();
      var _disable = props.rowSelection.isDisabled ? props.rowSelection.isDisabled(props.rowData) : false;
      if ('disable' in column) {
        _disable = column.disable;
      } else if ('isDisable' in column) {
        _disable = !!column.isDisable(props.rowData);
      }
      content = _react2["default"].createElement(_Radio2["default"], {
        disable: _disable,
        mode: props.mode,
        align: props.column.align,
        checked: _checked,
        onChange: me.handleCheckChange
      });
    } else if (column.type === 'treeIcon') {
      content = me.renderTreeIcon();
      style.borderRight = 'none';
    } else if ((column.type === 'custom' || column.type in fieldsMap) && mode === _uxcoreConst2["default"].MODE.EDIT && (!('canEdit' in column) || column.canEdit(props.rowData))) {
      // inline edit mode
      renderProps = {
        value: me.getEditData(),
        rowData: props.rowData,
        index: props.index,
        column: column,
        getTooltipContainer: function getTooltipContainer() {
          return props.getTooltipContainer ? props.getTooltipContainer(props.bodyNode) : props.rowLength < 5 ? document.body : props.bodyNode;
        },
        handleDataChange: props.handleDataChange,
        attachCellField: props.attachCellField,
        detachCellField: props.detachCellField
      };
      var Field = void 0;

      if (column.type === 'custom') {
        Field = props.column.customField;
      } else {
        Field = fieldsMap[column.type];
      }
      content = _react2["default"].createElement(Field, renderProps);
    } else if (column.type === 'money' || column.type === 'card' || column.type === 'cnmobile') {
      content = _react2["default"].createElement(
        'div',
        {
          className: 'default-cell',
          title: me.getCellData()
        },
        _util2["default"].formatValue(me.getCellData(), column.type, column.delimiter)
      );
    } else if (column.render) {
      content = column.render.apply(null, [me.getCellData(), content, props.index]);
    } else {
      content = _react2["default"].createElement(
        'div',
        { className: 'default-cell', title: me.getCellData() },
        me.getCellData()
      );
    }

    var child = me.props.children;
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, props.prefixCls, true), _defineProperty(_classnames, 'last', props.last), _classnames)),
        style: style,
        onClick: function onClick(e) {
          _this3.handleCellClick(e);
        },
        ref: function ref(c) {
          _this3.root = c;
        }
      },
      child,
      content
    );
  };

  return Cell;
}(_react2["default"].Component);

Cell.propTypes = {
  cellIndex: _propTypes2["default"].number,
  hasSubComp: _propTypes2["default"].bool,
  rowData: _propTypes2["default"].object,
  prefixCls: _propTypes2["default"].string,
  showSubCompCallback: _propTypes2["default"].func,
  rowSelection: _propTypes2["default"].object
};

Cell.defaultProps = {
  prefixCls: 'kuma-uxtable-cell',
  showSubCompCallback: function showSubCompCallback() {},
  rowSelection: {},
  rowData: undefined,
  hasSubComp: undefined,
  cellIndex: undefined
};

exports["default"] = Cell;
module.exports = exports['default'];