'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function addEmptyRow(cb) {
  this.insertRecords({}, false, cb);
}

function addEmptyRowFromTop(cb) {
  this.insertRecords({}, true, cb);
}

function addRow(rowData, cb) {
  this.insertRecords(rowData, false, cb);
}

function addRowFromTop(rowData, cb) {
  this.insertRecords(rowData, true, cb);
}

function addSubRow(subRowData, rowData, cb) {
  var _props = this.props,
      loadTreeData = _props.loadTreeData,
      renderModel = _props.renderModel;

  if (loadTreeData && (!rowData.data || !rowData.data.length)) {
    this.toggleTreeExpanded(rowData);
  } else {
    var jsxid = rowData.jsxid;

    if (jsxid >= 0 && renderModel === 'tree') {
      this.insertRecords(subRowData, false, cb, jsxid);
    }
  }
}

function addSubRowFromTop(subRowData, rowData, cb) {
  var _props2 = this.props,
      loadTreeData = _props2.loadTreeData,
      renderModel = _props2.renderModel;

  if (loadTreeData && (!rowData.data || !rowData.data.length)) {
    this.toggleTreeExpanded(rowData);
  } else {
    var jsxid = rowData.jsxid;

    if (jsxid >= 0 && renderModel === 'tree') {
      this.insertRecords(subRowData, true, cb, jsxid);
    }
  }
}

function resetRow(rowData, cb) {
  var _this = this;

  var me = this;
  var updateData = {};
  var data = me.data.datas || me.data.data;
  for (var i = 0; i < data.length; i++) {
    if (data[i].jsxid === rowData.jsxid) {
      updateData = (0, _cloneDeep2["default"])(data[i]);
      break;
    }
  }
  this.updateRecord(updateData, function () {
    _this.doValidate();
    if (cb) {
      cb(updateData);
    }
  });
}

function resetAllRow(cb) {
  var _this2 = this;

  var me = this;
  var copyData = (0, _cloneDeep2["default"])(me.data);
  var stateData = me.state.data.data || me.state.data.datas;
  if (copyData.data || copyData.datas) {
    var data = copyData.data || copyData.datas;

    var _loop = function _loop(i) {
      var item = data[i];
      stateData.forEach(function (stateItem) {
        if (item.jsxid === stateItem.jsxid) {
          item.__mode__ = stateItem.__mode__;
        }
      });
    };

    for (var i = 0; i < data.length; i++) {
      _loop(i);
    }
    this.setState({
      data: copyData
    }, function () {
      _this2.doValidate();
      if (cb) {
        cb();
      }
    });
  }
}

function delRow(rowData, cb) {
  this.removeRecords(rowData, cb);
}

function editRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.EDIT;
  this.updateRecord(newRowData, cb);
}

function viewRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  this.updateRecord(newRowData, cb);
}

function viewAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.state.data.data || me.state.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item = data[i];
    _item.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  }
  this.updateRecord(data, cb);
}

function resetAndViewAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.data.data || me.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item2 = data[i];
    _item2.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  }
  this.updateRecord(data, cb);
}

function saveRow(rowData, cb) {
  var newRowData = (0, _cloneDeep2["default"])(rowData);
  newRowData.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
  newRowData.__edited__ = true;
  this.syncRecord(newRowData, cb);
}

function updateRow(rowData, cb) {
  var findRowData = _util2["default"].getFindRowData();
  var stateData = (0, _cloneDeep2["default"])(this.state.data || this.state.datas);
  var ret = findRowData(stateData.data || stateData.datas, rowData.jsxid);
  if (ret.rowData) {
    // 新字段及必须字段还原
    ret.parent[ret.index] = _extends({}, rowData, {
      jsxid: ret.rowData.jsxid,
      __treeId__: ret.rowData.__treeId__,
      __mode__: ret.rowData.__mode__
    });

    // 附加控制参数还原
    ['radio', 'check', 'jsxchecked', '__edited__'].forEach(function (item) {
      if (ret.rowData[item] !== undefined) {
        ret.parent[ret.index][item] = ret.rowData[item];
      }
    });

    // 子树还原
    if (ret.rowData.data) {
      ret.parent[ret.index].data = ret.rowData.data;
    }

    this.data = stateData;
    this.setState({
      data: stateData
    }, function () {
      cb && cb(ret.rowData);
    });
  }
}

function saveAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.state.data.data || me.state.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item3 = data[i];
    _item3.__mode__ = _uxcoreConst2["default"].MODE.VIEW;
    _item3.__edited__ = true;
  }
  this.syncRecord(data, cb);
}

function editAllRow(cb) {
  var me = this;
  var data = (0, _cloneDeep2["default"])(me.data.data || me.data.datas);
  for (var i = 0; i < data.length; i++) {
    var _item4 = data[i];
    _item4.__mode__ = _uxcoreConst2["default"].MODE.EDIT;
  }
  this.updateRecord(data, cb);
}

function toggleSubComp(rowData, cb) {
  var _this3 = this;

  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;
  var rows = Array.isArray(rowData) ? rowData : [rowData];
  var changedRows = [];
  if (data) {
    rows.forEach(function (row) {
      for (var i = 0; i < data.length; i++) {
        var _item5 = data[i];
        if (_item5.jsxid === row.jsxid) {
          _item5.showSubComp = !_item5.showSubComp;
          changedRows.push(_item5);
          break;
        }
      }
    });
    this.syncRecord(data, function () {
      cb && typeof cb === 'function' && cb();
      var onToggleSubComp = _this3.props.onToggleSubComp;

      changedRows.forEach(function (row) {
        onToggleSubComp && typeof onToggleSubComp === 'function' && onToggleSubComp(row.showSubComp, row, _this3);
      });
    });
  }
}

function moveRowUp(rowData, cb) {
  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;
  if (data) {
    var treeIdArr = rowData.__treeId__.split('-');
    var rows = data;
    for (var i = 0; i < treeIdArr.length - 1; i++) {
      var rowIndex = treeIdArr[i];
      rows = rows[rowIndex].data;
    }
    var lastIndex = treeIdArr.pop();
    if (lastIndex > 0) {
      rows.splice(lastIndex, 1);
      rows.splice(lastIndex - 1, 0, _extends({}, rowData, { __treeId__: treeIdArr.concat([lastIndex - 1]).join('-') }));
      this.data = content;
      this.updateTreeId(content.data);
      this.setState({
        data: content
      }, function () {
        if (cb) {
          cb();
        }
      });
    }
  }
}

function moveRowDown(rowData, cb) {
  var content = (0, _cloneDeep2["default"])(this.state.data);
  var data = content.data || content.datas;
  if (data) {
    var treeIdArr = rowData.__treeId__.split('-').map(function (item) {
      return parseInt(item, 10);
    });
    var rows = data;
    for (var i = 0; i < treeIdArr.length - 1; i++) {
      var rowIndex = treeIdArr[i];
      rows = rows[rowIndex].data;
    }
    var lastIndex = treeIdArr.pop();
    if (lastIndex < rows.length - 1) {
      rows.splice(lastIndex, 1);
      rows.splice(lastIndex + 1, 0, _extends({}, rowData, { __treeId__: treeIdArr.concat([lastIndex + 1]).join('-') }));
      this.data = content;
      this.updateTreeId(content.data);
      this.setState({
        data: content
      }, function () {
        if (cb) {
          cb();
        }
      });
    }
  }
}

function doValidate() {
  var pass = true;
  var me = this;
  var fieldKeys = Object.keys(me.fields);
  fieldKeys.forEach(function (name) {
    var fieldPass = me.fields[name]();
    // if one field fails to pass, the table fails to pass
    if (pass) {
      pass = fieldPass;
    }
  });
  return pass;
}

function getData(validate) {
  var me = this;
  var pass = true;
  if (validate !== false) {
    pass = this.doValidate();
  }
  if (me.props.getSavedData) {
    // 滤除可能为空的元素
    var data = (0, _cloneDeep2["default"])(me.data);
    if (data && data.data instanceof Array) {
      data.data = data.data.filter(function (item) {
        return item !== undefined;
      });
    }
    return {
      data: data,
      pass: pass
    };
  }
  return {
    data: (0, _cloneDeep2["default"])(me.state.data),
    pass: pass
  };
}

function changeTreeExpandState(_ref) {
  var tableData = _ref.tableData,
      rowData = _ref.rowData;
  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

  var expandedKeys = (0, _cloneDeep2["default"])(this.state.expandedKeys);
  _util2["default"].toggleItemInArr(rowData.jsxid, expandedKeys);
  var filteredTreeLoadingIds = this.state.treeLoadingIds.filter(function (id) {
    return id !== rowData.__treeId__;
  });
  if (tableData) {
    var newData = _extends({}, this.state.data, tableData);
    this.data = newData;
    this.setState({
      treeLoadingIds: filteredTreeLoadingIds,
      expandedKeys: expandedKeys,
      data: newData
    }, function () {
      cb();
    });
  } else {
    this.setState({
      treeLoadingIds: filteredTreeLoadingIds,
      expandedKeys: expandedKeys
    }, function () {
      cb();
    });
  }
}

function toggleTreeExpanded(rowData, cb) {
  var _this4 = this;

  var loadTreeData = this.props.loadTreeData;
  var treeLoadingIds = this.state.treeLoadingIds;

  if (Array.isArray(rowData.data) && !rowData.data.length && loadTreeData) {
    var newTreeLoadingIds = [].concat(_toConsumableArray(treeLoadingIds));
    newTreeLoadingIds.push(rowData.__treeId__);
    this.setState({
      treeLoadingIds: newTreeLoadingIds
    });
    var loadedResult = loadTreeData(rowData);
    var loadedAction = function loadedAction(content) {
      var _addDataToSelectedRow = _this4.addDataToSelectedRow(content, rowData),
          tableData = _addDataToSelectedRow.tableData,
          newRowData = _addDataToSelectedRow.newRowData;

      _this4.changeTreeExpandState({ tableData: tableData, rowData: newRowData }, cb);
    };
    if ((typeof loadedResult === 'undefined' ? 'undefined' : _typeof(loadedResult)) === 'object' && loadedResult.then) {
      loadedResult.then(function (content) {
        loadedAction(content);
      });
    } else {
      loadedAction(loadedResult);
    }
  } else {
    this.changeTreeExpandState({ rowData: rowData }, cb);
  }
}

function addDataInRow(table, treeId, newData) {
  var tableData = (0, _cloneDeep2["default"])(table.data);
  var rowPositionArr = treeId.split('-');
  var temp = tableData;
  var index = void 0;
  var newRowData = void 0;
  for (var i = 0; i < rowPositionArr.length; i++) {
    index = rowPositionArr[i];
    if (i === rowPositionArr.length - 1) {
      newRowData = temp[index];
      newRowData.data = newData;
    } else {
      temp = temp[index].data;
    }
  }
  return { tableData: tableData, newRowData: newRowData };
}

function addDataToSelectedRow(content, rowData) {
  var me = this;

  var _addDataInRow = this.addDataInRow(me.state.data, rowData.__treeId__, content.data),
      tableData = _addDataInRow.tableData,
      newRowData = _addDataInRow.newRowData;

  var processedData = me.addValuesInData({ data: tableData }, 'reset') || {};
  return { tableData: processedData, newRowData: newRowData };
}

exports["default"] = {
  addEmptyRow: addEmptyRow,
  addEmptyRowFromTop: addEmptyRowFromTop,
  addRow: addRow,
  addRowFromTop: addRowFromTop,
  addSubRow: addSubRow,
  addSubRowFromTop: addSubRowFromTop,
  resetRow: resetRow,
  resetAllRow: resetAllRow,
  delRow: delRow,
  editRow: editRow,
  editAllRow: editAllRow,
  viewRow: viewRow,
  viewAllRow: viewAllRow,
  resetAndViewAllRow: resetAndViewAllRow,
  saveRow: saveRow,
  saveAllRow: saveAllRow,
  toggleSubComp: toggleSubComp,
  addDataInRow: addDataInRow,
  addDataToSelectedRow: addDataToSelectedRow,
  changeTreeExpandState: changeTreeExpandState,
  toggleTreeExpanded: toggleTreeExpanded,
  doValidate: doValidate,
  getData: getData,
  moveRowUp: moveRowUp,
  moveRowDown: moveRowDown,
  updateRow: updateRow
};
module.exports = exports['default'];