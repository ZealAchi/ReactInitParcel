'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcorePickable = require('uxcore-pickable');

var _uxcorePickable2 = _interopRequireDefault(_uxcorePickable);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * PickableFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author FE-Girl
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Item = _uxcorePickable2["default"].Item;


var pickableProps = ['type', 'multiple', 'enableFold', 'defaultfoldItems', 'maxLines', 'locale', 'simpleValueInSingleMode'];

var PickableFormField = function (_FormField) {
  _inherits(PickableFormField, _FormField);

  function PickableFormField(props) {
    _classCallCheck(this, PickableFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  PickableFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-pickable-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  PickableFormField.prototype.handleChange = function handleChange(value) {
    var me = this;
    me.setState({
      value: value
    });
    me.handleDataChange(value);
  };

  PickableFormField.prototype.renderChildren = function renderChildren() {
    var me = this;
    var _me$props = me.props,
        prefixCls = _me$props.prefixCls,
        type = _me$props.type,
        children = _me$props.children,
        max = _me$props.max;


    var rendered = _react2["default"].Children.map(children, function (child, index) {
      return _react2["default"].cloneElement(child, {
        prefixCls: prefixCls + '-item',
        type: type,
        jsxmax: max,
        key: index
      });
    });
    return rendered;
  };

  PickableFormField.prototype.renderField = function renderField() {
    var me = this;
    var arr = [];
    var mode = me.props.jsxmode || me.props.mode;

    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      var propsObj = {};
      pickableProps.forEach(function (prop) {
        propsObj[prop] = me.props[prop];
      });
      arr.push(_react2["default"].createElement(
        _uxcorePickable2["default"],
        _extends({
          key: 0,
          onChange: me.handleChange,
          value: me.state.value || []
        }, propsObj),
        me.renderChildren()
      ));
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      if (me.state.value) {
        me.state.value.forEach(function (val) {
          _react2["default"].Children.map(me.props.children, function (child, i) {
            if (child.props.value === val) {
              arr.push(_react2["default"].createElement(
                'span',
                { key: i, style: { marginRight: '10px' } },
                child.props.children
              ));
            }
          });
        });
      }
    }

    return arr;
  };

  return PickableFormField;
}(_uxcoreFormField2["default"]);

PickableFormField.Item = Item;
PickableFormField.displayName = 'PickableFormField';
PickableFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  multiple: true,
  value: [],
  type: 'normal',
  max: 99
});

PickableFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes, {
  multiple: _propTypes2["default"].bool,
  value: _propTypes2["default"].array,
  type: _propTypes2["default"].string,
  max: _propTypes2["default"].number
});

exports["default"] = PickableFormField;
module.exports = exports['default'];