'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _uxcorePopover = require('uxcore-popover');

var _uxcorePopover2 = _interopRequireDefault(_uxcorePopover);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _uxcoreBadge = require('uxcore-badge');

var _uxcoreBadge2 = _interopRequireDefault(_uxcoreBadge);

var _Overlay = require('./Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * NoticeIcon Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author Amanda111
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017-2018, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var NoticeIcon = function (_React$Component) {
  _inherits(NoticeIcon, _React$Component);

  function NoticeIcon(props) {
    _classCallCheck(this, NoticeIcon);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.onItemClick = function () {
      var _this$props = _this.props,
          trigger = _this$props.trigger,
          enablePopover = _this$props.enablePopover,
          onIconClick = _this$props.onIconClick;

      if (!(trigger === 'click' && enablePopover) && onIconClick) {
        onIconClick();
      }
    };

    _this.state = {};
    return _this;
  }

  NoticeIcon.prototype.renderWithPopover = function renderWithPopover() {
    var _props = this.props,
        prefixCls = _props.prefixCls,
        placement = _props.placement,
        trigger = _props.trigger,
        onVisibleChange = _props.onVisibleChange,
        overlayClassName = _props.overlayClassName;

    return _react2["default"].createElement(
      _uxcorePopover2["default"],
      _extends({
        overlay: _react2["default"].createElement(_Overlay2["default"], this.props),
        overlayClassName: (0, _classnames2["default"])(prefixCls + '-popover', overlayClassName),
        placement: placement,
        trigger: trigger
      }, onVisibleChange ? { onVisibleChange: onVisibleChange } : {}),
      this.renderBadge()
    );
  };

  NoticeIcon.prototype.renderBadge = function renderBadge() {
    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        className = _props2.className,
        dot = _props2.dot,
        count = _props2.count,
        overflowCount = _props2.overflowCount,
        icon = _props2.icon,
        trigger = _props2.trigger,
        onIconClick = _props2.onIconClick,
        themeType = _props2.themeType;

    var cursorClass = trigger === 'click' || onIconClick ? prefixCls + '-cursor' : '';
    var themeClass = themeType === 'dark' ? prefixCls + '-dark' : '';
    return _react2["default"].createElement(
      'span',
      { className: (0, _classnames2["default"])(prefixCls + '-badge', className, cursorClass, themeClass), onClick: this.onItemClick },
      _react2["default"].createElement(
        _uxcoreBadge2["default"],
        {
          dot: dot,
          count: count,
          overflowCount: overflowCount,
          themeType: themeType
        },
        _react2["default"].createElement(_uxcoreIcon2["default"], { name: icon, className: prefixCls + '-img', usei: true })
      )
    );
  };

  NoticeIcon.prototype.render = function render() {
    return this.props.enablePopover ? this.renderWithPopover() : this.renderBadge();
  };

  return NoticeIcon;
}(_react2["default"].Component);

NoticeIcon.defaultProps = {
  prefixCls: 'kuma-notice-icon',
  icon: 'xiaoxitixingfull',
  title: '通知',
  dot: false,
  count: 0,
  overflowCount: 99,
  placement: 'bottomRight',
  trigger: 'hover',
  emptyText: '暂无数据',
  bottomAction: { text: '查看通知', action: function action() {} },
  enablePopover: false,
  themeType: 'default'
};
NoticeIcon.propTypes = _extends({}, _Overlay2["default"].propTypes, {
  overlayClassName: _propTypes2["default"].string,
  dot: _propTypes2["default"].bool,
  count: _propTypes2["default"].number,
  overflowCount: _propTypes2["default"].number,
  placement: _propTypes2["default"].oneOf(['top', 'bottom', 'left', 'right', 'topLeft', 'bottomLeft', 'leftTop', 'rightTop', 'topRight', 'bottomRight', 'leftBottom', 'rightBottom']),
  trigger: _propTypes2["default"].oneOf(['hover', 'click']),
  onVisibleChange: _propTypes2["default"].func,
  className: _propTypes2["default"].string,
  enablePopover: _propTypes2["default"].bool,
  onIconClick: _propTypes2["default"].func,
  themeType: _propTypes2["default"].string
});
NoticeIcon.displayName = 'NoticeIcon';
exports["default"] = NoticeIcon;
module.exports = exports['default'];