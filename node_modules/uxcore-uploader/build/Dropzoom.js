'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _uploadcore = require('uploadcore');

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _FileList = require('./FileList');

var _FileList2 = _interopRequireDefault(_FileList);

var _Picker = require('./Picker');

var _Picker2 = _interopRequireDefault(_Picker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Dropzoom = function (_React$Component) {
  _inherits(Dropzoom, _React$Component);

  function Dropzoom(props) {
    _classCallCheck(this, Dropzoom);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.core = _util2["default"].getCoreInstance(props);

    _this.state = {
      blink: 0,
      highlight: 0,
      total: _this.core.getTotal()
    };

    var statchange = function statchange(stat) {
      var total = stat.getTotal();
      if (total !== _this.state.total) {
        _this.setState({ total: total });
      }
    };
    _this.core.on(_uploadcore.Events.QUEUE_STAT_CHANGE, statchange);
    _this.stopListen = function () {
      _this.core.off(_uploadcore.Events.QUEUE_STAT_CHANGE, statchange);
    };
    return _this;
  }

  Dropzoom.prototype.reset = function reset() {
    this.core.getFiles().forEach(function (file) {
      file.cancel();
    });
  };

  Dropzoom.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var areaNode = _reactDom2["default"].findDOMNode(this);

    var dndArea = this.core.getDndCollector().addArea(areaNode);
    dndArea.on('start', function () {
      _this2.setState({ blink: 1 });
    }).on('response', function (e) {
      if (areaNode.contains(e.target)) {
        _this2.setState({ highlight: 1 });
      } else {
        _this2.setState({ highlight: 0 });
      }
    }).on('end', function () {
      _this2.setState({ blink: 0, highlight: 0 });
    });
    this.dndArea = dndArea;
  };

  Dropzoom.prototype.componentWillUnmount = function componentWillUnmount() {
    this.dndArea && this.dndArea.destroy();
    this.stopListen && this.stopListen();
  };

  Dropzoom.prototype.render = function render() {
    var className = 'kuma-uploader kuma-upload-dropzoom';
    if (this.props.className) {
      className += ' ' + this.props.className;
    }
    if (this.state.blink) {
      className += ' blink';
    }
    if (this.state.highlight) {
      className += ' enter';
    }
    var children = this.props.children;
    if (!children || children.length < 1) {
      children = _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-add' });
    }
    return _react2["default"].createElement(
      'div',
      { className: className },
      this.state.total > 0 ? _react2["default"].createElement(_FileList2["default"], { locale: this.props.locale, core: this.core, mode: 'nw', fileList: this.props.fileList }) : _react2["default"].createElement(
        _Picker2["default"],
        { core: this.core },
        children
      ),
      _react2["default"].createElement('div', { className: 'kuma-upload-responser' })
    );
  };

  return Dropzoom;
}(_react2["default"].Component);

Dropzoom.displayName = 'Dropzoom';
exports["default"] = Dropzoom;
module.exports = exports['default'];