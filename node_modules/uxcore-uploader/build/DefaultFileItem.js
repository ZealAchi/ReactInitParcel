'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var DefaultFileItem = function (_React$Component) {
  _inherits(DefaultFileItem, _React$Component);

  function DefaultFileItem() {
    _classCallCheck(this, DefaultFileItem);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  DefaultFileItem.prototype.onCancel = function onCancel(file) {
    var me = this;
    me.props.onCancel(file);
  };

  DefaultFileItem.prototype.onShowFile = function onShowFile(file, url, e) {
    e.preventDefault();
    this.props.onShowFile(file, url);
  };

  DefaultFileItem.prototype.onDownloadFile = function onDownloadFile(file, url, e) {
    e.preventDefault();
    this.props.onDownloadFile(file, url);
  };

  DefaultFileItem.prototype.render = function render() {
    var me = this;
    var _me$props = me.props,
        prefixCls = _me$props.prefixCls,
        locale = _me$props.locale,
        file = _me$props.file,
        mode = _me$props.mode,
        isOnlyImg = _me$props.isOnlyImg,
        isVisual = _me$props.isVisual,
        readStyle = _me$props.readStyle,
        readOnly = _me$props.readOnly;

    var response = _util2["default"].simpleDeepCopy(file.response);
    if (file.type === 'upload') {
      response = response.content ? response.content.data ? response.content.data : response.content : response.data;
    }
    var downloadUrl = response.downloadUrl === undefined ? response.file || response.url : response.downloadUrl;
    var previewUrl = response.previewUrl === undefined ? downloadUrl : response.previewUrl;
    var readOnlyStyle = void 0;
    if (isOnlyImg) {
      var type = isVisual ? prefixCls + '-fileitem-visual' : prefixCls + '-fileitem-img';
      readOnlyStyle = readOnly ? type + ' read-style' : type;
    } else {
      readOnlyStyle = readOnly ? prefixCls + '-fileitem read-style' : prefixCls + '-fileitem';
    }
    if (mode === 'icon') {
      return _react2["default"].createElement(
        'div',
        { className: prefixCls + '-fileitem' },
        _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action remove-action', onClick: this.onCancel.bind(this), title: _locale2["default"][locale].remove },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
        ),
        _react2["default"].createElement(
          'div',
          { className: 'filepreview' },
          _react2["default"].createElement(
            'div',
            { className: 'previewer' },
            _react2["default"].createElement('img', { src: previewUrl })
          )
        ),
        _react2["default"].createElement(
          'div',
          { className: 'filename', title: response.name },
          _util2["default"].natcut(response.name, 10)
        )
      );
    } else if (mode === 'nw') {
      if (isOnlyImg) {
        if (!isVisual) {
          return _react2["default"].createElement(
            'div',
            { className: readOnlyStyle },
            _react2["default"].createElement(
              'div',
              { className: 'field-image-info' },
              _react2["default"].createElement(
                'a',
                { className: 'field-image-preview', onClick: me.onShowFile.bind(this, file, previewUrl), href: 'javascript:void(0)' },
                _react2["default"].createElement('img', { src: previewUrl })
              )
            ),
            _react2["default"].createElement(
              'div',
              { className: 'field-image-name', title: file.name },
              file.name
            ),
            _react2["default"].createElement(
              'div',
              { className: 'field-status' },
              previewUrl ? _react2["default"].createElement(
                'a',
                { className: prefixCls + '-action preview-action', onClick: me.onShowFile.bind(this, file, previewUrl), target: '_blank', href: previewUrl },
                _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'fangda' })
              ) : null,
              downloadUrl ? _react2["default"].createElement(
                'a',
                { className: prefixCls + '-action download-action', onClick: me.onDownloadFile.bind(this, file, downloadUrl), target: '_blank', download: true, href: downloadUrl },
                _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'xiazai' })
              ) : null,
              response.canRemove !== false && !readOnly ? _react2["default"].createElement(
                'a',
                { className: prefixCls + '-action remove-action', onClick: this.onCancel.bind(this, file) },
                _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
              ) : undefined
            )
          );
        }
        return _react2["default"].createElement(
          'div',
          { className: readOnlyStyle },
          _react2["default"].createElement(
            'div',
            { className: 'field-image-info' },
            _react2["default"].createElement(
              'a',
              { className: 'field-image-preview', onClick: me.onShowFile.bind(this, file, previewUrl), href: 'javascript:void(0)' },
              _react2["default"].createElement('img', { src: previewUrl })
            )
          ),
          _react2["default"].createElement(
            'div',
            { className: 'field-status' },
            previewUrl ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action preview-action', onClick: me.onShowFile.bind(this, file, previewUrl), target: '_blank', href: previewUrl },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'fangda' })
            ) : null,
            response.canRemove !== false && !readOnly ? _react2["default"].createElement(
              'a',
              { className: 'remove-action', onClick: this.onCancel.bind(this, file) },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'biaodanlei-tongyongqingchu' })
            ) : undefined
          )
        );
      }
      return _react2["default"].createElement(
        'div',
        { className: readOnlyStyle },
        _react2["default"].createElement(
          'label',
          { className: 'field-icon' },
          _react2["default"].createElement('i', { className: prefixCls + '-fileicon', 'data-ext': file.ext, 'data-type': file.fileType })
        ),
        _react2["default"].createElement('div', { className: 'field-line' }),
        _react2["default"].createElement(
          'div',
          { className: 'field-info-wrap' },
          _react2["default"].createElement(
            'label',
            { className: 'field-info' },
            _react2["default"].createElement(
              'span',
              { className: 'filename', title: file.name },
              file.name
            )
          ),
          _react2["default"].createElement(
            'div',
            { className: 'field-status' },
            previewUrl ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action preview-action', onClick: me.onShowFile.bind(this, file, previewUrl), target: '_blank', href: previewUrl },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'fangda' })
            ) : null,
            downloadUrl ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action download-action', onClick: me.onDownloadFile.bind(this, file, downloadUrl), target: '_blank', download: true, href: downloadUrl },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'xiazai' })
            ) : null,
            response.canRemove !== false && !readOnly ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action remove-action', onClick: this.onCancel.bind(this, file) },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
            ) : null
          )
        )
      );
    }
    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-fileitem' },
      _react2["default"].createElement(
        'label',
        { className: 'field-info' },
        _react2["default"].createElement('i', { className: prefixCls + '-fileicon', 'data-ext': file.ext, 'data-type': file.fileType }),
        _react2["default"].createElement(
          'span',
          { className: 'filename', title: file.name },
          _util2["default"].natcut(response.name, 12)
        )
      ),
      _react2["default"].createElement(
        'label',
        { className: 'field-status' },
        _react2["default"].createElement(
          'a',
          { className: prefixCls + '-status status-success' },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-choose' })
        ),
        !readOnly ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action remove-action', onClick: this.onCancel.bind(this, file), title: _locale2["default"][locale].remove },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
        ) : null
      )
    );
  };

  return DefaultFileItem;
}(_react2["default"].Component);

exports["default"] = DefaultFileItem;
module.exports = exports['default'];