'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Picker = function (_React$Component) {
  _inherits(Picker, _React$Component);

  function Picker() {
    _classCallCheck(this, Picker);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Picker.prototype.componentDidMount = function componentDidMount() {
    this.area = this.props.core.getPickerCollector().addArea(_reactDom2["default"].findDOMNode(this));
  };

  Picker.prototype.componentWillUnmount = function componentWillUnmount() {
    this.area && this.area.destroy();
  };

  Picker.prototype.render = function render() {
    var _props = this.props,
        isVisual = _props.isVisual,
        prefixCls = _props.prefixCls,
        disabled = _props.disabled;


    var clazzName = (0, _classnames2["default"])(_defineProperty({}, prefixCls + '-picker-visual', true));
    if (isVisual) {
      return _react2["default"].createElement(
        'div',
        { className: clazzName,
          style: { verticalAlign: 'top' }
        },
        this.props.children,
        _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'zengjia1' })
      );
    }
    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-picker' },
      this.props.children
    );
  };

  return Picker;
}(_react2["default"].Component);

exports["default"] = Picker;
module.exports = exports['default'];