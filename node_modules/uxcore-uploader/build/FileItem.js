'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Preview = require('./Preview');

var _Preview2 = _interopRequireDefault(_Preview);

var _Progress = require('./Progress');

var _Progress2 = _interopRequireDefault(_Progress);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _uploadcore = require('uploadcore');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var FileItem = function (_React$Component) {
  _inherits(FileItem, _React$Component);

  function FileItem(props) {
    _classCallCheck(this, FileItem);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    var file = props.file;
    _this.file = file;

    _this.state = {
      percentage: file.progress ? file.progress.percentage : 0,
      status: file.getStatusName()
    };

    if (file.isImage()) {
      file.getAsDataUrl(1000).done(function (url) {
        return _this.setState({ url: url });
      });
    }
    return _this;
  }

  FileItem.prototype.componentDidMount = function componentDidMount() {
    var file = this.file;
    var me = this;
    me._isMounted = true;
    var statuschange = function statuschange() {
      if (me._isMounted) {
        var state = {
          status: file.getStatusName()
        };
        if (state.status === 'error') {
          state.percentage = 0;
        }
        me.setState(state);
      }
    };
    var progress = function progress(_progress) {
      if (me._isMounted) {
        me.setState({
          percentage: _progress.percentage
        });
      }
    };
    file.on(_uploadcore.Events.FILE_STATUS_CHANGE, statuschange);
    file.on(_uploadcore.Events.FILE_UPLOAD_PROGRESS, progress);
    this.stopListen = function () {
      file.off(_uploadcore.Events.FILE_STATUS_CHANGE, statuschange);
      file.off(_uploadcore.Events.FILE_UPLOAD_PROGRESS, progress);
    };
  };

  FileItem.prototype.componentWillUnmount = function componentWillUnmount() {
    this._isMounted = false;
    this.stopListen && this.stopListen();
  };

  FileItem.prototype.onPending = function onPending() {
    this.file.pending();
  };

  FileItem.prototype.onCancel = function onCancel() {
    this.file.cancel();
  };

  FileItem.prototype.render = function render() {
    var me = this;
    var _me$props = me.props,
        locale = _me$props.locale,
        interval = _me$props.interval,
        prefixCls = _me$props.prefixCls;


    if (this.props.mode === 'icon') {
      return _react2["default"].createElement(
        'div',
        { className: prefixCls + '-fileitem status-' + this.state.status },
        _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action action-remove', onClick: this.onCancel.bind(this), title: _locale2["default"][locale].remove },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
        ),
        _react2["default"].createElement(
          'div',
          { className: 'filepreview' },
          _react2["default"].createElement(_Preview2["default"], { file: this.props.file, prefixCls: prefixCls }),
          this.state.status === 'error' ? _react2["default"].createElement(
            'a',
            { className: prefixCls + '-action action-retry', onClick: this.onPending.bind(this), title: _locale2["default"][locale].retry },
            _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-refresh' })
          ) : null,
          this.state.status === 'queued' ? _react2["default"].createElement(
            'a',
            { className: prefixCls + '-action action-upload', onClick: this.onPending.bind(this), title: _locale2["default"][locale].upload },
            _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })
          ) : null,
          this.state.status === 'progress' || this.state.status === 'pending' ? _react2["default"].createElement(_Progress2["default"], { file: this.file, interval: interval, percentage: this.state.percentage }) : null
        ),
        this.state.status === 'error' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-status status-error', title: _locale2["default"][locale].upload_failed },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-caution' })
        ) : null,
        this.state.status === 'success' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-status status-success' },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-choose' })
        ) : null,
        _react2["default"].createElement(
          'div',
          { className: 'filename', title: this.file.name },
          _util2["default"].natcut(this.file.name, 10)
        )
      );
    } else if (this.props.mode === 'nw') {
      var downloadUrl = void 0,
          previewUrl = void 0;
      if (this.state.status === 'success') {
        var json = this.file.response.getJson();
        var url = _util2["default"].getUrl(json);
        downloadUrl = url.downloadUrl;
        previewUrl = url.previewUrl;
      }
      if (this.props.isOnlyImg) {
        if (!this.props.isVisual) {
          return _react2["default"].createElement(
            'div',
            { className: prefixCls + '-fileitem-img status-' + this.state.status },
            _react2["default"].createElement(
              'div',
              { className: 'field-image-info' },
              _react2["default"].createElement(
                'a',
                { className: 'field-image-preview', href: previewUrl, target: '_blank' },
                _react2["default"].createElement('img', { src: this.state.url })
              )
            ),
            this.state.status !== 'error' && this.state.status !== 'success' ? _react2["default"].createElement(_Progress2["default"], { file: this.file, interval: interval }) : null,
            _react2["default"].createElement(
              'div',
              { className: 'field-image-name', title: this.file.name },
              this.file.name
            ),
            _react2["default"].createElement(
              'div',
              { className: 'field-status' },
              _react2["default"].createElement(
                'a',
                { className: prefixCls + '-action close-action', onClick: this.onCancel.bind(this) },
                _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
              )
            )
          );
        }
        return _react2["default"].createElement(
          'div',
          { className: prefixCls + '-fileitem-visual status-' + this.state.status },
          _react2["default"].createElement('div', { className: 'field-image-info' }),
          this.state.status !== 'success' ? _react2["default"].createElement(_Progress2["default"], { interval: interval, isVisual: true, status: this.state.status, onCancel: this.onCancel.bind(this), onPending: this.onPending.bind(this), file: this.file }) : null
        );
      }
      return _react2["default"].createElement(
        'div',
        { className: prefixCls + '-fileitem status-' + this.state.status },
        _react2["default"].createElement(
          'label',
          { className: 'field-icon' },
          this.state.status === 'error' || this.state.status === 'success' ? _react2["default"].createElement('i', { className: prefixCls + '-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }) : null
        ),
        this.state.status !== 'error' && this.state.status !== 'success' ? _react2["default"].createElement(_Progress2["default"], { interval: interval, file: this.file }) : null,
        _react2["default"].createElement('div', { className: 'field-line' }),
        _react2["default"].createElement(
          'div',
          { className: 'field-info-wrap' },
          _react2["default"].createElement(
            'label',
            { className: 'field-info' },
            _react2["default"].createElement(
              'span',
              { className: 'filename', title: this.file.name },
              this.file.name
            )
          ),
          _react2["default"].createElement(
            'label',
            { className: 'field-status' },
            this.state.status === 'error' ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-status status-error' },
              _locale2["default"][locale].upload_failed
            ) : null,
            this.state.status === 'success' && previewUrl ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action', target: '_blank', href: previewUrl },
              _locale2["default"][locale].preview
            ) : null,
            this.state.status === 'success' && downloadUrl ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action', target: '_blank', href: downloadUrl, download: true },
              _locale2["default"][locale].download
            ) : null,
            this.state.status === 'success' || this.state.status === 'error' ? _react2["default"].createElement(
              'a',
              { className: prefixCls + '-action close-action', onClick: this.onCancel.bind(this) },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
            ) : _react2["default"].createElement(
              'a',
              { className: '${prefixCls}-action terminal-action', onClick: this.onCancel.bind(this) },
              _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'guanbi' })
            )
          )
        )
      );
    }
    var size = _util2["default"].humanSizeFormat(this.file.size);
    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-fileitem status-' + this.state.status },
      _react2["default"].createElement(
        'label',
        { className: 'field-info' },
        _react2["default"].createElement('i', { className: prefixCls + '-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }),
        _react2["default"].createElement(
          'span',
          { className: 'filename', title: this.file.name },
          _util2["default"].natcut(this.file.name, 12)
        ),
        _react2["default"].createElement(
          'span',
          { className: 'filesize' },
          '/' + size
        )
      ),
      _react2["default"].createElement(
        'label',
        { className: 'field-status' },
        this.state.status === 'error' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-status status-error', title: _locale2["default"][locale].upload_failed },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-caution' })
        ) : null,
        this.state.status === 'success' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-status status-success' },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-choose' })
        ) : null,
        this.state.status === 'error' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action action-retry', onClick: this.onPending.bind(this), title: _locale2["default"][locale].retry },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-refresh' })
        ) : null,
        this.state.status === 'queued' ? _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action action-upload', onClick: this.onPending.bind(this), title: _locale2["default"][locale].upload },
          _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })
        ) : null,
        _react2["default"].createElement(
          'a',
          { className: prefixCls + '-action action-remove', onClick: this.onCancel.bind(this), title: _locale2["default"][locale].remove },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'shanchu' })
        )
      ),
      _react2["default"].createElement(_Progress2["default"], { file: this.file, interval: interval, percentage: this.state.percentage, mode: 'bar' })
    );
  };

  return FileItem;
}(_react2["default"].Component);

FileItem.defaultProps = {
  mode: 'mini'
};
exports["default"] = FileItem;
module.exports = exports['default'];