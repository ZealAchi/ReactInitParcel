'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreTooltip = require('uxcore-tooltip');

var _uxcoreTooltip2 = _interopRequireDefault(_uxcoreTooltip);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _uxcoreAnimate = require('uxcore-animate');

var _uxcoreAnimate2 = _interopRequireDefault(_uxcoreAnimate);

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Card Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017-2018, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Card = function (_React$Component) {
  _inherits(Card, _React$Component);

  function Card(props) {
    _classCallCheck(this, Card);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.handleCollapseIconClick = function () {
      _this.setState(function (prevState) {
        return {
          collapsed: !prevState.collapsed
        };
      }, function () {
        var onCollapseChange = _this.props.onCollapseChange;
        var collapsed = _this.state.collapsed;

        onCollapseChange(collapsed);
      });
    };

    _this.state = {
      collapsed: props.defaultCollapsed
    };
    if (props.keepAlive) {
      _this.height = props.contentHeight;
      _this.maxHeight = props.contentHeight;
    }
    return _this;
  }

  Card.prototype.getDom = function getDom() {
    return _reactDom2["default"].findDOMNode(this.content);
  };

  Card.prototype.componentDidMount = function componentDidMount() {
    if (this.props.keepAlive) {
      var dom = this.getDom();
      var pfx = ['webkit', 'moz', 'MS', 'o', ''];
      var prefixedEventListener = function prefixedEventListener(element, type, callback) {
        for (var p = 0; p < pfx.length; p++) {
          if (!pfx[p]) type = type.toLowerCase();
          element.addEventListener(pfx[p] + type, callback, false);
        }
      };
      prefixedEventListener(dom, 'transitionend', function (e) {
        if (dom.style.height !== '0px') {
          dom.style.height = '';
        }
      });
      if (!this.state.collapsed) {
        this.height = dom.getBoundingClientRect().height;
        dom.style.maxHeight = this.maxHeight + 'px';
      }
    }
  };

  Card.prototype.componentDidUpdate = function componentDidUpdate() {
    var _this2 = this;

    if (this.props.keepAlive) {
      if (!this.state.collapsed) {
        var dom = this.getDom();
        dom.style.height = '';
        setTimeout(function () {
          _this2.height = dom.getBoundingClientRect().height;
          dom.style.height = _this2.height + 'px';
        }, 200);
      }
    }
  };

  Card.prototype.renderHeader = function renderHeader() {
    var _classnames;

    var _props = this.props,
        prefixCls = _props.prefixCls,
        icon = _props.icon,
        title = _props.title,
        tip = _props.tip,
        extra = _props.extra,
        showCollapseIcon = _props.showCollapseIcon,
        overlayStyleOfTip = _props.overlayStyleOfTip,
        placementOfTip = _props.placementOfTip,
        tipIconTheme = _props.tipIconTheme;


    if (!icon && !title && !tip && !extra) return null;

    var newOverlayStyle = _extends({
      maxWidth: 400,
      textAlign: 'left'
    }, overlayStyleOfTip);

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-header' },
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-title' },
        icon ? _react2["default"].createElement(
          'div',
          { className: prefixCls + '-title-icon' },
          icon
        ) : null,
        _react2["default"].createElement(
          'div',
          {
            className: (0, _classnames5["default"])(prefixCls + '-title-text', (_classnames = {}, _defineProperty(_classnames, prefixCls + '-title-text__has-icon', !!icon), _defineProperty(_classnames, prefixCls + '-title-text__has-tip', !!tip), _classnames))
          },
          title
        ),
        tip ? _react2["default"].createElement(
          'div',
          { className: prefixCls + '-title-tip' },
          _react2["default"].createElement(
            _uxcoreTooltip2["default"],
            {
              overlayStyle: newOverlayStyle,
              overlay: tip,
              placement: placementOfTip,
              trigger: ['hover'],
              overlayClassName: '' + (tipIconTheme === 'dark' ? '' : 'kuma-tooltip-dark')
            },
            _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: '' + (tipIconTheme === 'dark' ? 'tishi-full' : 'xinxitishicopy'), className: prefixCls + '-title-tip-icon' })
          )
        ) : null
      ),
      extra || showCollapseIcon ? _react2["default"].createElement(
        'div',
        { className: prefixCls + '-extra' },
        extra,
        this.renderCollapseIcon()
      ) : null
    );
  };

  Card.prototype.renderCollapseIcon = function renderCollapseIcon() {
    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        showCollapseIcon = _props2.showCollapseIcon;

    if (!showCollapseIcon) {
      return null;
    }
    var collapsed = this.state.collapsed;

    return _react2["default"].createElement(_uxcoreIcon2["default"], {
      usei: true,
      name: 'bottom',
      className: (0, _classnames5["default"])(prefixCls + '-collapse-icon', _defineProperty({}, prefixCls + '-collapse-icon__collapsed', !collapsed)),
      onClick: this.handleCollapseIconClick
    });
  };

  Card.prototype.renderContent = function renderContent() {
    var _this3 = this;

    var collapsed = this.state.collapsed;
    var _props3 = this.props,
        prefixCls = _props3.prefixCls,
        children = _props3.children,
        contentPaddingSize = _props3.contentPaddingSize,
        contentHeight = _props3.contentHeight,
        keepAlive = _props3.keepAlive;

    var style = {};
    if (!keepAlive) {
      if (collapsed) return null;
      if (contentHeight) {
        style = {
          height: contentHeight
        };
      }
    } else {
      style = {
        height: collapsed ? 0 : this.height,
        paddingTop: collapsed ? 0 : 24,
        paddingBottom: collapsed ? 0 : 24
      };
    }

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])(prefixCls + '-content', _defineProperty({}, prefixCls + '-content-' + contentPaddingSize + '-padding', !!contentPaddingSize)),
        ref: function ref(c) {
          _this3.content = c;
        },
        style: style
      },
      children
    );
  };

  Card.prototype.render = function render() {
    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        className = _props4.className,
        contentHeight = _props4.contentHeight,
        keepAlive = _props4.keepAlive;


    return _react2["default"].createElement(
      'div',
      { className: (0, _classnames5["default"])(prefixCls, className) },
      this.renderHeader(),
      !keepAlive ? _react2["default"].createElement(
        _uxcoreAnimate2["default"],
        {
          component: '',
          animation: {
            enter: function enter(node, done) {
              _util2["default"].toggleHeightAnim(node, true, contentHeight, done);
            },
            leave: function leave(node, done) {
              _util2["default"].toggleHeightAnim(node, false, contentHeight, done);
            }
          }
        },
        this.renderContent()
      ) : this.renderContent()
    );
  };

  return Card;
}(_react2["default"].Component);

Card.displayName = 'Card';
Card.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  icon: _propTypes2["default"].node,
  title: _propTypes2["default"].node,
  tip: _propTypes2["default"].node,
  overlayStyleOfTip: _propTypes2["default"].object,
  placementOfTip: _propTypes2["default"].string,
  tipIconTheme: _propTypes2["default"].string,
  extra: _propTypes2["default"].node,
  children: _propTypes2["default"].node,
  showCollapseIcon: _propTypes2["default"].bool,
  onCollapseChange: _propTypes2["default"].func,
  contentHeight: _propTypes2["default"].number,
  contentPaddingSize: _propTypes2["default"].oneOf(['middle', 'none']),
  defaultCollapsed: _propTypes2["default"].bool,
  keepAlive: _propTypes2["default"].bool
};
Card.defaultProps = {
  prefixCls: 'uxcore-card',
  className: undefined,
  icon: undefined,
  title: undefined,
  tip: undefined,
  tipIconTheme: 'light',
  overlayStyleOfTip: {},
  placementOfTip: 'top',
  extra: undefined,
  children: undefined,
  showCollapseIcon: false,
  onCollapseChange: function onCollapseChange() {},
  contentHeight: undefined,
  contentPaddingSize: 'middle',
  defaultCollapsed: false,
  keepAlive: false
};
exports["default"] = Card;
module.exports = exports['default'];