'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * CascadeMultiSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author guyunxiang
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var CascadeMulti = function (_React$Component) {
  _inherits(CascadeMulti, _React$Component);

  function CascadeMulti(props) {
    _classCallCheck(this, CascadeMulti);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      dataList: props.options,
      selectArray: []
    };
    return _this;
  }

  CascadeMulti.prototype.componentDidMount = function componentDidMount() {
    var _props = this.props,
        value = _props.value,
        options = _props.options;

    if (value) {
      this.setData(value, options);
    }
  };

  CascadeMulti.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var value = nextProps.value,
        options = nextProps.options;

    if (value === this.props.value && options === this.props.options) {
      return;
    }
    if (value) {
      this.setData(value, options);
    }
  };

  /**
   * 选项列表点击事件
   */


  CascadeMulti.prototype.onItemClick = function onItemClick(data, level) {
    var selectArray = this.state.selectArray;

    if (data.value !== selectArray[level]) {
      selectArray.splice(level + 1);
    }
    selectArray[level] = data.value;
    if (this.props.onItemClick) {
      this.props.onItemClick({
        value: data.value,
        label: data.label,
        children: data.children
      }, level + 1);
    }
    this.setState({ selectArray: selectArray });
  };

  /**
   * 选中/取消选项事件
   */


  CascadeMulti.prototype.onItemChecked = function onItemChecked(item, level) {
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.value);
    var itemNode = treeNodeObj.itemNode;

    itemNode.checked = !itemNode.checked;
    itemNode.halfChecked = false;
    // 设置子集全部选中
    if (itemNode.children) {
      itemNode.children = this.setChildrenChecked(itemNode.children, itemNode.checked);
    }
    // 设置父级选中状态
    if (level) {
      this.setFatherCheckState(itemNode, itemNode.checked);
    }
    this.setState({ dataList: dataList }, this.setSelectResult());
  };

  /**
   * 清空结果事件
   */


  CascadeMulti.prototype.onCleanSelect = function onCleanSelect() {
    var dataList = this.state.dataList;

    this.setState({
      dataList: this.setCleanResult(dataList)
    }, this.props.onSelect([], []));
  };

  /**
   * 展开/收起结果列
   */


  CascadeMulti.prototype.onTriggerNode = function onTriggerNode(item) {
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.value);
    var itemNode = treeNodeObj.itemNode;

    itemNode.expand = !itemNode.expand;
    this.setState({ dataList: dataList });
  };

  /**
   * 删除选项事件
   */


  CascadeMulti.prototype.onDeleteItem = function onDeleteItem(item, level) {
    var dataList = this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.value);
    var itemNode = treeNodeObj.itemNode;

    itemNode.checked = false;
    itemNode.halfChecked = false;
    if (itemNode.children) {
      itemNode.children = this.setChildrenChecked(itemNode.children, false);
    }
    if (level) {
      this.setFatherCheckState(itemNode, false);
    }
    this.setSelectResult();
  };

  /**
   * 获取选中的结果
   * @param dataList 组件选项列表
   * @param arr 存放结果 value 的数组
   * @param textArr 存放结果 label 的数组
   */


  CascadeMulti.prototype.getSelectResult = function getSelectResult(dataList, arr, textArr) {
    var _this2 = this;

    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked) {
          arr.push(item.value);
          textArr.push(item.label);
        }
        if (item.halfChecked) {
          _this2.getSelectResult(item.children, arr, textArr);
        }
      });
    }
  };

  /**
   * 获取选中的数量
   */


  CascadeMulti.prototype.getNums = function getNums(dataList) {
    var _this3 = this;

    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked || item.halfChecked) {
          _this3.selectNums += 1;
          if (item.children) {
            _this3.getNums(item.children);
          } else {
            _this3.handleSelectNums += 1;
          }
        }
      });
    }
  };

  /**
   * 根据传入的 key 获取其节点，父节点
   * @param dataList 组件的 options
   * @param key 要查询的 item.value
   * @param parentNode 父节点（方法自用）
   */


  CascadeMulti.prototype.getTreeNodeData = function getTreeNodeData(dataList, key) {
    var parentNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var back = null;
    if (!key) {
      return null;
    }
    if (dataList && dataList.length) {
      for (var i = 0, len = dataList.length; i < len; i += 1) {
        if (dataList[i].value === key) {
          return {
            parentNode: parentNode,
            itemNode: dataList[i]
          };
        }
        if (dataList[i].children) {
          var item = this.getTreeNodeData(dataList[i].children, key, dataList[i]);
          back = item || back;
        }
      }
    }
    return back;
  };

  /**
   * 获取兄弟节点指定选中状态
   * @param botherList 兄弟节点列表
   * @param state 查询的选中状态
   * @return 兄弟节点中包含对应状态结果 boolean
   */


  CascadeMulti.prototype.getBotherCheckedState = function getBotherCheckedState(botherList, state) {
    var handleCheckedState = false;
    if (botherList && botherList.length) {
      for (var i = 0, len = botherList.length; i < len; i += 1) {
        // 查询是否存在选中
        if (state) {
          if (botherList[i].checked || botherList[i].halfChecked) {
            handleCheckedState = true;
            break;
          }
        } else {
          // 查询是否存在未选中
          // 要么未选中，要么半选中状态
          if (!botherList[i].checked && !botherList[i].halfChecked || !botherList[i].checked && botherList[i].halfChecked) {
            handleCheckedState = true;
            break;
          }
        }
      }
    }
    return handleCheckedState;
  };

  /**
   * 外部设置组件的 value
   * @param value 设置的结果
   * @param options 选项列表
   */


  CascadeMulti.prototype.setData = function setData(value, options) {
    var _this4 = this;

    var dataList = (0, _cloneDeep2["default"])(options);
    if (dataList && dataList.length) {
      dataList = this.setCleanResult(dataList);
      for (var i = 0, len = value.length; i < len; i += 1) {
        var treeNodeObj = this.getTreeNodeData(dataList, value[i]);
        if (treeNodeObj) {
          var parentNode = treeNodeObj.parentNode,
              itemNode = treeNodeObj.itemNode;

          itemNode.checked = true;
          if (itemNode.children) {
            itemNode.children = this.setChildrenChecked(itemNode.children, true);
          }
          if (parentNode) {
            this.setFatherCheckState(itemNode, true, dataList);
          }
        }
      }
    }
    this.setState({ dataList: dataList }, function () {
      var arr = [];
      _this4.textArr = [];
      _this4.getSelectResult(_this4.state.dataList, arr, _this4.textArr);
    });
  };

  /**
   * 设置children选中/取消状态
   * @param childrenList 子集
   * @param checked 设置的状态
   */


  CascadeMulti.prototype.setChildrenChecked = function setChildrenChecked(dataList, checked) {
    var childrenList = (0, _cloneDeep2["default"])(dataList);
    if (childrenList && childrenList.length) {
      for (var i = 0; i < childrenList.length; i++) {
        var item = childrenList[i];
        item.checked = checked;
        item.halfChecked = false;
        if (item.children) {
          item.children = this.setChildrenChecked(item.children, checked);
        }
      }
    }
    return childrenList;
  };

  /**
   * 设置父亲节点的选中/半选中状态
   * @param item 当前节点
   * @param checked 设置状态
   */


  CascadeMulti.prototype.setFatherCheckState = function setFatherCheckState(item, checked) {
    var dataList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.dataList;

    var treeNodeObj = this.getTreeNodeData(dataList, item.value);
    var parentNode = treeNodeObj.parentNode;

    if (parentNode) {
      var halfChecked = this.getBotherCheckedState(parentNode.children, !checked);
      if (halfChecked) {
        parentNode.checked = !halfChecked;
        parentNode.halfChecked = halfChecked;
      } else {
        parentNode.checked = checked;
        parentNode.halfChecked = false;
      }
      this.setFatherCheckState(parentNode, checked, dataList);
    }
  };

  /**
   * 设置选中的结果
   */


  CascadeMulti.prototype.setSelectResult = function setSelectResult() {
    var arr = [];
    this.textArr = [];
    this.getSelectResult(this.state.dataList, arr, this.textArr);
    this.props.onSelect(arr, this.textArr);
  };

  /**
   * 清空
   */


  CascadeMulti.prototype.setCleanResult = function setCleanResult(dataList) {
    var listArray = (0, _cloneDeep2["default"])(dataList);
    if (listArray && listArray.length) {
      for (var i = 0; i < listArray.length; i++) {
        var item = listArray[i];
        item.checked = false;
        item.halfChecked = false;
        if (item.children) {
          item.children = this.setCleanResult(item.children);
        }
      }
    }
    return listArray;
  };

  /**
   * 设置组件宽度样式，兼容名称过长时显示效果等
   */


  CascadeMulti.prototype.setPanelWidth = function setPanelWidth() {
    var cascadeSize = this.props.cascadeSize;

    var style = {};
    var reg = /[0-9]+/g;
    var width = this.refUls ? getComputedStyle(this.refUls).width.match(reg)[0] : 150;
    var resultPanelWidth = this.refResultPanel ? getComputedStyle(this.refResultPanel).width.match(reg)[0] : 220;
    style.width = 0;
    for (var i = 0; i < cascadeSize; i += 1) {
      style.width += parseInt(width, 0);
    }
    style.width += parseInt(resultPanelWidth, 0) + 2;
    this.resultPanelWidth = parseInt(resultPanelWidth, 0);
    return style;
  };

  /**
   * 渲染对应级的选项面板
   */


  CascadeMulti.prototype.renderUlList = function renderUlList(level) {
    var _this5 = this;

    var t = this;
    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        notFoundContent = _props2.notFoundContent,
        locale = _props2.locale;
    var _state = this.state,
        dataList = _state.dataList,
        selectArray = _state.selectArray;

    if (!dataList.length) {
      return null;
    }
    var treeNodeObj = t.getTreeNodeData(dataList, selectArray[level - 1]);
    var childrenList = treeNodeObj && treeNodeObj.itemNode && treeNodeObj.itemNode.children && treeNodeObj.itemNode.children.length ? treeNodeObj.itemNode.children : [];
    var listArray = level ? childrenList : dataList;
    var noDataText = notFoundContent || (0, _locale2["default"])(locale).noData;
    return _react2["default"].createElement(
      'ul',
      {
        key: level,
        className: (0, _classnames5["default"])(_defineProperty({
          'use-svg': true
        }, prefixCls + '-content', true)),
        ref: function ref(r) {
          _this5.refUls = r;
        }
      },
      selectArray[level - 1] && !listArray.length ? _react2["default"].createElement(
        'span',
        { className: (0, _classnames5["default"])([prefixCls + '-list-noData']) },
        noDataText
      ) : t.renderListItems(listArray, level)
    );
  };

  /**
   * 渲染对应级的 ListItem
   */


  CascadeMulti.prototype.renderListItems = function renderListItems(dataList, level) {
    var _this6 = this;

    var _props3 = this.props,
        prefixCls = _props3.prefixCls,
        config = _props3.config;
    var selectArray = this.state.selectArray;

    var arr = [];
    // 设置当前级是否开启 checkbox
    var checkable = !(config[level] && config[level].checkable === false);
    dataList.forEach(function (item) {
      var _classnames2;

      // 默认选择第一项
      if (!selectArray[level]) {
        selectArray[level] = item.value;
      }
      arr.push(_react2["default"].createElement(
        'li',
        {
          key: item.value,
          className: (0, _classnames5["default"])((_classnames2 = {}, _defineProperty(_classnames2, prefixCls + '-list-item', !!prefixCls), _defineProperty(_classnames2, prefixCls + '-checked', item.checked && !item.disabled), _defineProperty(_classnames2, prefixCls + '-list-item-active', selectArray[level] === item.value), _classnames2)),
          title: item.label,
          onClick: function onClick() {
            _this6.onItemClick(item, level);
          }
        },
        _react2["default"].createElement(
          'label',
          {
            className: (0, _classnames5["default"])([prefixCls + '-item-label'])
          },
          checkable ? _react2["default"].createElement('s', {
            className: (0, _classnames5["default"])({
              'kuma-tree-checkbox': true,
              'kuma-tree-checkbox-indeterminate': item.halfChecked,
              'kuma-tree-checkbox-checked': item.checked && !item.halfChecked
            }),
            onClick: function onClick() {
              _this6.onItemChecked(item, level);
            }
          }) : null,
          item.label
        )
      ));
    });
    return arr;
  };

  /**
   * 渲染结果面板
   */


  CascadeMulti.prototype.renderResult = function renderResult() {
    var _this7 = this;

    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        allowClear = _props4.allowClear,
        locale = _props4.locale;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])([prefixCls + '-result']),
        ref: function ref(r) {
          _this7.refResultPanel = r;
        }
      },
      _react2["default"].createElement(
        'div',
        { className: (0, _classnames5["default"])([prefixCls + '-result-title']) },
        (0, _locale2["default"])(locale).selected,
        ' ',
        this.renderResultNums(),
        allowClear ? _react2["default"].createElement(
          'span',
          {
            className: (0, _classnames5["default"])([prefixCls + '-result-clean']),
            onClick: function onClick() {
              _this7.onCleanSelect();
            }
          },
          (0, _locale2["default"])(locale).clean
        ) : null
      ),
      this.renderResultTree()
    );
  };

  /**
   * 渲染已选中节点数量
   */


  CascadeMulti.prototype.renderResultNums = function renderResultNums() {
    var dataList = this.state.dataList;
    // 记录所有选中的叶子节点

    this.handleSelectNums = 0;
    // 记录所有选中的节点
    this.selectNums = 0;
    this.getNums(dataList);
    return _react2["default"].createElement(
      'span',
      null,
      '(',
      this.handleSelectNums,
      ')'
    );
  };

  /**
   * 渲染已选择结果 TreeList
   */


  CascadeMulti.prototype.renderResultTree = function renderResultTree() {
    var prefixCls = this.props.prefixCls;
    var dataList = this.state.dataList;

    var style = {};
    if (this.selectNums < 10) {
      style.paddingRight = 17;
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])([prefixCls + '-result-tree']),
        style: style
      },
      this.renderTreeListNode(dataList, 0)
    );
  };

  /**
   * 渲染已选择结果 TreeListNode
   */


  CascadeMulti.prototype.renderTreeListNode = function renderTreeListNode(dataList, level) {
    var _this8 = this;

    var cascadeSize = this.props.cascadeSize;

    var arr = [];
    if (dataList && dataList.length) {
      dataList.forEach(function (item) {
        if (item.checked || item.halfChecked) {
          // 设置 label 的宽度
          var style = { maxWidth: 0 };
          // 86 = marginLeft（15） + 箭头icon占位宽度（21） + "删除"按钮的宽度（30） + marginRight（20）
          style.maxWidth = _this8.resultPanelWidth - 86 - level * 15;
          // 56 = "已选择"文字宽度
          style.maxWidth -= level < cascadeSize - 1 && item.checked ? 56 : 0;
          arr.push(_react2["default"].createElement(
            'li',
            {
              className: (0, _classnames5["default"])('tree-node-ul-li', {
                'tree-node-ul-li-open': !item.expand,
                'tree-node-ul-li-close': item.expand
              }),
              title: item.label,
              key: item.value,
              onClick: function onClick(e) {
                e.stopPropagation();
                _this8.onTriggerNode(item);
              }
            },
            _react2["default"].createElement(
              'div',
              {
                className: (0, _classnames5["default"])('tree-node-ul-li-div'),
                style: { paddingLeft: (level + 1) * 15 }
              },
              _this8.renderExpand(item),
              _react2["default"].createElement(
                'span',
                { className: (0, _classnames5["default"])('tree-node-ul-li-span') },
                _react2["default"].createElement(
                  'span',
                  {
                    className: 'tree-node-ul-li-span-label',
                    style: style
                  },
                  item.label
                ),
                level < cascadeSize - 1 && item.checked ? _react2["default"].createElement(
                  'span',
                  { className: 'tree-node-ul-li-all' },
                  (0, _locale2["default"])(_this8.props.locale).haveAll
                ) : null,
                _react2["default"].createElement(
                  'span',
                  {
                    className: 'tree-node-ul-li-del',
                    onClick: function onClick(e) {
                      e.stopPropagation();
                      _this8.onDeleteItem(item, level);
                    }
                  },
                  (0, _locale2["default"])(_this8.props.locale)["delete"]
                )
              )
            ),
            item.children && !item.expand ? _this8.renderTreeListNode(item.children, level + 1) : null
          ));
        }
      });
    }
    return _react2["default"].createElement(
      'ul',
      {
        className: (0, _classnames5["default"])('tree-node-ul')
      },
      arr
    );
  };

  /**
   * 渲染结果列表展开/收缩按钮
   */


  CascadeMulti.prototype.renderExpand = function renderExpand(item) {
    var arr = [];
    if (item.children) {
      arr = !item.expand ? _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-down' }) : _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' });
    } else {
      // 21 = kuma-icon的占位宽度
      arr = _react2["default"].createElement('span', { style: { width: 21, display: 'inline-block' } });
    }
    return arr;
  };

  CascadeMulti.prototype.render = function render() {
    var _props5 = this.props,
        className = _props5.className,
        prefixCls = _props5.prefixCls,
        cascadeSize = _props5.cascadeSize;

    var arr = [];
    for (var i = 0; i < cascadeSize; i += 1) {
      arr.push(this.renderUlList(i));
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])(_defineProperty({}, className, !!className), ['' + prefixCls]),
        onClick: function onClick(e) {
          e.stopPropagation();
        },
        style: this.setPanelWidth()
      },
      arr,
      this.renderResult()
    );
  };

  return CascadeMulti;
}(_react2["default"].Component);

CascadeMulti.defaultProps = {
  className: '',
  prefixCls: 'kuma-cascade-multi',
  config: [],
  options: [],
  cascadeSize: 3,
  value: [],
  notFoundContent: '',
  allowClear: true,
  locale: 'zh-cn',
  onSelect: function onSelect() {},
  onItemClick: function onItemClick() {}
};

CascadeMulti.propTypes = {
  className: _react2["default"].PropTypes.string,
  prefixCls: _react2["default"].PropTypes.string,
  config: _react2["default"].PropTypes.array,
  options: _react2["default"].PropTypes.array,
  cascadeSize: _react2["default"].PropTypes.number,
  value: _react2["default"].PropTypes.array,
  notFoundContent: _react2["default"].PropTypes.string,
  allowClear: _react2["default"].PropTypes.bool,
  locale: _react2["default"].PropTypes.string,
  onSelect: _react2["default"].PropTypes.func,
  onItemClick: _react2["default"].PropTypes.func
};

CascadeMulti.displayName = 'CascadeMulti';

module.exports = CascadeMulti;