'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWidthStyle = exports.getCascadeSelected = undefined;
exports.getDisabledValueLabel = getDisabledValueLabel;

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * 获取选中的disabled节点
 * @param {*} dataList
 * @param {*} value
 */
function getDisabledValueLabel(dataList, value) {
  var disabledNodes = [];
  var leafNodes = [];

  /**
   * @param {*} list
   * @param {*} isNoNeedCheck 父级是被选中，则子级默认为选中状态
   * @param {*} isLeafNode 当为true时，直接进入为「筛选叶子节点的」方法
   */
  function recursion(list) {
    var isNoNeedCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var isLeafNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    list.forEach(function (item) {
      var isChecked = value.indexOf(item.value) > -1 || isNoNeedCheck;
      var hasChildren = item.children && item.children.length;
      var disabled = item.disabled;
      if (isLeafNode) {
        if (hasChildren) {
          recursion(item.children, false, isLeafNode);
        } else {
          leafNodes.push(item);
        }
        return;
      }
      if (isChecked && disabled) {
        disabledNodes.push(item);
        if (hasChildren) {
          recursion(item.children, false, true);
        } else {
          leafNodes.push(item);
        }
      } else if (hasChildren) {
        recursion(item.children, isChecked, false);
      }
    });
  }

  recursion(dataList);
  leafNodes = leafNodes.map(function (item) {
    return {
      value: item.value,
      label: item.label
    };
  });

  return {
    disabledNodes: disabledNodes, leafNodes: leafNodes
  };
}

var getCheckedIndexs = function getCheckedIndexs(dataList, values) {
  var result = [];
  function recursion(data) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

    data.forEach(function (item, i) {
      var index = level + '-' + i;
      item.pos = index; // eslint-disable-line
      if (values.indexOf(item.value) > -1) {
        result.push(index);
      } else if (item.children && item.children.length) {
        recursion(item.children, index);
      }
    });
  }
  recursion(dataList);
  return result;
};

function checkStr(values, str) {
  return values.some(function (value) {
    return value.indexOf(str) === 0;
  });
}

var getCascadeSelected = exports.getCascadeSelected = function getCascadeSelected(data, values) {
  var ret = (0, _cloneDeep2["default"])(data);
  var checkedIndex = getCheckedIndexs(ret, values);
  function recursion(dataList) {
    for (var i = 0; i < dataList.length;) {
      if (!checkStr(checkedIndex, dataList[i].pos)) {
        dataList.splice(i, 1);
        continue;
      }
      if (dataList[i].children && dataList[i].children.length) {
        recursion(dataList[i].children);
      }
      i += 1;
    }
  }

  recursion(ret);
  return ret;
};

var getWidthStyle = exports.getWidthStyle = function getWidthStyle(dom, defaultWidth) {
  var reg = /[0-9]+/g;
  if (dom) {
    var width = getComputedStyle(dom).width;
    if (width) {
      return width.match(reg)[0];
    }
  }
  return defaultWidth;
};