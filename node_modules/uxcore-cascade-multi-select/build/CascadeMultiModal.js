'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _uxcoreDialog = require('uxcore-dialog');

var _uxcoreDialog2 = _interopRequireDefault(_uxcoreDialog);

var _CascadeMultiPanel = require('./CascadeMultiPanel');

var _CascadeMultiPanel2 = _interopRequireDefault(_CascadeMultiPanel);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * CascadeMultiSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author changming<changming.zy@alibaba-inc.com>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2017, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var CascadeMultiModal = function (_React$Component) {
  _inherits(CascadeMultiModal, _React$Component);

  function CascadeMultiModal(props) {
    _classCallCheck(this, CascadeMultiModal);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      value: props.value,
      options: props.options,
      visible: false,
      expand: true,
      result: {}
    };
    _this.data = {
      value: props.value,
      options: props.options,
      result: {}
    };
    var value = props.value,
        options = props.options;

    _this.initResult(value, options);
    return _this;
  }

  CascadeMultiModal.prototype.onOk = function onOk() {
    var _state = this.state,
        value = _state.value,
        options = _state.options,
        result = _state.result;
    var valueList = result.valueList,
        labelList = result.labelList,
        leafList = result.leafList;

    this.data = {
      value: value,
      options: options,
      result: result
    };
    this.props.onOk(valueList, labelList, leafList);
    this.setState({ visible: false });
  };

  CascadeMultiModal.prototype.onCancel = function onCancel() {
    var _this2 = this;

    var _data = this.data,
        value = _data.value,
        options = _data.options,
        result = _data.result;

    this.setState({
      visible: false,
      value: value,
      options: options,
      result: result
    }, function () {
      _this2.props.onCancel();
    });
  };

  CascadeMultiModal.prototype.onSelect = function onSelect(valueList, labelList, leafList) {
    var _this3 = this;

    this.setState({
      value: valueList,
      result: {
        valueList: valueList,
        labelList: labelList,
        leafList: leafList
      }
    }, function () {
      _this3.props.onSelect(valueList, labelList, leafList);
    });
  };

  CascadeMultiModal.prototype.onDelete = function onDelete(key) {
    var options = this.props.options;
    var value = this.state.value;

    var index = value.indexOf(key);
    if (index !== -1) {
      value.splice(index, 1);
    }
    this.initResult(value, options);
    this.setState({ value: value, options: options });
  };

  CascadeMultiModal.prototype.onExpand = function onExpand(expand) {
    this.setState({
      expand: expand
    });
  };

  CascadeMultiModal.prototype.getSelectResult = function getSelectResult(value, dataList, keyArr, textArr) {
    if (dataList && dataList.length) {
      for (var i = 0; i < dataList.length; i++) {
        var item = dataList[i];
        if (!value.length) {
          return;
        }
        if (value.indexOf(item.value) !== -1) {
          keyArr.push(item.value);
          textArr.push(item.label);
          value.splice(value.indexOf(item.value), 1);
        }
        if (item.children) {
          this.getSelectResult(value, item.children, keyArr, textArr);
        }
      }
    }
  };

  CascadeMultiModal.prototype.initResult = function initResult(value, options) {
    var keyArr = [];
    var textArr = [];
    var valueList = (0, _cloneDeep2["default"])(value);
    this.getSelectResult(valueList, options, keyArr, textArr);
    this.data.value = keyArr;
    this.data.result = {
      valueList: keyArr,
      labelList: textArr
    };
  };

  CascadeMultiModal.prototype.renderDialog = function renderDialog() {
    var _this4 = this;

    var _props = this.props,
        prefixCls = _props.prefixCls,
        locale = _props.locale,
        title = _props.title,
        cascadeSize = _props.cascadeSize,
        width = _props.width;
    var visible = this.state.visible;

    if (!visible) {
      return null;
    }
    // 设置 dialog 默认宽度
    var defaultWidth = width || cascadeSize * 150 + 220 + 2;
    return _react2["default"].createElement(
      _uxcoreDialog2["default"],
      {
        className: prefixCls + '-model',
        title: title || (0, _locale2["default"])(locale).title,
        visible: visible,
        locale: locale,
        width: defaultWidth,
        onOk: function onOk() {
          _this4.onOk();
        },
        onCancel: function onCancel() {
          _this4.onCancel();
        }
      },
      this.renderContent()
    );
  };

  CascadeMultiModal.prototype.renderContent = function renderContent() {
    var _this5 = this;

    var _state2 = this.state,
        value = _state2.value,
        options = _state2.options;

    return _react2["default"].createElement(
      'div',
      null,
      _react2["default"].createElement(_CascadeMultiPanel2["default"], _extends({}, this.props, {
        value: value,
        options: options,
        onSelect: function onSelect(valueList, labelList, leafList) {
          _this5.onSelect(valueList, labelList, leafList);
        },
        ref: function ref(r) {
          _this5.refCascadeMulti = r;
        },
        mode: 'mix'
      }))
    );
  };

  CascadeMultiModal.prototype.renderResult = function renderResult() {
    var prefixCls = this.props.prefixCls;

    return _react2["default"].createElement(
      'div',
      {
        className: prefixCls + '-model-result'
      },
      this.renderResultList(),
      this.renderExpand()
    );
  };

  CascadeMultiModal.prototype.renderExpand = function renderExpand() {
    var _this6 = this;

    var _props2 = this.props,
        prefixCls = _props2.prefixCls,
        locale = _props2.locale;
    var expand = this.state.expand;
    var labelList = this.data.result.labelList;

    if (!labelList || !labelList.length) {
      return null;
    }
    var arr = null;
    if (expand) {
      arr = _react2["default"].createElement(
        'span',
        {
          className: prefixCls + '-model-expand',
          onClick: function onClick() {
            _this6.onExpand(false);
          }
        },
        (0, _locale2["default"])(locale).close
      );
    } else {
      arr = _react2["default"].createElement(
        'span',
        {
          className: prefixCls + '-model-expand',
          onClick: function onClick() {
            _this6.onExpand(true);
          }
        },
        (0, _locale2["default"])(locale).expandAll,
        labelList.length,
        (0, _locale2["default"])(locale).item
      );
    }
    return arr;
  };

  CascadeMultiModal.prototype.renderResultList = function renderResultList() {
    var _this7 = this;

    var prefixCls = this.props.prefixCls;
    var expand = this.state.expand;
    var _data$result = this.data.result,
        valueList = _data$result.valueList,
        labelList = _data$result.labelList;

    if (!labelList) {
      return null;
    }
    var arr = [];
    var style = {};
    if (expand) {
      style.height = 'auto';
    } else {
      style.maxHeight = 76;
    }
    labelList.forEach(function (item, index) {
      arr.push(_react2["default"].createElement(
        'li',
        { className: prefixCls + '-model-result-ul-list', key: valueList[index] },
        _react2["default"].createElement(
          'span',
          { className: prefixCls + '-model-result-ul-list-content' },
          item
        ),
        _react2["default"].createElement('i', {
          className: (0, _classnames2["default"])([prefixCls + '-model-result-ul-list-remove'], 'kuma-icon kuma-icon-close'),
          onClick: function onClick() {
            _this7.onDelete(valueList[index]);
          }
        })
      ));
    });
    return _react2["default"].createElement(
      'ul',
      {
        className: prefixCls + '-model-result-ul',
        style: style
      },
      arr
    );
  };

  CascadeMultiModal.prototype.render = function render() {
    var _this8 = this;

    var locale = this.props.locale;

    return _react2["default"].createElement(
      'div',
      null,
      _react2["default"].createElement(
        _uxcoreButton2["default"],
        {
          type: 'outline',
          onClick: function onClick() {
            _this8.setState({ visible: true });
          }
        },
        (0, _locale2["default"])(locale).placeholder
      ),
      this.renderResult(),
      this.renderDialog()
    );
  };

  return CascadeMultiModal;
}(_react2["default"].Component);

CascadeMultiModal.defaultProps = {
  className: '',
  prefixCls: 'kuma-cascade-multi',
  config: [],
  options: [],
  cascadeSize: 3,
  value: [],
  notFoundContent: '',
  allowClear: true,
  locale: 'zh-cn',
  onSelect: function onSelect() {},

  title: '',
  width: 0,
  onOk: function onOk() {},
  onCancel: function onCancel() {}
};

CascadeMultiModal.propTypes = {
  className: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  config: _propTypes2["default"].array,
  options: _propTypes2["default"].array,
  cascadeSize: _propTypes2["default"].number,
  value: _propTypes2["default"].array,
  notFoundContent: _propTypes2["default"].string,
  allowClear: _propTypes2["default"].bool,
  locale: _propTypes2["default"].string,
  onSelect: _propTypes2["default"].func,

  title: _propTypes2["default"].string,
  width: _propTypes2["default"].number,
  onOk: _propTypes2["default"].func,
  onCancel: _propTypes2["default"].func
};

exports["default"] = CascadeMultiModal;
module.exports = exports['default'];