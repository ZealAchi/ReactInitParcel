'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * CheckboxCellField Component for uxcore
 * @author eternalsky
 *
 * Copyright 2015-2016, Uxcore Team, Alinw.
 * All rights reserved.
 */
var CellField = require('uxcore-cell-field');
var assign = require('object-assign');
var CheckboxGroup = require('uxcore-checkbox-group');
var React = require('react');

var Item = CheckboxGroup.Item;

var CheckboxCellField = function (_CellField) {
  _inherits(CheckboxCellField, _CellField);

  function CheckboxCellField() {
    _classCallCheck(this, CheckboxCellField);

    return _possibleConstructorReturn(this, _CellField.apply(this, arguments));
  }

  CheckboxCellField.prototype.getTextMap = function getTextMap() {
    var me = this;
    var obj = {};
    var _me$props = me.props,
        column = _me$props.column,
        rowData = _me$props.rowData;
    var config = column.config,
        renderChildren = column.renderChildren;

    if (column.renderChildren) {
      renderChildren().forEach(function (item) {
        obj[item.props.value] = item.props.text;
      });
    } else if (config && config.data) {
      var configData = [];
      if (typeof config.data === 'function') {
        configData = config.data(rowData);
      }
      if (config.data instanceof Array) {
        configData = config.data;
      }
      configData.forEach(function (item) {
        obj[item.value] = item.text;
      });
    }
    return obj;
  };

  CheckboxCellField.prototype.renderChildren = function renderChildren() {
    var me = this;
    var _me$props2 = me.props,
        column = _me$props2.column,
        rowData = _me$props2.rowData;
    var renderChildren = column.renderChildren,
        config = column.config;

    if (renderChildren) {
      return renderChildren(rowData);
    }
    if (config) {
      var configData = [];
      if (typeof config.data === 'function') {
        configData = config.data(rowData);
      }
      if (config.data instanceof Array) {
        configData = config.data;
      }
      return configData.map(function (item, index) {
        return React.createElement(Item, { key: index, value: item.value, text: item.text, disabled: item.disabled });
      });
    }
    return [];
  };

  CheckboxCellField.prototype.renderContent = function renderContent() {
    var me = this;
    var textMap = me.getTextMap();
    var fieldProps = {
      onChange: function onChange(value) {
        me.handleDataChange({
          text: (value || []).map(function (item) {
            return textMap[item];
          }).join(', '),
          value: value
        });
      },
      value: me.props.value
    };
    if (me.props.column.config) {
      var customProps = _extends({}, me.props.column.config);
      Object.keys(fieldProps).forEach(function (item) {
        delete customProps[item];
      });
      assign(fieldProps, customProps);
    }
    return React.createElement(
      CheckboxGroup,
      fieldProps,
      me.renderChildren()
    );
  };

  return CheckboxCellField;
}(CellField);

CheckboxCellField.propTypes = assign({}, CellField.propTypes);

CheckboxCellField.defaultProps = assign({}, CellField.defaultProps);

module.exports = CheckboxCellField;