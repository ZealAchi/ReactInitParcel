'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _RcDialog = require('./RcDialog');

var _RcDialog2 = _interopRequireDefault(_RcDialog);

var _confirm = require('./confirm');

var _confirm2 = _interopRequireDefault(_confirm);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author: vincent
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @date: 15/5/19
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


function noop() {}

var getIEVer = function getIEVer() {
  if (window) {
    var ua = window.navigator.userAgent;
    var idx = ua.indexOf('MSIE');
    if (idx > 0) {
      // "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64;
      // Trident/6.0; SLCC2; .NET CLR 2.0.50727)"
      return parseInt(ua.substring(idx + 5, ua.indexOf('.', idx)), 10);
    }
    if (ua.match(/Trident\/7\./)) {
      // "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2;
      // .NET CLR 2.0.50727; rv:11.0) like Gecko"
      return 11;
    }
    return 0;
  }
  return 0;
};

var Dialog = function (_React$Component) {
  _inherits(Dialog, _React$Component);

  function Dialog(props) {
    _classCallCheck(this, Dialog);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    var _ref = props.style || {},
        top = _ref.top,
        left = _ref.left;

    _this.state = {
      contentTop: top,
      contentLeft: left,
      dragged: false
    };
    return _this;
  }

  Dialog.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var visible = this.props.visible;
    var htmlClassName = prevProps.htmlClassName;

    var htmlNode = document.documentElement;
    var supportClassList = !!htmlNode.classList;

    // reset the position of dialog in draggable mode
    if (!prevProps.visible && visible) {
      this.setState({ dragged: false });
    }

    if (htmlClassName) {
      if (visible) {
        if (supportClassList) {
          htmlNode.classList.add(htmlClassName);
        } else {
          htmlNode.className += ' ' + htmlClassName;
        }
      } else if (supportClassList) {
        htmlNode.classList.remove(htmlClassName);
      } else {
        var cls = htmlNode.className;
        cls = cls.replace(new RegExp('\\s?' + htmlClassName), '');
        htmlNode.className = cls;
      }
    }
  };

  Dialog.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  Dialog.prototype.handleCancel = function handleCancel(e) {
    var onCancel = this.props.onCancel;

    onCancel(e);
  };

  Dialog.prototype.handleOk = function handleOk() {
    var onOk = this.props.onOk;

    onOk();
  };

  Dialog.prototype.handleDrag = function handleDrag(e) {
    var clientY = e.clientY,
        clientX = e.clientX;


    this.setState({
      dragged: true,
      contentTop: clientY > 0 ? clientY : 0,
      contentLeft: clientX > 0 ? clientX : 0
    });
  };

  Dialog.prototype.render = function render() {
    var _classnames,
        _classnames2,
        _this2 = this;

    var props = this.props;

    var locale = _i18n2["default"][props.locale];

    var defaultFooter = [_react2["default"].createElement(
      _uxcoreButton2["default"],
      {
        key: 'cancel',
        type: 'secondary',
        size: 'small',
        onClick: this.handleCancel.bind(this)
      },
      locale.cancel
    ), _react2["default"].createElement(
      _uxcoreButton2["default"],
      {
        key: 'confirm',
        type: 'primary',
        size: 'small',
        onClick: this.handleOk.bind(this)
      },
      locale.ok
    )];
    var footer = props.footer || defaultFooter;
    var className = (0, _classnames4["default"])((_classnames = {}, _defineProperty(_classnames, props.prefixCls + '-noheader', !props.title), _defineProperty(_classnames, props.className, !!props.className), _defineProperty(_classnames, props.prefixCls + '-confirm', props.isConfirm), _classnames));
    var wrapClassName = (0, _classnames4["default"])((_classnames2 = {}, _defineProperty(_classnames2, props.wrapClassName, !!props.wrapClassName), _defineProperty(_classnames2, 'vertical-center-dialog', getIEVer() < 8), _classnames2));

    var _props = this.props,
        title = _props.title,
        style = _props.style,
        draggable = _props.draggable,
        otherProps = _objectWithoutProperties(_props, ['title', 'style', 'draggable']);

    var _state = this.state,
        dragged = _state.dragged,
        contentTop = _state.contentTop,
        contentLeft = _state.contentLeft;


    var newTitle = title;
    var newStyle = _extends({}, style);

    if (draggable) {
      if (dragged) {
        newStyle = _extends({}, newStyle, {
          position: 'absolute',
          top: contentTop,
          left: contentLeft
        });
      }

      newTitle = _react2["default"].createElement(
        'div',
        {
          draggable: true,
          onDrag: this.handleDrag.bind(this),
          onDragEnd: this.handleDrag.bind(this)
        },
        title
      );
    }

    return _react2["default"].createElement(_RcDialog2["default"], _extends({
      onClose: this.handleCancel.bind(this),
      footer: footer
    }, otherProps, {
      title: newTitle,
      style: newStyle,
      className: className,
      wrapClassName: wrapClassName,
      visible: props.visible,
      ref: function ref(c) {
        _this2.dialog = c;
      }
    }));
  };

  return Dialog;
}(_react2["default"].Component);

Dialog.propTypes = {
  onCancel: _propTypes2["default"].func,
  onOk: _propTypes2["default"].func,
  htmlClassName: _propTypes2["default"].string,
  getContainer: _propTypes2["default"].func,
  className: _propTypes2["default"].string,
  iconClassName: _propTypes2["default"].string,
  visible: _propTypes2["default"].bool,
  maskClosable: _propTypes2["default"].bool,
  title: _propTypes2["default"].string,
  closable: _propTypes2["default"].bool,
  maskTransitionName: _propTypes2["default"].string,
  transitionName: _propTypes2["default"].string,
  locale: _propTypes2["default"].string,
  wrapClassName: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  draggable: _propTypes2["default"].bool
};

Dialog.defaultProps = {
  prefixCls: 'kuma-dlg',
  className: '',
  wrapClassName: '',
  onOk: noop,
  locale: 'zh-cn',
  onCancel: noop,
  width: '520px',
  transitionName: 'dialogSlideDown',
  maskTransitionName: 'dialogFade',
  visible: false,
  closable: true,
  maskClosable: false,
  title: '',
  htmlClassName: '',
  getContainer: undefined,
  iconClassName: undefined,
  draggable: false
};

function adjustIcon(props, defaultIcon) {
  var icon = props.iconClassName ? _react2["default"].createElement(_uxcoreIcon2["default"], { name: props.iconClassName }) : _react2["default"].createElement(_uxcoreIcon2["default"], { name: defaultIcon });
  return props.icon ? props.icon : icon;
}

Dialog.info = function (props) {
  (0, _objectAssign2["default"])(props, {
    icon: adjustIcon(props, 'tishi-full'),
    okCancel: false
  });
  return (0, _confirm2["default"])(props, Dialog);
};

Dialog.success = function (props) {
  (0, _objectAssign2["default"])(props, {
    icon: adjustIcon(props, 'chenggong-full'),
    okCancel: false
  });
  return (0, _confirm2["default"])(props, Dialog);
};

Dialog.error = function (props) {
  (0, _objectAssign2["default"])(props, {
    icon: adjustIcon(props, 'biaodanlei-tongyongqingchu'),
    okCancel: false
  });
  return (0, _confirm2["default"])(props, Dialog);
};

Dialog.confirm = function (props) {
  (0, _objectAssign2["default"])(props, {
    icon: _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'jinggao-full' })
  });
  return (0, _confirm2["default"])(props, Dialog);
};

exports["default"] = Dialog;
module.exports = exports['default'];