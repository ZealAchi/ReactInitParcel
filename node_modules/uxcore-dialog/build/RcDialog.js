'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rcDialog = require('rc-dialog');

var _rcDialog2 = _interopRequireDefault(_rcDialog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var defaultGetContainer = function defaultGetContainer() {
  return document.body;
};

var NewDialog = function (_RcDialog) {
  _inherits(NewDialog, _RcDialog);

  function NewDialog(props) {
    _classCallCheck(this, NewDialog);

    var _this = _possibleConstructorReturn(this, _RcDialog.call(this, props));

    var getContainer = props.getContainer;

    if (document) {
      /* eslint-disable no-underscore-dangle */
      _this._container = getContainer ? getContainer() : defaultGetContainer();
      /* eslint-enable no-underscore-dangle */
    }
    return _this;
  }

  return NewDialog;
}(_rcDialog2["default"]);

exports["default"] = NewDialog;
module.exports = exports['default'];