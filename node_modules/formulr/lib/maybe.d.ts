declare const SOME: unique symbol;
export declare type Maybe<T> = ([T] & {
    __some: typeof SOME;
}) | null | undefined;
export declare const Some: <T>(value: T) => [T] & {
    __some: typeof SOME;
};
export declare const None: () => null;
export declare function or<T>(maybe: Maybe<T>, def: T | (() => T)): T;
export declare function isSome<T>(maybe: Maybe<T>): maybe is [T] & {
    __some: typeof SOME;
};
export declare function get<T>(some: [T] & {
    __some: typeof SOME;
}): T;
export {};
//# sourceMappingURL=maybe.d.ts.map