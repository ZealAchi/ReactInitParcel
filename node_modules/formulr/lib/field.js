import { useMemo } from 'react';
import { FieldModel, FormStrategy, isModelRef, isFieldModel, } from './models';
import { useValue$ } from './hooks';
import { useFormContext } from './context';
import { removeOnUnmount } from './utils';
import { or } from './maybe';
function useModelAndChildProps(field, parent, strategy, defaultValue, form) {
    return useMemo(function () {
        var model;
        if (typeof field === 'string') {
            if (strategy !== FormStrategy.View) {
                throw new Error();
            }
            var m = parent.get(field);
            if (!m || !isFieldModel(m)) {
                var v = or(parent.getPatchedValue(field), defaultValue);
                model = new FieldModel(v);
                parent.registerChild(field, model);
            }
            else {
                model = m;
            }
        }
        else if (isModelRef(field)) {
            var m = field.getModel();
            if (!m || !isFieldModel(m)) {
                var v = or(field.patchedValue, function () { return or(field.initialValue, defaultValue); });
                model = new FieldModel(v);
                field.setModel(model);
            }
            else {
                model = m;
            }
        }
        else {
            model = field;
        }
        return model;
    }, [field, parent, strategy, form]);
}
export function useField(field, defaultValue, validators) {
    if (validators === void 0) { validators = []; }
    var _a = useFormContext(), parent = _a.parent, strategy = _a.strategy, form = _a.form;
    var model = useModelAndChildProps(field, parent, strategy, defaultValue, form);
    var value$ = model.value$, error$ = model.error$;
    useValue$(value$, value$.getValue());
    useValue$(error$, error$.getValue());
    if (typeof field === 'string' || isModelRef(field)) {
        model.validators = validators;
    }
    removeOnUnmount(field, model, parent);
    return model;
}
