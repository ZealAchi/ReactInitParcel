import { useMemo } from 'react';
import { useFormContext } from './context';
import { FieldSetModel, FormStrategy, isModelRef, isFieldSetModel, } from './models';
import { useValue$ } from './hooks';
import { removeOnUnmount, isPlainObject } from './utils';
import { isSome, get, or } from './maybe';
function useFieldSetModel(field, parent, strategy) {
    return useMemo(function () {
        var model;
        if (typeof field === 'string') {
            if (strategy !== FormStrategy.View) {
                throw new Error();
            }
            var m = parent.get(field);
            if (!m || !isFieldSetModel(m)) {
                model = new FieldSetModel({});
                var v = {};
                var potential = parent.getPatchedValue(field);
                if (isSome(potential)) {
                    var inner = get(potential);
                    if (isPlainObject(inner)) {
                        v = inner;
                    }
                }
                model.patchedValue = v;
                parent.registerChild(field, model);
            }
            else {
                model = m;
            }
        }
        else if (isModelRef(field)) {
            var m = field.getModel();
            if (!m || !isFieldSetModel(m)) {
                model = new FieldSetModel({});
                var v = or(field.patchedValue, function () {
                    return or(field.initialValue, {});
                });
                model.patchedValue = v;
                field.setModel(model);
            }
            else {
                model = m;
            }
        }
        else {
            model = field;
        }
        return model;
    }, [field, parent, strategy]);
}
/**
 * 创建一个 `FieldSet`
 *
 * @param field model 或者字段名，当`FormStrategy`是`View`的时候才能用字段名
 * @param validators 当`field`是字段名的时候，可以传入`validator`
 */
export function useFieldSet(field, validators) {
    if (validators === void 0) { validators = []; }
    var _a = useFormContext(), parent = _a.parent, strategy = _a.strategy, form = _a.form;
    var model = useFieldSetModel(field, parent, strategy);
    if (typeof field === 'string' || isModelRef(field)) {
        model.validators = validators;
    }
    var childContext = useMemo(function () { return ({
        strategy: strategy,
        form: form,
        parent: model,
    }); }, [strategy, form, model]);
    /**
     * ignore returned value
     * user can get the value from model
     */
    useValue$(model.error$, model.error$.getValue());
    removeOnUnmount(field, model, parent);
    return [childContext, model];
}
