import { useMemo } from 'react';
import { FieldArrayModel, FormStrategy, isModelRef, isFieldArrayModel, } from './models';
import { useFormContext } from './context';
import { useValue$ } from './hooks';
import { removeOnUnmount } from './utils';
import { isSome, get } from './maybe';
function useArrayModel(field, parent, strategy, defaultValue) {
    return useMemo(function () {
        var model;
        if (typeof field === 'string') {
            if (strategy !== FormStrategy.View) {
                throw new Error();
            }
            var m = parent.get(field);
            if (!m || !isFieldArrayModel(m)) {
                var potential = parent.getPatchedValue(field);
                var v = defaultValue;
                if (isSome(potential)) {
                    var inner = get(potential);
                    if (Array.isArray(inner)) {
                        v = inner;
                    }
                }
                model = new FieldArrayModel(null, v);
                parent.registerChild(field, model);
            }
            else {
                model = m;
            }
        }
        else if (isModelRef(field)) {
            var m = field.getModel();
            if (!m || !isFieldArrayModel(m)) {
                var v = defaultValue;
                if (isSome(field.patchedValue)) {
                    var inner = get(field.patchedValue);
                    if (Array.isArray(inner)) {
                        v = inner;
                    }
                }
                else if (isSome(field.initialValue)) {
                    var inner = get(field.initialValue);
                    if (Array.isArray(inner)) {
                        v = inner;
                    }
                }
                model = new FieldArrayModel(null, v);
                field.setModel(model);
            }
            else {
                model = m;
            }
        }
        else {
            model = field;
        }
        return model;
    }, [field, parent, strategy]);
}
export function useFieldArray(field, validators, defaultValue) {
    if (validators === void 0) { validators = []; }
    if (defaultValue === void 0) { defaultValue = []; }
    var _a = useFormContext(), parent = _a.parent, strategy = _a.strategy;
    var model = useArrayModel(field, parent, strategy, defaultValue);
    if (typeof field === 'string' || isModelRef(field)) {
        model.validators = validators;
    }
    var error$ = model.error$, children$ = model.children$;
    /**
     * ignore returned value
     * user can get the value from model
     */
    useValue$(children$, children$.getValue());
    useValue$(error$, error$.getValue());
    removeOnUnmount(field, model, parent);
    return model;
}
