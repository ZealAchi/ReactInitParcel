import { Subject } from 'rxjs';
import { BasicModel } from './basic';
import { ValidateOption, IMaybeError } from '../validate';
import { Maybe } from '../maybe';
declare type $FieldSetValue<Children extends Record<string, BasicModel<any>>> = {
    [Key in keyof Children]: Children[Key]['phantomValue'];
};
declare const SET_ID: unique symbol;
declare class FieldSetModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>> extends BasicModel<$FieldSetValue<Children>> {
    /**
     * @internal
     */
    [SET_ID]: boolean;
    /** @internal */
    patchedValue: $FieldSetValue<Children> | null;
    childRegister$: Subject<string>;
    childRemove$: Subject<string>;
    readonly children: Record<string, BasicModel<any>>;
    /** @internal */
    constructor(children: Children);
    /**
     * 初始化 `FieldSet` 的值，并设置 `initialValue`
     * @param values 待初始化的值
     */
    initialize(values: $FieldSetValue<Children>): void;
    /**
     * @internal
     */
    getPatchedValue<T>(name: string): Maybe<T>;
    /**
     * 获取 `FieldSet` 的值
     */
    getRawValue(): $FieldSetValue<Children>;
    /**
     * 获取 `FieldSet` 用于表单提交的值
     */
    getSubmitValue(): any;
    /**
     * 在 `FieldSet` 上注册一个新的字段
     * @param name 字段名
     * @param model 字段对应的 model
     */
    registerChild(name: string, model: BasicModel<any>): void;
    /**
     * 在 `FieldSet` 上删除指定的字段
     * @param name 字段名
     */
    removeChild(name: string): BasicModel<any>;
    /**
     * 是否 `FieldSet` 所有字段都通过了校验
     */
    valid(): boolean;
    /**
     * 更新 `FieldSet` 的值
     * @param value 待更新的值
     */
    patchValue(value: $FieldSetValue<Children>): void;
    /**
     * 清除 `FieldSet` 所有字段的值，同时清除 `initialValue`
     */
    clear(): void;
    /**
     * 重置 `FieldValue` 所有字段的值，如果存在 `initialValue` 就是用初始值，否则使用默认值
     */
    reset(): void;
    /**
     * 执行 `FieldSet` 的校验
     * @param option 校验的参数
     */
    validate(option?: ValidateOption): Promise<IMaybeError<any> | IMaybeError<any>[]>;
    /**
     * 是否 `FieldSet` 上的所有字段都没有被修改过
     */
    pristine(): boolean;
    /**
     * 是否 `FieldSet` 上有任意字段被修改过
     *
     * `dirty === !pristine`
     */
    dirty(): boolean;
    /**
     * 是否 `FieldSet` 上有任意字段被 touch 过
     *
     */
    touched(): boolean;
    /**
     * 返回指定字段名对应的 model
     * @param name 字段名
     */
    get<Name extends keyof Children>(name: Name): Children[Name] | undefined | null;
}
declare function isFieldSetModel<Children extends Record<string, BasicModel<any>> = Record<string, BasicModel<any>>>(maybeModel: any): maybeModel is FieldSetModel<Children>;
export { FieldSetModel, $FieldSetValue, isFieldSetModel };
//# sourceMappingURL=set.d.ts.map