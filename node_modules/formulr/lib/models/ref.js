import { ValidateOption } from '../validate';
import { None } from '../maybe';
import { BehaviorSubject } from 'rxjs';
var REF_ID = Symbol('ref');
var ModelRef = /** @class */ (function () {
    /**
     * @internal
     */
    function ModelRef(current, initialValue, owner) {
        if (current === void 0) { current = null; }
        if (initialValue === void 0) { initialValue = None(); }
        this.initialValue = initialValue;
        this.owner = owner;
        /**
         * @internal
         */
        this.patchedValue = None();
        this.model$ = new BehaviorSubject(current);
    }
    ModelRef.prototype.getModel = function () {
        return this.model$.getValue();
    };
    ModelRef.prototype.setModel = function (model) {
        var current = this.getModel();
        if (current) {
            current.form = null;
            current.owner = null;
        }
        this.model$.next(model);
        if (model) {
            model.form = this.owner && this.owner.form;
            model.owner = this;
        }
    };
    ModelRef.prototype.getParent = function () {
        return this.owner;
    };
    ModelRef.prototype.dirty = function () {
        var current = this.getModel();
        if (!current) {
            return false;
        }
        return current.dirty();
    };
    ModelRef.prototype.touched = function () {
        var current = this.getModel();
        if (!current) {
            return false;
        }
        return current.touched();
    };
    ModelRef.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        var current = this.getModel();
        if (!current) {
            return Promise.resolve();
        }
        return current.validate(option);
    };
    ModelRef.prototype.getRawValue = function () {
        var _a;
        return (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.getRawValue();
    };
    ModelRef.prototype.pristine = function () {
        var current = this.getModel();
        if (current) {
            return current.pristine();
        }
        return true;
    };
    ModelRef.prototype.valid = function () {
        var current = this.getModel();
        if (current) {
            return current.valid();
        }
        return true;
    };
    Object.defineProperty(ModelRef.prototype, "error", {
        get: function () {
            var _a;
            return (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.error;
        },
        set: function (error) {
            var current = this.getModel();
            if (current) {
                current.error = error;
            }
        },
        enumerable: true,
        configurable: true
    });
    ModelRef.prototype.patchValue = function (value) {
        var _a;
        (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.patchValue(value);
    };
    ModelRef.prototype.initialize = function (value) {
        var _a;
        (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.initialize(value);
    };
    ModelRef.prototype.reset = function () {
        var _a;
        (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.reset();
    };
    ModelRef.prototype.clear = function () {
        var _a;
        (_a = this.getModel()) === null || _a === void 0 ? void 0 : _a.clear();
    };
    return ModelRef;
}());
ModelRef.prototype[REF_ID] = true;
function isModelRef(maybeModelRef) {
    return !!(maybeModelRef && maybeModelRef[REF_ID]);
}
export { ModelRef, isModelRef };
