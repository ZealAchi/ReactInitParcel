import { __extends, __spreadArrays } from "tslib";
import { BehaviorSubject } from 'rxjs';
import { BasicModel, isModel } from './basic';
import { ValidateOption } from '../validate';
import { ModelRef, isModelRef } from './ref';
import { Some, or } from '../maybe';
var FIELD_ARRAY_ID = Symbol('field-array');
var FieldArrayModel = /** @class */ (function (_super) {
    __extends(FieldArrayModel, _super);
    /** @internal */
    function FieldArrayModel(childBuilder, defaultValue) {
        var _this = _super.call(this) || this;
        _this.defaultValue = defaultValue;
        _this.childFactory = childBuilder
            ? function (defaultValue) { return childBuilder.build(Some(defaultValue)); }
            : function (defaultValue) { return new ModelRef(null, Some(defaultValue), _this); };
        var children = _this.defaultValue.map(_this.childFactory);
        _this.children$ = new BehaviorSubject(children);
        return _this;
    }
    /**
     * 重置 `FieldArray` 为初始值，初始值通过 `initialize` 设置；如果初始值不存在就使用默认值
     */
    FieldArrayModel.prototype.reset = function () {
        var children = or(this.initialValue, this.defaultValue).map(this.childFactory);
        this.children$.next(children);
    };
    /**
     * 清除 `FieldArray` 的初始值，并将当前值设置为默认值
     */
    FieldArrayModel.prototype.clear = function () {
        this.initialValue = undefined;
        var children = this.defaultValue.map(this.childFactory);
        this.children$.next(children);
    };
    Object.defineProperty(FieldArrayModel.prototype, "children", {
        /**
         * 获取 `FieldArray` 内的所有 model
         */
        get: function () {
            return this.children$.getValue();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * `FieldArray` 内所有 model 是否都通过了校验
     */
    FieldArrayModel.prototype.valid = function () {
        if (this.error$.getValue() !== null) {
            return false;
        }
        var children = this.children$.getValue();
        for (var i = 0; i < children.length; i += 1) {
            var child = children[i];
            if (isModelRef(child)) {
                var model = child.getModel();
                if (!model || !model.valid()) {
                    return false;
                }
            }
            else if (isModel(child) && !child.valid()) {
                return false;
            }
        }
        return true;
    };
    /**
     * 获取 `FieldArray` 内的原始值
     */
    FieldArrayModel.prototype.getRawValue = function () {
        return this.children$.getValue().map(function (child) {
            if (isModelRef(child)) {
                var model = child.getModel();
                return model ? model.getRawValue() : null;
            }
            else if (isModel(child)) {
                return child.getRawValue();
            }
            return null;
        });
    };
    /**
     * 获取 `FieldArray` 的用于表单提交的值，和原始值可能不一致
     */
    FieldArrayModel.prototype.getSubmitValue = function () {
        return this.children$.getValue().map(function (child) {
            if (isModelRef(child)) {
                var model = child.getModel();
                return model ? model.getSubmitValue() : null;
            }
            else if (isModel(child)) {
                return child.getSubmitValue();
            }
            return null;
        });
    };
    /**
     * 修改 `FieldArray` 的值
     * @param value 要修改的值
     */
    FieldArrayModel.prototype.patchValue = function (value) {
        var children = this.children$.getValue();
        for (var i = 0; i < value.length; i += 1) {
            if (i >= children.length) {
                break;
            }
            var item = value[i];
            var model = children[i];
            if (isModelRef(model)) {
                var m = model.getModel();
                m && m.patchValue(item);
            }
            else if (isModel(model)) {
                model.patchValue(item);
            }
        }
        if (value.length <= children.length) {
            this.splice(value.length, children.length - value.length);
            return;
        }
        for (var i = children.length; i < value.length; i += 1) {
            var item = value[i];
            this.push(item);
        }
    };
    /**
     * 初始化 `FieldArray` 的值，同时设置 `initialValue`
     * @param values 要设置为初始化值的值
     */
    FieldArrayModel.prototype.initialize = function (values) {
        this.initialValue = Some(values);
        this.children$.next(values.map(this.childFactory));
    };
    /**
     * 添加一批元素到 `FieldArray` 的末尾
     * @param items 待添加的值
     */
    FieldArrayModel.prototype.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var nextChildren = this.children$.getValue().concat(items.map(this.childFactory));
        this.children$.next(nextChildren);
    };
    /**
     * 删除 `FieldArray` 最后的一个元素
     */
    FieldArrayModel.prototype.pop = function () {
        var children = this.children$.getValue().slice();
        var child = children.pop();
        this.children$.next(children);
        return child;
    };
    /**
     * 删除 `FieldArray` 第一个元素
     */
    FieldArrayModel.prototype.shift = function () {
        var children = this.children$.getValue().slice();
        var child = children.shift();
        this.children$.next(children);
        return child;
    };
    /**
     * 在 `FieldArray` 开头添加值
     * @param items 待添加的值·
     */
    FieldArrayModel.prototype.unshift = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var nextChildren = items.map(this.childFactory).concat(this.children$.getValue());
        this.children$.next(nextChildren);
    };
    /**
     * 在 `FieldArray` 的指定位置删除指定数量的元素，并添加指定的新元素
     * @param start 开始删除的元素位置
     * @param deleteCount 删除的元素个数
     * @param items 待添加的元素值
     */
    FieldArrayModel.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            items[_i - 2] = arguments[_i];
        }
        var children = this.children$.getValue().slice();
        var ret = children.splice.apply(children, __spreadArrays([start, deleteCount], items.map(this.childFactory)));
        this.children$.next(children);
        return ret;
    };
    /**
     * 执行 `FieldArray` 的校验
     * @param option 校验的参数
     */
    FieldArrayModel.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        if (option & ValidateOption.IncludeChildrenRecursively) {
            return Promise.all(this.children$
                .getValue()
                .map(function (it) { return it.validate(option); })
                .concat(this.triggerValidate(option)));
        }
        return this.triggerValidate(option);
    };
    /**
     * 是否 `FieldArray` 所有元素都没有修改过
     */
    FieldArrayModel.prototype.pristine = function () {
        var children = this.children$.getValue();
        for (var i = 0; i < children.length; i += 1) {
            var child = children[i];
            if (child.dirty()) {
                return false;
            }
        }
        return true;
    };
    /**
     * 是否 `FieldArray` 中任意元素有过修改
     *
     * `dirty === !pristine`
     */
    FieldArrayModel.prototype.dirty = function () {
        return !this.pristine();
    };
    /**
     * 是否 `FieldArray` 任意元素被 touch 过
     */
    FieldArrayModel.prototype.touched = function () {
        var children = this.children$.getValue();
        for (var i = 0; i < children.length; i += 1) {
            var child = children[i];
            if (child.touched()) {
                return true;
            }
        }
        return false;
    };
    return FieldArrayModel;
}(BasicModel));
FieldArrayModel.prototype[FIELD_ARRAY_ID] = true;
function isFieldArrayModel(maybeModel) {
    return !!(maybeModel && maybeModel[FIELD_ARRAY_ID]);
}
export { FieldArrayModel, isFieldArrayModel };
