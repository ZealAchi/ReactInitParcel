import { BasicModel, IModel } from './basic';
import { ValidateOption, IMaybeError } from '../validate';
import { Maybe } from '../maybe';
import { BehaviorSubject } from 'rxjs';
declare const REF_ID: unique symbol;
declare class ModelRef<Value, Parent extends BasicModel<any>, Model extends BasicModel<Value> = BasicModel<Value>> implements IModel<Value | null> {
    initialValue: Maybe<Value>;
    private owner;
    /**
     * @internal
     */
    [REF_ID]: boolean;
    /**
     * @internal
     */
    patchedValue: Maybe<Value>;
    model$: BehaviorSubject<Model | null>;
    /**
     * @internal
     */
    constructor(current: Model | null | undefined, initialValue: Maybe<Value>, owner: Parent | null);
    getModel(): Model | null;
    setModel(model: Model | null): void;
    getParent(): Parent | null;
    dirty(): boolean;
    touched(): boolean;
    validate(option?: ValidateOption): Promise<void>;
    getRawValue(): Value | null;
    pristine(): boolean;
    valid(): boolean;
    get error(): IMaybeError<Value>;
    set error(error: IMaybeError<Value>);
    patchValue(value: Value): void;
    initialize(value: Value): void;
    reset(): void;
    clear(): void;
}
declare function isModelRef<T, P extends BasicModel<any>, M extends BasicModel<T> = BasicModel<T>>(maybeModelRef: any): maybeModelRef is ModelRef<T, P, M>;
export { ModelRef, isModelRef };
//# sourceMappingURL=ref.d.ts.map