import { Subject, BehaviorSubject } from 'rxjs';
import { ErrorSubscriber, validate } from '../validate';
import { switchMap } from 'rxjs/operators';
import { None } from '../maybe';
var uniqueId = 0;
var MODEL_ID = Symbol('model');
var BasicModel = /** @class */ (function () {
    function BasicModel() {
        /**
         * @internal
         */
        this.validate$ = new Subject();
        /**
         * @internal
         *
         * 校验规则数组
         */
        this.validators = [];
        /**
         * @internal
         *
         * 初始值
         */
        this.initialValue = None();
        /** @internal */
        this.owner = null;
        /** @internal */
        this.form = null;
        /**
         * 组件 unmount 的时候删除 model
         */
        this.destroyOnUnmount = false;
        this.error$ = new BehaviorSubject(null);
        this.id = "model-" + uniqueId;
        uniqueId += 1;
        this.validate$.pipe(switchMap(validate(this))).subscribe(new ErrorSubscriber(this));
    }
    BasicModel.prototype.triggerValidate = function (option) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.validate$.next({
                option: option,
                resolve: resolve,
                reject: reject,
            });
        });
    };
    Object.defineProperty(BasicModel.prototype, "error", {
        /**
         * 获取 model 上的错误信息
         */
        get: function () {
            return this.error$.getValue();
        },
        /**
         * 设置 model 上的错误信息
         */
        set: function (error) {
            this.error$.next(error);
        },
        enumerable: true,
        configurable: true
    });
    return BasicModel;
}());
BasicModel.prototype[MODEL_ID] = true;
function isModel(maybeModel) {
    return !!(maybeModel && maybeModel[MODEL_ID]);
}
export { BasicModel, isModel };
