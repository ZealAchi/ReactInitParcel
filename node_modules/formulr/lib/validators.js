import Decimal from 'big.js';
var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
function isEmptyInputValue(value) {
    // we don't check for string here so it also works with arrays
    return value == null || value.length === 0;
}
export var SYMBOL_REQUIRED = Symbol('required');
/**
 * 限制一个值的最小值
 * @param limit 允许的最小值（包含自身）
 * @param message 错误信息
 */
export function min(limit, message) {
    return function min(value) {
        if (isEmptyInputValue(value)) {
            return null;
        }
        try {
            var decimal = new Decimal(value);
            if (decimal.lt(limit)) {
                return {
                    name: 'min',
                    actual: value,
                    limit: limit,
                    message: message,
                };
            }
        }
        catch (error) {
            return {
                name: 'min',
                actual: value,
                limit: limit,
                message: message,
            };
        }
        return null;
    };
}
/**
 * 限制一个值的最大值
 * @param limit 允许的最大值（包含自身）
 * @param message 错误信息
 */
export function max(limit, message) {
    return function max(value) {
        if (isEmptyInputValue(value)) {
            return null;
        }
        try {
            var decimal = new Decimal(value);
            if (decimal.gt(limit)) {
                return {
                    name: 'max',
                    actual: value,
                    limit: limit,
                    message: message,
                };
            }
        }
        catch (error) {
            return {
                name: 'max',
                actual: value,
                limit: limit,
                message: message,
            };
        }
        return null;
    };
}
/**
 * 限制一个值不为 `null`/`undefined`，并且长度不为零
 * @param message 错误信息
 */
export function required(message) {
    function required(input) {
        return isEmptyInputValue(input)
            ? {
                name: 'required',
                message: message,
                actual: input,
            }
            : null;
    }
    required.$$id = SYMBOL_REQUIRED;
    return required;
}
/**
 * 限制一个值必须为 `true`
 * @param message 错误信息
 */
export function requiredTrue(message) {
    function requiredTrue(input) {
        return input === true
            ? null
            : {
                name: 'requiredTrue',
                message: message,
                expect: true,
                actual: input,
            };
    }
    return requiredTrue;
}
/**
 * 限制一个值是合法的 email 地址，规则和 Angular 使用的一致
 * @param message 错误信息
 */
export function email(message) {
    function email(input) {
        return EMAIL_REGEXP.test(input)
            ? null
            : {
                name: 'email',
                message: message,
                actual: input,
            };
    }
    return email;
}
/**
 * 限制一个值的最小长度，通过 `.length` 属性判断
 * @param length 允许的最小长度（包含自身）
 * @param message 错误信息
 */
export function minLength(length, message) {
    function minLength(input) {
        return input.length < length
            ? {
                name: 'minLength',
                message: message,
                actual: input,
                limit: length,
            }
            : null;
    }
    return minLength;
}
/**
 * 限制一个值的最大长度，通过 `.length` 属性判断
 * @param length 允许的最大长度（包含自身）
 * @param message 错误信息
 */
export function maxLength(length, message) {
    function maxLength(input) {
        return input.length > length
            ? {
                name: 'maxLength',
                message: message,
                actual: input,
                limit: length,
            }
            : null;
    }
    return maxLength;
}
/**
 * 限制一个字符串必须匹配一个正则表达式
 * @param regexp 要匹配的正则表达式
 * @param message 错误信息
 */
export function pattern(regexp, message) {
    function pattern(input) {
        return regexp.test(input)
            ? null
            : {
                name: 'pattern',
                message: message,
                actual: input,
                pattern: regexp,
            };
    }
    return pattern;
}
