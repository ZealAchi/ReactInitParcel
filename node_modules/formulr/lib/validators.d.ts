import { ISyncValidator, IMaybeError } from './validate';
export declare const SYMBOL_REQUIRED: unique symbol;
/**
 * 限制一个值的最小值
 * @param limit 允许的最小值（包含自身）
 * @param message 错误信息
 */
export declare function min(limit: number | string, message?: string): (value: string | number) => IMaybeError<string | number>;
/**
 * 限制一个值的最大值
 * @param limit 允许的最大值（包含自身）
 * @param message 错误信息
 */
export declare function max(limit: number, message?: string): (value: string | number) => IMaybeError<string | number>;
/**
 * 限制一个值不为 `null`/`undefined`，并且长度不为零
 * @param message 错误信息
 */
export declare function required(message?: string): ISyncValidator<any>;
/**
 * 限制一个值必须为 `true`
 * @param message 错误信息
 */
export declare function requiredTrue(message?: string): ISyncValidator<boolean>;
/**
 * 限制一个值是合法的 email 地址，规则和 Angular 使用的一致
 * @param message 错误信息
 */
export declare function email(message?: string): ISyncValidator<string>;
export interface IWithLength {
    length: number;
}
/**
 * 限制一个值的最小长度，通过 `.length` 属性判断
 * @param length 允许的最小长度（包含自身）
 * @param message 错误信息
 */
export declare function minLength<T extends IWithLength>(length: number, message?: string): ISyncValidator<T>;
/**
 * 限制一个值的最大长度，通过 `.length` 属性判断
 * @param length 允许的最大长度（包含自身）
 * @param message 错误信息
 */
export declare function maxLength<T extends IWithLength>(length: number, message?: string): ISyncValidator<T>;
/**
 * 限制一个字符串必须匹配一个正则表达式
 * @param regexp 要匹配的正则表达式
 * @param message 错误信息
 */
export declare function pattern(regexp: RegExp, message?: string): ISyncValidator<string>;
//# sourceMappingURL=validators.d.ts.map