import { __extends } from "tslib";
import { BasicBuilder } from './basic';
import { FieldSetModel } from '../models';
import { Some, None, or } from '../maybe';
var FieldSetBuilder = /** @class */ (function (_super) {
    __extends(FieldSetBuilder, _super);
    function FieldSetBuilder(_childBuilders) {
        var _this = _super.call(this) || this;
        _this._childBuilders = _childBuilders;
        return _this;
    }
    FieldSetBuilder.prototype.build = function (defaultValues) {
        var defaults = or(defaultValues, {});
        var children = {};
        var childKeys = Object.keys(this._childBuilders);
        for (var i = 0; i < childKeys.length; i += 1) {
            var key = childKeys[i];
            var childBuilder = this._childBuilders[key];
            if (key in defaults) {
                children[key] = childBuilder.build(Some(defaults[key]));
            }
            else {
                children[key] = childBuilder.build(None());
            }
        }
        var model = new FieldSetModel(children);
        model.validators = this._validators;
        return model;
    };
    return FieldSetBuilder;
}(BasicBuilder));
export { FieldSetBuilder };
