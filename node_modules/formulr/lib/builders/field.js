import { __extends } from "tslib";
import { FieldModel } from '../models';
import { BasicBuilder } from './basic';
import { or } from '../maybe';
import { id } from '../utils';
var FieldBuilder = /** @class */ (function (_super) {
    __extends(FieldBuilder, _super);
    function FieldBuilder(_defaultValue) {
        var _this = _super.call(this) || this;
        _this._defaultValue = _defaultValue;
        _this._normalizeBeforeSubmit = id;
        return _this;
    }
    FieldBuilder.prototype.normalizeBeforeSubmit = function (normalizeBeforeSubmit) {
        this._normalizeBeforeSubmit = normalizeBeforeSubmit;
    };
    FieldBuilder.prototype.build = function (defaultValue) {
        var model = new FieldModel(or(defaultValue, this._defaultValue));
        model.validators = this._validators;
        model.normalizeBeforeSubmit = this._normalizeBeforeSubmit;
        return model;
    };
    return FieldBuilder;
}(BasicBuilder));
export { FieldBuilder };
