'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _addEventListener = require('rc-util/lib/Dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _PickItem = require('./PickItem');

var _PickItem2 = _interopRequireDefault(_PickItem);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Pickable Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Pickable = function (_React$Component) {
  _inherits(Pickable, _React$Component);

  function Pickable(props) {
    _classCallCheck(this, Pickable);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      showToggle: false,
      foldItems: props.defaultfoldItems
    };
    _this.adjustToggleMore = _this.adjustToggleMore.bind(_this);
    return _this;
  }

  Pickable.prototype.componentDidMount = function componentDidMount() {
    if (this.props.enableFold) {
      this.adjustToggleMore();
      this.toggleListener = (0, _addEventListener2["default"])(window, 'resize', this.adjustToggleMore);
    }
  };

  Pickable.prototype.componentDidUpdate = function componentDidUpdate() {
    if (this.props.enableFold) {
      this.adjustToggleMore();
    }
  };

  Pickable.prototype.adjustToggleMore = function adjustToggleMore() {
    if (!this.props.enableFold) {
      return;
    }
    if (this.rootWidth !== undefined && this.rootWidth === parseInt(this.root.clientWidth, 10)) {
      return;
    }
    var itemsInner = this.itemsInner;
    this.rootWidth = this.root.clientWidth;
    if (itemsInner && itemsInner.clientHeight >= 40 * this.props.maxLines) {
      this.setState({
        showToggle: true
      });
    } else {
      this.setState({
        showToggle: false
      });
    }
  };

  Pickable.prototype.handleItemClick = function handleItemClick(value) {
    var me = this;
    if (!me.props.multiple) {
      me.props.onChange(me.props.simpleValueInSingleMode ? value : [value], value);
      return;
    }
    var values = me.props.value.slice(0);
    var index = values.indexOf(value);
    if (index !== -1) {
      values.splice(index, 1);
      me.props.onChange(values, value);
    } else {
      values.push(value);
      me.props.onChange(values, value);
    }
  };

  Pickable.prototype.handleToggleClick = function handleToggleClick() {
    this.setState({
      foldItems: !this.state.foldItems
    });
  };

  Pickable.prototype.renderChildren = function renderChildren() {
    var _this2 = this;

    var me = this;
    var state = this.state;
    var _me$props = me.props,
        prefixCls = _me$props.prefixCls,
        type = _me$props.type,
        children = _me$props.children,
        value = _me$props.value,
        max = _me$props.max,
        multiple = _me$props.multiple,
        maxLines = _me$props.maxLines;

    var newValue = Array.isArray(value) ? value : [value];
    var rendered = _react2["default"].Children.map(children, function (child) {
      return _react2["default"].cloneElement(child, {
        active: newValue.indexOf(child.props.value) !== -1,
        prefixCls: prefixCls + '-item',
        multiple: multiple,
        type: type,
        jsxmax: max,
        onClick: me.handleItemClick.bind(me)
      });
    });
    var itemsStyle = {};
    if (state.showToggle && state.foldItems) {
      itemsStyle.height = 36 * maxLines;
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])(prefixCls + '-items', _defineProperty({}, prefixCls + '-items__fold', state.showToggle && state.foldItems)),
        style: itemsStyle
      },
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-items-inner', ref: function ref(c) {
            _this2.itemsInner = c;
          } },
        rendered
      )
    );
  };

  Pickable.prototype.renderToggleMore = function renderToggleMore() {
    var _this3 = this;

    if (!this.state.showToggle) {
      return null;
    }
    var _props = this.props,
        prefixCls = _props.prefixCls,
        locale = _props.locale;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])(prefixCls + '-toggle-more', _defineProperty({}, prefixCls + '-toggle-more__fold', this.state.foldItems)),
        onClick: function onClick() {
          _this3.handleToggleClick();
        }
      },
      _locale2["default"][locale][!this.state.foldItems ? 'fold' : 'unfold'],
      _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'bottom', className: prefixCls + '-toggle-more-icon', usei: true })
    );
  };

  Pickable.prototype.render = function render() {
    var _classnames3,
        _this4 = this;

    var me = this;
    var _me$props2 = me.props,
        prefixCls = _me$props2.prefixCls,
        className = _me$props2.className,
        locale = _me$props2.locale;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames5["default"])((_classnames3 = {}, _defineProperty(_classnames3, '' + prefixCls, true), _defineProperty(_classnames3, className, !!className), _defineProperty(_classnames3, prefixCls + '-en', locale === 'en-us'), _classnames3)),
        ref: function ref(c) {
          _this4.root = c;
        }
      },
      me.renderChildren(),
      me.renderToggleMore()
    );
  };

  return Pickable;
}(_react2["default"].Component);

Pickable.defaultProps = {
  prefixCls: 'kuma-pickable',
  value: [],
  type: 'normal',
  multiple: true,
  simpleValueInSingleMode: false,
  enableFold: false,
  defaultfoldItems: true,
  className: undefined,
  max: undefined,
  locale: 'zh-cn',
  onChange: function onChange() {},
  maxLines: 1
};

// http://facebook.github.io/react/docs/reusable-components.html
Pickable.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  locale: _propTypes2["default"].string,
  value: _propTypes2["default"].oneOfType([_propTypes2["default"].array, _propTypes2["default"].number, _propTypes2["default"].string]),
  multiple: _propTypes2["default"].bool,
  enableFold: _propTypes2["default"].bool,
  defaultfoldItems: _propTypes2["default"].bool,
  onChange: _propTypes2["default"].func,
  type: _propTypes2["default"].oneOf(['normal', 'simple', 'hook', 'simpleHook']),
  max: _propTypes2["default"].number,
  maxLines: _propTypes2["default"].number,
  simpleValueInSingleMode: _propTypes2["default"].bool
};

Pickable.displayName = 'Pickable';

Pickable.Item = _PickItem2["default"];

exports["default"] = Pickable;
module.exports = exports['default'];