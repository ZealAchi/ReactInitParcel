'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var PickItem = function (_React$Component) {
  _inherits(PickItem, _React$Component);

  function PickItem() {
    _classCallCheck(this, PickItem);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  PickItem.prototype.handleClick = function handleClick(value) {
    if (!this.props.disabled) {
      this.props.onClick(value);
    }
  };

  PickItem.prototype.renderTips = function renderTips() {
    var me = this;
    var _me$props = me.props,
        type = _me$props.type,
        prefixCls = _me$props.prefixCls,
        number = _me$props.number;

    if (type === 'simple' && number !== undefined) {
      return _react2["default"].createElement(
        'span',
        { className: prefixCls + '-num' },
        number
      );
    } else if (type === 'hook' || type === 'simpleHook') {
      return _react2["default"].createElement('i', { className: prefixCls + '-icon-hook' });
    }
    return null;
  };

  PickItem.prototype.render = function render() {
    var _classnames;

    var me = this;
    var _me$props2 = me.props,
        prefixCls = _me$props2.prefixCls,
        children = _me$props2.children,
        active = _me$props2.active,
        value = _me$props2.value,
        disabled = _me$props2.disabled,
        type = _me$props2.type,
        multiple = _me$props2.multiple;

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, '' + prefixCls, true), _defineProperty(_classnames, 'active', active), _defineProperty(_classnames, 'disabled', disabled), _defineProperty(_classnames, 'multiple-active', active && multiple), _defineProperty(_classnames, prefixCls + '-simple', type === 'simple'), _defineProperty(_classnames, prefixCls + '-hook', type === 'hook'), _defineProperty(_classnames, prefixCls + '-hook-simple', type === 'simpleHook'), _classnames)), onClick: me.handleClick.bind(me, value)
      },
      children,
      me.renderTips()
    );
  };

  return PickItem;
}(_react2["default"].Component);

PickItem.defaultProps = {
  disabled: false
};

PickItem.propTypes = {
  prefixCls: _propTypes2["default"].string,
  active: _propTypes2["default"].bool,
  disabled: _propTypes2["default"].bool,
  multiple: _propTypes2["default"].bool,
  value: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string]),
  onClick: _propTypes2["default"].func,
  // only useful in simple type now.
  number: _propTypes2["default"].number,
  type: _propTypes2["default"].oneOf(['normal', 'simple', 'hook', 'simpleHook'])
};

PickItem.displayName = 'PickItem';

exports["default"] = PickItem;
module.exports = exports['default'];