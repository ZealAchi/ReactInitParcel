'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Sticky Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author taoqili
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017-2018, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Sticky = function (_React$Component) {
  _inherits(Sticky, _React$Component);

  function Sticky(props) {
    _classCallCheck(this, Sticky);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.scroll = function ($stickyer) {
      var _this$props = _this.props,
          offsetTop = _this$props.offsetTop,
          onChange = _this$props.onChange;

      var rect = $stickyer.getBoundingClientRect();
      var top = rect.top,
          height = rect.height,
          width = rect.width;

      if (_this.isSticky && top >= offsetTop || !_this.isSticky && top < offsetTop) {
        onChange(top < offsetTop);
      }
      _this.setState({
        sticky: top < offsetTop,
        placeholderHeight: height,
        width: width
      }, function () {
        _this.isSticky = top < offsetTop;
      });
    };

    _this.onScroll = function () {
      var $stickyer = (0, _reactDom.findDOMNode)(_this.stickyer);
      _this.scroll($stickyer);
    };

    _this.state = {
      sticky: false,
      placeholderHeight: 0,
      width: '100%'
    };
    return _this;
  }

  Sticky.prototype.componentDidMount = function componentDidMount() {
    var container = this.props.container;

    container().addEventListener('scroll', this.onScroll);
  };

  Sticky.prototype.componentWillUnmount = function componentWillUnmount() {
    var container = this.props.container;

    container().removeEventListener('scroll', this.onScroll);
  };

  Sticky.prototype.render = function render() {
    var _this2 = this,
        _classnames;

    var _state = this.state,
        sticky = _state.sticky,
        placeholderHeight = _state.placeholderHeight,
        width = _state.width;
    var _props = this.props,
        prefixCls = _props.prefixCls,
        className = _props.className,
        offsetTop = _props.offsetTop;

    return _react2["default"].createElement(
      'div',
      {
        ref: function ref(c) {
          _this2.stickyer = c;
        },
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls, prefixCls), _defineProperty(_classnames, className, className), _classnames))
      },
      _react2["default"].createElement('div', {
        className: (0, _classnames3["default"])(prefixCls + '-placeholder', { sticky: sticky }),
        style: {
          height: placeholderHeight
        }
      }),
      _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames3["default"])(prefixCls + '-content', {
            sticky: sticky
          }),
          style: {
            top: offsetTop,
            width: width
          }
        },
        _react2["default"].createElement(
          'div',
          null,
          this.props.children
        )
      )
    );
  };

  return Sticky;
}(_react2["default"].Component);

Sticky.displayName = 'Sticky';
Sticky.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  offsetTop: _propTypes2["default"].number,
  onChange: _propTypes2["default"].func,
  container: _propTypes2["default"].func
};
Sticky.defaultProps = {
  prefixCls: 'uxcore-sticky',
  className: '',
  offsetTop: 0,
  onChange: function onChange() {},
  container: function container() {
    return document;
  }
};
exports["default"] = Sticky;
module.exports = exports['default'];