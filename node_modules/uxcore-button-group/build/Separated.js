'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreMenu = require('uxcore-menu');

var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/**
 * only consider the button style and how to collapse
 */

var Separated = function (_React$Component) {
  _inherits(Separated, _React$Component);

  function Separated(props) {
    _classCallCheck(this, Separated);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      dropdownVisible: false,
      lastChildrenCount: _react2["default"].Children.count(props.children),
      lastMaxLength: props.maxLength
    };
    _this.handleDropdownVisibleChange = _this.handleDropdownVisibleChange.bind(_this);
    _this.handleMoreClick = _this.handleMoreClick.bind(_this);
    _this.refCallback = [];
    return _this;
  }

  Separated.prototype.componentDidUpdate = function componentDidUpdate() {
    var _props = this.props,
        children = _props.children,
        maxLength = _props.maxLength;

    if (this.state.dropdownVisible && parseInt(maxLength, 10) === 1 && _react2["default"].Children.count(children) > 1) {
      var dropdownDOMNode = this.dropdownInstance.getPopupDomNode();
      /* eslint-disable react/no-find-dom-node */
      var triggerDOMnode = _reactDom2["default"].findDOMNode(this.triggerInstance);
      /* eslint-enable react/no-find-dom-node */
      if (dropdownDOMNode) {
        dropdownDOMNode.style.minWidth = (triggerDOMnode || this.triggerInstance).offsetWidth + 'px';
      }
    }
  };

  Separated.prototype.saveRef = function saveRef(refName) {
    var me = this;
    if (me.refCallback[refName]) {
      return me.refCallback[refName];
    }
    me.refCallback[refName] = function (c) {
      me[refName] = c;
      return false;
    };
    return me.refCallback[refName];
  };

  Separated.prototype.handleDropdownVisibleChange = function handleDropdownVisibleChange(visible) {
    var me = this;
    me.setState({
      dropdownVisible: visible
    });
  };

  Separated.prototype.handleMenuItemClick = function handleMenuItemClick(action, e) {
    if (action.props.disabled) {
      return;
    }
    if (action.props.onClick) {
      action.props.onClick(e);
    }
    this.setState({
      dropdownVisible: false
    });
  };

  Separated.prototype.handleMoreClick = function handleMoreClick(e) {
    e.preventDefault();
    var me = this;
    me.setState({
      dropdownVisible: !me.state.dropdownVisible
    });
  };

  Separated.prototype.renderItem = function renderItem(item, index) {
    var _classnames;

    var me = this;
    var _me$props = me.props,
        actionType = _me$props.actionType,
        prefixCls = _me$props.prefixCls,
        size = _me$props.size;

    var itemProps = {
      key: index,
      type: item.props.type,
      ghost: item.props.ghost,
      danger: item.props.danger,
      onClick: item.props.disabled ? function () {} : item.props.onClick,
      className: (0, _classnames7["default"])((_classnames = {}, _defineProperty(_classnames, item.props.className, !!item.props.className), _defineProperty(_classnames, prefixCls + '-item', true), _defineProperty(_classnames, prefixCls + '-item-first', index === 0), _classnames))
    };
    if (actionType === 'button') {
      return _react2["default"].createElement(
        _uxcoreButton2["default"],
        _extends({}, itemProps, {
          size: size,
          disabled: !!item.props.disabled
        }),
        item.props.children
      );
    }
    return _react2["default"].createElement(
      'a',
      _extends({}, itemProps, {
        className: (0, _classnames7["default"])(itemProps.className, {
          disabled: !!item.props.disabled
        })
      }),
      item.props.children
    );
  };

  Separated.prototype.renderMore = function renderMore(actions) {
    var _classnames2;

    if (actions.length === 0) {
      return null;
    }
    var me = this;
    var menu = _react2["default"].createElement(
      _uxcoreMenu2["default"],
      null,
      actions.map(function (action, index) {
        return _react2["default"].createElement(
          _uxcoreMenu2["default"].Item,
          { key: index, disabled: !!action.props.disabled },
          _react2["default"].createElement(
            'a',
            { onClick: me.handleMenuItemClick.bind(me, action) },
            action.props.children
          )
        );
      })
    );

    var offsetY = 0;
    var dropdownOptions = {
      key: 'icon',
      overlay: menu,
      trigger: ['click'],
      align: {
        offset: [0, offsetY]
      },
      visible: me.state.dropdownVisible,
      overlayClassName: (0, _classnames7["default"])((_classnames2 = {}, _defineProperty(_classnames2, me.props.prefixCls + '-more-dropdown', true), _defineProperty(_classnames2, me.props.prefixCls + '-more-link-dropdown', me.props.actionType === 'link'), _classnames2)),
      onVisibleChange: me.handleDropdownVisibleChange
    };
    var content = _react2["default"].createElement(
      'span',
      null,
      _react2["default"].createElement(
        'span',
        { className: me.props.prefixCls + '-more-text' },
        _i18n2["default"][me.props.locale].more
      ),
      _react2["default"].createElement('i', {
        className: (0, _classnames7["default"])(_defineProperty({
          'kuma-icon': true,
          'kuma-icon-triangle-down': !me.state.dropdownVisible,
          'kuma-icon-triangle-up': me.state.dropdownVisible
        }, me.props.prefixCls + '-collapsed-icon-active', me.state.dropdownVisible))
      })
    );
    var triggerClassName = (0, _classnames7["default"])(me.props.prefixCls + '-item', me.props.prefixCls + '-item-more');
    if (me.props.actionType === 'button') {
      return _react2["default"].createElement(
        _uxcoreDropdown2["default"],
        dropdownOptions,
        _react2["default"].createElement(
          _uxcoreButton2["default"],
          { type: 'secondary', size: me.props.size, className: triggerClassName },
          content
        )
      );
    }
    return _react2["default"].createElement(
      _uxcoreDropdown2["default"],
      dropdownOptions,
      _react2["default"].createElement(
        'a',
        { className: triggerClassName, onClick: me.handleMoreClick },
        content
      )
    );
  };

  Separated.prototype.renderHoverMenu = function renderHoverMenu() {
    var _classnames4;

    var me = this;
    var _me$props2 = me.props,
        children = _me$props2.children,
        actionType = _me$props2.actionType,
        prefixCls = _me$props2.prefixCls,
        size = _me$props2.size;

    var trigger = void 0;
    var options = [];
    _react2["default"].Children.forEach(children, function (child, index) {
      if (index === 0) {
        var triggerContent = _react2["default"].createElement(
          'span',
          null,
          _react2["default"].createElement(
            'span',
            { className: me.props.prefixCls + '-more-text' },
            child.props.children
          ),
          _react2["default"].createElement('i', {
            className: (0, _classnames7["default"])({
              'kuma-icon': true,
              'kuma-icon-triangle-down': !me.state.dropdownVisible,
              'kuma-icon-triangle-up': me.state.dropdownVisible
            })
          })
        );
        if (actionType === 'button') {
          trigger = _react2["default"].createElement(
            _uxcoreButton2["default"],
            {
              type: child.props.type,
              size: size,
              ref: me.saveRef('triggerInstance')
            },
            triggerContent
          );
        } else {
          trigger = _react2["default"].createElement(
            'a',
            { className: prefixCls + '-item', ref: me.saveRef('triggerInstance') },
            triggerContent
          );
        }
      }
      options.push(_react2["default"].createElement(
        _uxcoreMenu2["default"].Item,
        { key: index, disabled: !!child.props.disabled },
        _react2["default"].createElement(
          'a',
          {
            onClick: me.handleMenuItemClick.bind(me, child)
          },
          child.props.children
        )
      ));
    });
    var menu = _react2["default"].createElement(
      _uxcoreMenu2["default"],
      null,
      options
    );
    var offsetYButtonMap = {
      small: -33,
      medium: -37,
      large: -41
    };
    var offsetY = actionType === 'button' ? offsetYButtonMap[size] : -30;

    var dropdownOptions = {
      key: 'icon',
      overlay: menu,
      transitionName: '',
      ref: me.saveRef('dropdownInstance'),
      trigger: ['hover'],
      align: {
        offset: [0, offsetY]
      },
      visible: me.state.dropdownVisible,
      overlayClassName: (0, _classnames7["default"])((_classnames4 = {}, _defineProperty(_classnames4, me.props.prefixCls + '-more-dropdown', true), _defineProperty(_classnames4, me.props.prefixCls + '-more-dropdown-' + size, actionType === 'button'), _defineProperty(_classnames4, me.props.prefixCls + '-more-link-dropdown', actionType === 'link'), _classnames4)),
      onVisibleChange: me.handleDropdownVisibleChange
    };

    return _react2["default"].createElement(
      _uxcoreDropdown2["default"],
      dropdownOptions,
      trigger
    );
  };

  Separated.prototype.render = function render() {
    var me = this;
    var _me$props3 = me.props,
        children = _me$props3.children,
        maxLength = _me$props3.maxLength,
        actionType = _me$props3.actionType,
        prefixCls = _me$props3.prefixCls,
        className = _me$props3.className;

    var buttons = [];
    var options = [];
    var rootClassName = (0, _classnames7["default"])(prefixCls, _defineProperty({}, className, !!className));
    if (parseInt(maxLength, 10) === 1 && _react2["default"].Children.count(children) > 1) {
      return _react2["default"].createElement(
        'div',
        { className: rootClassName },
        me.renderHoverMenu()
      );
    }
    if (_react2["default"].Children.count(children) <= parseInt(maxLength, 10)) {
      _react2["default"].Children.forEach(children, function (item, index) {
        if (index !== 0 && actionType === 'link') {
          buttons.push(_react2["default"].createElement(
            'span',
            { key: 'button' + index, className: me.props.prefixCls + '-split-line' },
            '|'
          ));
        }
        buttons.push(me.renderItem(item, index));
      });
    } else {
      _react2["default"].Children.forEach(children, function (item, index) {
        if (index < parseInt(maxLength, 10) - 1) {

          buttons.push(me.renderItem(item, index));
          if (actionType === 'link') {
            buttons.push(_react2["default"].createElement(
              'span',
              { key: 'button' + index, className: me.props.prefixCls + '-split-line' },
              '|'
            ));
          }
        } else {
          options.push(item);
        }
      });
    }

    return _react2["default"].createElement(
      'div',
      {
        className: rootClassName
      },
      buttons,
      me.renderMore(options)
    );
  };

  return Separated;
}(_react2["default"].Component);

Separated.propTypes = {
  children: _propTypes2["default"].any,
  locale: _propTypes2["default"].string,
  maxLength: _propTypes2["default"].number,
  onClick: _propTypes2["default"].func,
  size: _propTypes2["default"].string
};
Separated.defaultProps = {
  maxLength: 3,
  locale: 'zh-cn',
  onClick: function onClick() {},
  actionType: 'button',
  size: 'medium'
};

Separated.getDerivedStateFromProps = function (props, state) {
  var childrenCount = _react2["default"].Children.count(props.children);
  if (childrenCount !== state.lastChildrenCount || props.maxLength !== state.lastMaxLength) {
    var newState = {
      lastChildrenCount: childrenCount,
      lastMaxLength: props.maxLength
    };
    if (_react2["default"].Children.count(props.children) < parseInt(props.maxLength, 10)) {
      newState.dropdownVisible = false;
    }
    return newState;
  }
  return null;
};

Separated.displayName = 'Separated';

(0, _reactLifecyclesCompat.polyfill)(Separated);

exports["default"] = Separated;
module.exports = exports['default'];