'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Separated = require('./Separated');

var _Separated2 = _interopRequireDefault(_Separated);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ButtonGroup Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var ButtonGroup = function (_React$Component) {
  _inherits(ButtonGroup, _React$Component);

  function ButtonGroup() {
    _classCallCheck(this, ButtonGroup);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  ButtonGroup.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        separated = _props.separated,
        prefixCls = _props.prefixCls,
        className = _props.className,
        type = _props.type,
        size = _props.size;

    var tmpChildren = children && children.splice ? children : [children];
    var newChildren = _react2["default"].Children.map(tmpChildren.filter(function (child) {
      return child !== null;
    }), function (child) {
      return _react2["default"].cloneElement(child, {
        type: separated ? child.props.type : type,
        size: size
      });
    });
    if (separated) {
      return _react2["default"].createElement(
        _Separated2["default"],
        _extends({}, this.props, { prefixCls: prefixCls + '-separated' }),
        newChildren
      );
    }

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])(prefixCls, _defineProperty({}, className, !!className))
      },
      newChildren
    );
  };

  return ButtonGroup;
}(_react2["default"].Component);

ButtonGroup.propTypes = {
  children: _propTypes2["default"].node,
  separated: _propTypes2["default"].bool,
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  locale: _propTypes2["default"].string,
  type: _propTypes2["default"].string,
  size: _propTypes2["default"].string
};
ButtonGroup.defaultProps = {
  prefixCls: 'kuma-button-group',
  locale: 'zh-cn',
  type: 'outline',
  size: 'medium'
};


ButtonGroup.displayName = 'ButtonGroup';

exports["default"] = ButtonGroup;
module.exports = exports['default'];