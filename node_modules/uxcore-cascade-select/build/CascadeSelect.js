'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _uxcoreMenu = require('uxcore-menu');

var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _CascadeSubmenu = require('./CascadeSubmenu');

var _CascadeSubmenu2 = _interopRequireDefault(_CascadeSubmenu);

var _SuperComponent2 = require('./SuperComponent');

var _SuperComponent3 = _interopRequireDefault(_SuperComponent2);

var _Search = require('./Search');

var _Search2 = _interopRequireDefault(_Search);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /*
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * File Created: 2019-04-04 20:08:56
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Author: changming.zy (changming.zy@alibaba-inc.com)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2019 Alibaba Group
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
/**
* CascadeSelect Component for uxcore
* @author changming.zy
*
* Copyright 2015-2017, Uxcore Team, Alinw.
* All rights reserved.
*/


var find = _util2["default"].find,
    getArrayLeafItemContains = _util2["default"].getArrayLeafItemContains,
    deepCopy = _util2["default"].deepCopy,
    getOptions = _util2["default"].getOptions,
    stringify = _util2["default"].stringify,
    searchArrayOfOptions = _util2["default"].searchArrayOfOptions,
    isEmptyArray = _util2["default"].isEmptyArray;


var noop = function noop() {};

function getDomWidth(dom) {
  if (dom) {
    return parseFloat(getComputedStyle(dom).width);
  }
  return 0;
}

var CascadeSelect = function (_SuperComponent) {
  _inherits(CascadeSelect, _SuperComponent);

  function CascadeSelect(props) {
    _classCallCheck(this, CascadeSelect);

    var _this = _possibleConstructorReturn(this, _SuperComponent.call(this, props));

    _this.onSubmenuItemClick = function (key, index, selectedOption, hasChildren) {
      var _this$state = _this.state,
          value = _this$state.value,
          selectedOptions = _this$state.selectedOptions;
      var _this$props = _this.props,
          changeOnSelect = _this$props.changeOnSelect,
          cascadeSize = _this$props.cascadeSize,
          miniMode = _this$props.miniMode,
          onSelect = _this$props.onSelect;
      var showSubMenu = _this.state.showSubMenu;

      var hideSubmenu = false;
      var newValue = value.slice(0, index);
      newValue.push(key);
      var newSelectedOptions = selectedOptions.slice(0, index);
      newSelectedOptions.push(selectedOption);

      if (!miniMode) {
        // 如果展示风格为复杂风格，则点击OK才进行onChange回调
        _this.newValue = newValue;
        _this.newSelectedOptions = newSelectedOptions;
      } else {
        _this.onValueChange(newValue, newSelectedOptions);
      }

      var displayValue = newValue;
      if (!miniMode) {
        displayValue = [];
      }
      _this.setState({
        value: newValue,
        selectedOptions: newSelectedOptions,
        inputValue: null
      });
      if (onSelect && !hasChildren && index + 1 < cascadeSize) {
        if (!changeOnSelect) {
          displayValue = [];
        }
        _this.setState({
          displayValue: displayValue
        });
        _this.fetchOptions(newValue, key, index + 1);
      } else {
        if (!hasChildren || index + 1 >= cascadeSize) {
          if (miniMode) {
            hideSubmenu = true;
            showSubMenu = false;
          }
        }
        // 如果还没选完整,displayValue置空
        if (!(changeOnSelect || hideSubmenu || newValue.length >= cascadeSize)) {
          displayValue = [];
        }
        _this.setState({
          displayValue: displayValue,
          showSubMenu: showSubMenu
        });
      }
    };

    _this.state = {
      displayValue: [],
      selectedOptions: [],
      showSubMenu: false,
      loading: {},
      searchResult: [],
      inputValue: null,
      options: props.options.slice(),
      preOptions: props.options.slice(),
      value: props.value || props.defaultValue || [],
      preValue: props.value || [],
      loadedOptions: {}
    };
    // 兼容老版本的locale code
    var locale = props.locale;

    if (locale === 'zh_CN') {
      _this.locale = 'zh-cn';
    } else if (locale === 'en_US') {
      _this.locale = 'en-us';
    } else {
      _this.locale = locale;
    }

    _this.getSelectPlaceholder = props.getSelectPlaceholder || function getSelectPlaceholder() {
      return _i18n2["default"][this.locale].placeholder;
    };
    return _this;
  }

  CascadeSelect.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, preState) {
    var onSelect = nextProps.onSelect;
    var options = nextProps.options,
        value = nextProps.value;

    if (!options) {
      options = [];
    }
    if (!value) {
      value = [];
    }
    var newState = {};
    var judgeValue = stringify(value) !== stringify(preState.preValue);
    var judgeOptions = stringify(options) !== stringify(preState.preOptions);

    if (preState.preValue && value && value.length && preState.preValue.length > value.length && preState.preValue.includes(value[0])) {
      judgeValue = false;
    }

    if (judgeOptions) {
      newState.options = options;
      newState.preOptions = options;
      newState.loadedOptions = {};
    }
    if (judgeValue) {
      newState.value = value;
      newState.preValue = value;
    }
    if (judgeValue || judgeOptions) {
      if (!onSelect) {
        var theOptions = preState.options;
        if (newState && newState.options) {
          theOptions = newState.options;
        }
        var selectedOptions = CascadeSelect.getSelectedOptions(nextProps, { options: theOptions });
        var state = CascadeSelect.returnMultiState(selectedOptions) || {};
        if (newState && newState.options) {
          state.options = newState.options;
          state.preOptions = newState.preOptions;
          state.loadedOptions = newState.loadedOptions;
        }
        if (newState && newState.value) {
          // 判断计算得出的 state.value 是否包含 newState.value 的值
          // 如果 state.value 长度大于 newState.value 并且 newState.value 存在 state.value 中
          // 则说明是用户自主设置得某不确定的节点，并且此节点有值，此时使用 state.value 渲染才是正确的
          if (state.value.length > newState.value.length) {
            if (state.value.includes(newState.value[0])) {
              // do nothing
            } else {
              state.preValue = state.value;
              state.value = newState.value;
              state.displayValue = newState.value;
            }
          } else {
            state.preValue = state.value;
            state.value = newState.value;
            state.displayValue = newState.value;
          }
        }
        newState = state;
        if (!newState.preValue) {
          newState.preValue = newState.value;
        }
      }
    }
    return Object.keys(newState).length ? newState : null;
  };

  CascadeSelect.getSelectedOptions = function getSelectedOptions(props, state) {
    var selectedOptions = [];
    var value = props.value,
        defaultValue = props.defaultValue;
    var options = state.options;

    var theValue = value || defaultValue;
    if (theValue && theValue.length > 1) {
      var renderArr = null;
      var prevSelected = null;

      var _loop = function _loop(i, l) {
        if (i === 0) {
          renderArr = options;
        } else {
          renderArr = prevSelected && prevSelected.children;
        }
        prevSelected = find(renderArr, function (item) {
          return item.value === theValue[i];
        });
        if (renderArr && prevSelected) {
          selectedOptions[i] = prevSelected;
        } else {
          selectedOptions = [];
          return 'break';
        }
      };

      for (var i = 0, l = theValue.length; i < l; i++) {
        var _ret = _loop(i, l);

        if (_ret === 'break') break;
      }
    } else if (theValue && theValue.length === 1) {
      selectedOptions = getArrayLeafItemContains(options, theValue);
    }
    return selectedOptions;
  };

  CascadeSelect.prototype.componentDidMount = function componentDidMount() {
    this.setValue(this.props);
  };

  CascadeSelect.prototype.componentDidUpdate = function componentDidUpdate(preProps) {
    var _this2 = this;

    var options = preProps.options,
        value = preProps.value;
    var onSelect = this.props.onSelect;

    var judgeValue = stringify(value && deepCopy(value)) !== stringify(deepCopy(this.props.value));
    var judgeOptions = stringify(options) !== stringify(this.props.options);
    if (onSelect && (judgeValue || judgeOptions)) {
      this.getAsyncSelectedOptions(this.props, function (selectedOptions) {
        _this2.setMultiState(selectedOptions);
      });
    }
  };

  CascadeSelect.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  /**
   * 获取options， 下面为请求第二层数据时的参数参考
   * @param {*} values 当前的values值， 如['jiangsu']
   * @param {*} key 请求的key值， 如'jiangsu'
   * @param {*} level 请求的层数， 如 1
   */


  CascadeSelect.prototype.fetchOptions = function fetchOptions(values, key, level) {
    var _this3 = this;

    var node = this.state.options;
    var loading = this.state.loading;

    if (this.state.loadedOptions[key]) {
      return _lie2["default"].resolve('n');
    }
    var _props = this.props,
        onSelect = _props.onSelect,
        cascadeSize = _props.cascadeSize;

    if (onSelect && level < cascadeSize) {
      return new _lie2["default"](function (resolve, reject) {
        loading[key] = true;
        _this3.setState({ loading: loading });
        onSelect(resolve, reject, key, level);
      }).then(function (children) {
        _this3.state.loadedOptions[key] = true;
        values.forEach(function (value, index) {
          if (index + 1 > level) {
            return;
          }
          node = find(node, function (item) {
            return item.value === value;
          });
          if (node.children) {
            node = node.children;
          }
        });
        node.children = children;
        loading[key] = false;
        _this3.setState({ loading: loading });
        return 'y';
      })["catch"](function () {
        loading[key] = false;
        _this3.setState({ loading: loading });
      });
    }
    return _lie2["default"].resolve('n');
  };

  CascadeSelect.prototype.setMultiState = function setMultiState(selectedOptions) {
    var value = void 0;
    if (selectedOptions && selectedOptions.length) {
      value = selectedOptions.map(function (item) {
        return item.value;
      });
    }
    this.setState({
      displayValue: value || [],
      value: value || [],
      selectedOptions: selectedOptions
    });
  };

  CascadeSelect.returnMultiState = function returnMultiState(selectedOptions) {
    var value = void 0;
    if (selectedOptions && selectedOptions.length) {
      value = selectedOptions.map(function (item) {
        return item.value;
      });
    }
    return {
      displayValue: value || [],
      value: value || [],
      selectedOptions: selectedOptions
    };
  };

  CascadeSelect.prototype.setValue = function setValue(props) {
    var _this4 = this;

    var onSelect = props.onSelect;

    if (onSelect) {
      this.getAsyncSelectedOptions(props, function (selectedOptions) {
        _this4.setMultiState(selectedOptions);
      });
    } else {
      var selectedOptions = CascadeSelect.getSelectedOptions(props, this.state);
      this.setMultiState(selectedOptions);
    }
  };

  CascadeSelect.prototype.getAsyncSelectedOptions = function getAsyncSelectedOptions(props) {
    var _this5 = this;

    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

    var selectedOptions = [];
    var value = props.value,
        defaultValue = props.defaultValue,
        cascadeSize = props.cascadeSize;
    var options = this.state.options;

    var theValue = value || defaultValue;
    var renderArr = null;
    var prevSelected = null;
    var recursive = function recursive() {
      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var len = theValue.length;
      if (len === 0) {
        callback.call(_this5, selectedOptions);
        return;
      }
      if (i === 0) {
        renderArr = options;
      } else {
        renderArr = prevSelected && prevSelected.children;
      }
      if (!renderArr && i < cascadeSize) {
        _this5.fetchOptions(theValue.slice(0, i), theValue[i - 1], i).then(function () {
          renderArr = prevSelected && prevSelected.children;
          internalExecute.call(_this5, i, len); // eslint-disable-line
        });
      } else {
        internalExecute.call(_this5, i, len); // eslint-disable-line
      }
    };
    function internalExecute(i, len) {
      prevSelected = find(renderArr, function (item) {
        return item.value === theValue[i];
      });
      if (renderArr && prevSelected) {
        selectedOptions[i] = prevSelected;
        if (i + 1 === len) {
          callback.call(this, selectedOptions);
        } else {
          recursive(i + 1);
        }
      } else {
        selectedOptions = [];
        callback.call(this, selectedOptions);
      }
    }
    recursive();
  };

  CascadeSelect.prototype.onValueChange = function onValueChange(value, selectedOptions) {
    var _props2 = this.props,
        onChange = _props2.onChange,
        isMustSelectLeaf = _props2.isMustSelectLeaf,
        cascadeSize = _props2.cascadeSize;

    if (onChange) {
      if (isMustSelectLeaf) {
        if (value && (value.length >= cascadeSize || value.length === 0) || selectedOptions && (selectedOptions[selectedOptions.length - 1] && isEmptyArray(selectedOptions[selectedOptions.length - 1].children) || selectedOptions.length === 0)) {
          onChange(value, selectedOptions);
        }
      } else {
        onChange(value, selectedOptions);
      }
    }
  };

  CascadeSelect.prototype.clearContent = function clearContent(e) {
    e.stopPropagation();
    this.setState({
      displayValue: [],
      value: [],
      selectedOptions: [],
      inputValue: null
    });
    this.onValueChange([], []);
  };

  CascadeSelect.prototype.onDropDownVisibleChange = function onDropDownVisibleChange(visible) {
    var disabled = this.props.disabled;

    if (!disabled) {
      this.setState({ showSubMenu: visible });
    }
  };

  CascadeSelect.prototype.renderContent = function renderContent() {
    var _this6 = this,
        _classnames,
        _classnames2;

    var _props3 = this.props,
        className = _props3.className,
        disabled = _props3.disabled,
        clearable = _props3.clearable,
        showSearch = _props3.showSearch,
        onSearch = _props3.onSearch;
    var _state = this.state,
        selectedOptions = _state.selectedOptions,
        showSubMenu = _state.showSubMenu,
        displayValue = _state.displayValue;
    var placeholder = this.props.placeholder;

    if (!placeholder) {
      placeholder = _i18n2["default"][this.locale].placeholder;
    }
    var displayText = displayValue.length ? this.props.beforeRender(displayValue, selectedOptions) : '';

    var cpnt = _react2["default"].createElement(
      'div',
      {
        className: this.prefixCls('trigger'),
        title: displayText
      },
      placeholder && !displayValue.length ? _react2["default"].createElement(
        'div',
        { className: this.prefixCls('placeholder') },
        placeholder
      ) : displayText
    );

    if (this.props.displayMode === 'search' || this.props.showSearch) {
      // TODO: remove this.props.displayMode === 'search'
      cpnt = _react2["default"].createElement(_Search2["default"], {
        value: this.state.inputValue,
        text: displayText,
        disabled: disabled,
        placeholder: placeholder,
        searchOption: this.props.searchOption,
        showSearch: showSearch,
        onSearch: onSearch,
        onValueChange: function onValueChange(inputValue) {
          _this6.setState({ inputValue: inputValue, showSubMenu: true });
          if (_this6.props.onSearch) {
            _this6.props.onSearch(inputValue);
          }
        },
        onSearchResultChange: function onSearchResultChange(searchResult) {
          _this6.setState({ searchResult: searchResult, showSubMenu: true });
        }
      });
    }

    return _react2["default"].createElement(
      'div',
      {
        ref: this.saveRef('wrapper'),
        className: (0, _classnames4["default"])((_classnames = {}, _defineProperty(_classnames, this.prefixCls('wrapper'), true), _defineProperty(_classnames, className, true), _defineProperty(_classnames, this.prefixCls('disabled'), disabled), _defineProperty(_classnames, this.prefixCls('clearable'), !disabled && clearable && displayValue.length > 0), _defineProperty(_classnames, this.prefixCls('focus'), showSubMenu), _defineProperty(_classnames, this.prefixCls('size-' + this.props.size), true), _classnames))
      },
      _react2["default"].createElement(
        'div',
        { className: this.prefixCls('text') },
        cpnt
      ),
      _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames4["default"])((_classnames2 = {}, _defineProperty(_classnames2, this.prefixCls('arrow'), true), _defineProperty(_classnames2, this.prefixCls('arrow-reverse'), showSubMenu), _classnames2))
        },
        _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-triangle-down' })
      ),
      _react2["default"].createElement(
        'div',
        {
          className: this.prefixCls('close-wrap')
        },
        _react2["default"].createElement('i', { onClick: this.clearContent.bind(this), className: 'kuma-icon kuma-icon-error' })
      )
    );
  };

  CascadeSelect.prototype.renderSelect2Options = function renderSelect2Options(opt) {
    if (this.state.options) {
      return opt.map(function (optionItem) {
        return _react2["default"].createElement(
          _uxcoreSelect2["default"].Option,
          {
            key: optionItem.value,
            value: '' + optionItem.value
          },
          optionItem.label
        );
      });
    }
    return null;
  };

  CascadeSelect.prototype.renderSelect = function renderSelect() {
    var _this7 = this;

    var _state2 = this.state,
        value = _state2.value,
        loading = _state2.loading,
        options = _state2.options;
    var cascadeSize = this.props.cascadeSize;

    var back = [];
    var relLoading = {};

    var _loop2 = function _loop2(i) {
      var opt = getOptions(options, value, i);
      if (loading[value[i]]) {
        relLoading[i + 1] = true;
      }
      back.push(_react2["default"].createElement(
        'div',
        {
          key: i,
          className: _this7.prefixCls('select-item-wrap'),
          style: { width: (100 / cascadeSize).toFixed(1) + '%' }
        },
        _react2["default"].createElement(
          'div',
          { className: _this7.prefixCls('internal-select-item-wrap') },
          _react2["default"].createElement(
            _uxcoreSelect2["default"],
            {
              showSearch: false,
              placeholder: _this7.getSelectPlaceholder(i),
              getPopupContainer: _this7.props.getPopupContainer,
              value: value[i],
              dropdownMatchSelectWidth: false,
              dropdownStyle: {
                width: _this7.props.columnWidth
              },
              onChange: function onChange(v) {
                var stateValue = _this7.state.value;
                var selectedOptions = _this7.state.selectedOptions;
                if (i === 0) {
                  stateValue = [v];
                  selectedOptions = options.filter(function (item) {
                    return item.value + '_' === v + '_';
                  });
                } else {
                  stateValue[i] = v;
                  selectedOptions[i] = opt.filter(function (item) {
                    return item.value + '_' === v + '_';
                  })[0];
                  stateValue = stateValue.slice(0, i + 1);
                  selectedOptions = selectedOptions.slice(0, i + 1);
                }
                if (!(selectedOptions[i].children && selectedOptions[i].children.length)) {
                  _this7.fetchOptions(stateValue, v, i + 1);
                }
                _this7.setState({ value: stateValue, selectedOptions: selectedOptions }, function () {
                  _this7.onValueChange(stateValue, selectedOptions);
                });
              },
              size: _this7.props.size
            },
            _this7.renderSelect2Options(opt)
          ),
          relLoading[i] ? _react2["default"].createElement('span', { className: _this7.prefixCls('select-loading') }) : null
        )
      ));
    };

    for (var i = 0; i < cascadeSize; i++) {
      _loop2(i);
    }
    return _react2["default"].createElement(
      'div',
      { className: this.prefixCls('select-wrap') },
      back
    );
  };

  // @deprecated 废弃函数


  CascadeSelect.prototype.renderSearchResult = function renderSearchResult() {
    var _this8 = this;

    var options = this.props.options;

    return _Search2["default"].renderResult(this.state.searchResult, function (item) {
      var selectedOptions = CascadeSelect.getSelectedOptions({
        value: [item.value],
        options: options
      }, _this8.state);
      var val = [];
      if (selectedOptions && selectedOptions.length) {
        val = selectedOptions.map(function (i) {
          return i.value;
        });
      }
      _this8.setState({
        inputValue: null,
        searchResult: [],
        displayValue: val,
        value: val,
        selectedOptions: selectedOptions
      }, function () {
        _this8.props.onChange(val, selectedOptions);
      });
    });
  };

  /** 渲染快速搜索结果 https://github.com/uxcore/uxcore-cascade-select/issues/26 */


  CascadeSelect.prototype.renderFastResult = function renderFastResult() {
    var _this9 = this;

    var _state3 = this.state,
        options = _state3.options,
        inputValue = _state3.inputValue;
    var displayValue = this.state.displayValue;
    var _props4 = this.props,
        optionFilterProps = _props4.optionFilterProps,
        optionFilterCount = _props4.optionFilterCount,
        showSearch = _props4.showSearch,
        changeOnSelect = _props4.changeOnSelect,
        onSelect = _props4.onSelect,
        cascadeSize = _props4.cascadeSize;

    var data = searchArrayOfOptions({
      options: options,
      keywords: inputValue,
      filterProps: optionFilterProps,
      filterCount: optionFilterCount
    });
    return _react2["default"].createElement(
      _uxcoreMenu2["default"],
      { className: this.prefixCls('menu') },
      data.map(function (d) {
        return _react2["default"].createElement(
          _uxcoreMenu2["default"].Item,
          {
            key: d.id,
            onClick: function onClick() {
              _this9.setState({
                inputValue: null
              });
              var selectedOptions = CascadeSelect.getSelectedOptions({ value: d.value }, _this9.state);
              _this9.setMultiState(selectedOptions);
              _this9.onValueChange(d.value, selectedOptions);
              if (showSearch) {
                // 如果存在异步加载，搜索选中之后自动调用异步加载
                if (onSelect && d.value.length < cascadeSize) {
                  if (!changeOnSelect) {
                    displayValue = [];
                  }
                  _this9.setState({
                    displayValue: displayValue
                  });
                  _this9.fetchOptions(d.value, d.value[d.value.length - 1], d.value.length);
                }
              }
            }
          },
          _react2["default"].createElement('span', {
            dangerouslySetInnerHTML: { // eslint-disable-line
              __html: d.label.replace(inputValue, function (str) {
                return '<span class="brand-danger">' + str + '</span>';
              })
            }
          })
        );
      })
    );
  };

  CascadeSelect.prototype.render = function render() {
    var _this10 = this;

    if (this.props.displayMode === 'select') {
      return this.renderSelect();
    }

    var _props5 = this.props,
        disabled = _props5.disabled,
        prefixCls = _props5.prefixCls,
        expandTrigger = _props5.expandTrigger,
        cascadeSize = _props5.cascadeSize,
        getPopupContainer = _props5.getPopupContainer,
        columnWidth = _props5.columnWidth,
        displayMode = _props5.displayMode,
        dropdownClassName = _props5.dropdownClassName,
        onSearch = _props5.onSearch;
    var _state4 = this.state,
        value = _state4.value,
        loading = _state4.loading,
        options = _state4.options,
        inputValue = _state4.inputValue;

    if (disabled) {
      return this.renderContent();
    }
    var submenu = _react2["default"].createElement('div', {
      className: this.prefixCls('submenu-empty'),
      style: columnWidth ? { width: columnWidth * this.props.cascadeSize } : null
    });
    var minOverlayWidthMatchTrigger = false;
    if (displayMode === 'search' && this.state.searchResult.length > 0) {
      submenu = this.renderSearchResult();
    } else if (options.length && !disabled && inputValue && !onSearch) {
      submenu = this.renderFastResult();
      minOverlayWidthMatchTrigger = true;
    } else if (options.length && !disabled) {
      submenu = _react2["default"].createElement(_CascadeSubmenu2["default"], {
        prefixCls: prefixCls,
        onItemClick: this.onSubmenuItemClick,
        options: options,
        value: value,
        expandTrigger: expandTrigger,
        cascadeSize: cascadeSize,
        locale: this.locale,
        miniMode: this.props.miniMode,
        onOkButtonClick: function onOkButtonClick() {
          _this10.wrapper.click();
          var newValue = _this10.newValue;
          var newSelectedOptions = _this10.newSelectedOptions;
          if (_this10.props.isMustSelectLeaf) {
            if (newValue && newValue.length < _this10.props.cascadeSize && newSelectedOptions && newSelectedOptions[newSelectedOptions.length - 1] && !isEmptyArray(newSelectedOptions[newSelectedOptions.length - 1].children)) {
              return;
            }
          }
          if (newValue && newSelectedOptions) {
            _this10.setState({
              value: newValue,
              displayValue: newValue,
              selectedOptions: newSelectedOptions,
              inputValue: null
            }, function () {
              delete _this10.newValue;
              delete _this10.newSelectedOptions;
              _this10.onValueChange(newValue, newSelectedOptions);
            });
          }
        },
        columnWidth: this.props.columnWidth || getDomWidth(this.wrapper) / this.props.cascadeSize,
        size: this.props.size,
        loading: loading,
        className: this.prefixCls('submenu-warpper') + ' ' + dropdownClassName,
        cascaderHeight: this.props.cascaderHeight
      });
    }
    return _react2["default"].createElement(
      _uxcoreDropdown2["default"],
      {
        overlay: submenu,
        trigger: ['click'],
        onVisibleChange: this.onDropDownVisibleChange.bind(this),
        getPopupContainer: getPopupContainer,
        minOverlayWidthMatchTrigger: minOverlayWidthMatchTrigger,
        visible: this.state.showSubMenu
      },
      this.renderContent()
    );
  };

  return CascadeSelect;
}(_SuperComponent3["default"]);

CascadeSelect.defaultProps = {
  prefixCls: 'kuma-cascader',
  className: '',
  placeholder: '',
  options: [],
  defaultValue: null,
  value: null,
  onChange: function onChange() {},
  disabled: false,
  clearable: false,
  changeOnSelect: false,
  expandTrigger: 'click',
  cascadeSize: 3,
  beforeRender: function beforeRender(value, selectedOptions) {
    if (selectedOptions.length) {
      return selectedOptions.map(function (o) {
        return o && o.label;
      }).join(' / ');
    }
    return value.join('/');
  },
  locale: 'zh-cn',
  miniMode: true,
  columnWidth: null,
  displayMode: 'dropdown',
  getSelectPlaceholder: null,
  size: 'large',
  isMustSelectLeaf: false,
  dropdownClassName: '',
  showSearch: false,
  onSearch: null,
  optionFilterProps: ['label'],
  optionFilterCount: 20,
  cascaderHeight: 0
};

// http://facebook.github.io/react/docs/reusable-components.html
CascadeSelect.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  options: _propTypes2["default"].array,
  defaultValue: _propTypes2["default"].array,
  value: _propTypes2["default"].array,
  placeholder: _propTypes2["default"].string,
  onChange: _propTypes2["default"].func,
  disabled: _propTypes2["default"].bool,
  clearable: _propTypes2["default"].bool,
  changeOnSelect: _propTypes2["default"].bool,
  expandTrigger: _propTypes2["default"].string,
  beforeRender: _propTypes2["default"].func,
  locale: _propTypes2["default"].oneOf(['zh-cn', 'en-us', 'zh_CN', 'en_US']),
  miniMode: _propTypes2["default"].bool,
  columnWidth: _propTypes2["default"].number,
  displayMode: _propTypes2["default"].oneOf(['dropdown', 'select', 'search']),
  getSelectPlaceholder: _propTypes2["default"].func,
  size: _propTypes2["default"].oneOf(['large', 'middle', 'small']),
  isMustSelectLeaf: _propTypes2["default"].bool,
  dropdownClassName: _propTypes2["default"].string,
  showSearch: _propTypes2["default"].bool,
  onSearch: _propTypes2["default"].func,
  optionFilterProps: _propTypes2["default"].arrayOf(_propTypes2["default"].string),
  optionFilterCount: _propTypes2["default"].number,
  cascaderHeight: _propTypes2["default"].number
};

CascadeSelect.displayName = 'CascadeSelect';
(0, _reactLifecyclesCompat.polyfill)(CascadeSelect);

CascadeSelect.CascadeSubmenu = function (_ref) {
  var props = _objectWithoutProperties(_ref, []);

  return _react2["default"].createElement(
    'div',
    { className: 'kuma-cascader-submenu-warpper' },
    _react2["default"].createElement(_CascadeSubmenu2["default"], _extends({
      prefixCls: 'kuma-dropdown-menu'
    }, props, {
      onItemClick: function onItemClick(key, index) {
        var value = props.value;

        if (!value) {
          value = [];
        } else {
          value = value.slice(0, index);
        }
        value[index] = key;
        props.onChange(value);
      }
    }))
  );
};
CascadeSelect.CascadeSubmenu.displayName = 'CascadeSelectCascadeSubmenu';

module.exports = CascadeSelect;