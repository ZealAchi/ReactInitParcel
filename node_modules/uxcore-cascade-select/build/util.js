'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _arguments = arguments;
var supportNativeFind = !!Array.prototype.find;

var find = function () {
  if (supportNativeFind) {
    return function (ary) {
      for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }

      return ary.find.apply(ary, params);
    };
  }
  return function (ary, predicate) {
    if (undefined === null) {
      throw new TypeError('find called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var length = ary.length >>> 0;
    var ctx = _arguments[2];
    var value = void 0;

    for (var i = 0; i < length; i++) {
      value = ary[i];
      if (predicate.call(ctx, value, i, ary)) {
        return value;
      }
    }
    return undefined;
  };
}();

var deepCopy = function deepCopy(o) {
  return JSON.parse(JSON.stringify(o));
};

var getArrayLeafItemContains = function getArrayLeafItemContains(options, keyArr) {
  var position = void 0;
  var isFound = false;
  var selectedOptions = [];
  function recursion(opts) {
    var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';

    opts.forEach(function (opt, index) {
      if (isFound) return;
      if (keyArr[0] + '_' === opt.value + '_') {
        position = pos + '-' + index;
        isFound = true;
      }
      if (opt.children) {
        recursion(opt.children, pos + '-' + index);
      }
    });
  }
  recursion(options);
  if (!position) return [];
  var parents = options;
  position.split('-').slice(1).forEach(function (pos) {
    selectedOptions.push(parents[pos]);
    parents = parents[pos].children;
  });

  return selectedOptions;
};

var getOptions = function getOptions(options) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

  if (level === 0 && options) {
    return options;
  }
  if (value.length) {
    for (var i = 0, l = options.length; i < l; i++) {
      if (options[i].value + '_' === value[0] + '_' && options[i].children) {
        return getOptions(options[i].children, value.slice(1), level - 1);
      }
    }
  }
  return [];
};

var stringify = function stringify(val) {
  return JSON.stringify(val);
};

/** 将 options 结构转换成拍平数组，同时使用传入的关键词进行过滤 */
var searchArrayOfOptions = function searchArrayOfOptions(_ref) {
  var options = _ref.options,
      keywords = _ref.keywords,
      filterProps = _ref.filterProps,
      filterCount = _ref.filterCount;
  var parentName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var parentValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var parentKeywords = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
  var level = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  var _loop = function _loop(i, l) {
    if (data.length >= filterCount) {
      return 'break';
    }

    parentName = parentName.slice(0, level); // eslint-disable-line
    parentValue = parentValue.slice(0, level); // eslint-disable-line
    parentKeywords = parentKeywords.slice(0, level); // eslint-disable-line
    var optionsItem = options[i];
    parentName.push(optionsItem.label);
    parentValue.push(optionsItem.value);
    if (filterProps && filterProps.length > 0) {
      var myKeywords = [];
      filterProps.forEach(function (propName) {
        // eslint-disable-line
        if (optionsItem[propName]) {
          myKeywords.push(optionsItem[propName]);
        }
      });
      parentKeywords.push(myKeywords.join('_'));
    }

    if (optionsItem.children) {
      searchArrayOfOptions({
        options: optionsItem.children,
        keywords: keywords,
        filterProps: filterProps,
        filterCount: filterCount
      }, parentName, parentValue, parentKeywords, data, level + 1);
    } else {
      var dataItem = {
        id: parentValue.join('_'),
        label: parentName.join(' / '),
        value: parentValue,
        keywords: parentKeywords.join('_')
      };
      if (dataItem.keywords.toUpperCase().indexOf(keywords.toUpperCase()) > -1) {
        data.push(dataItem);
      }
    }
  };

  for (var i = 0, l = options.length; i < l; i++) {
    var _ret = _loop(i, l);

    if (_ret === 'break') break;
  }

  return data;
};

function isEmptyArray(o) {
  return !o || o.length === 0;
}

exports["default"] = {
  find: find,
  getArrayLeafItemContains: getArrayLeafItemContains,
  deepCopy: deepCopy,
  getOptions: getOptions,
  stringify: stringify,
  searchArrayOfOptions: searchArrayOfOptions,
  isEmptyArray: isEmptyArray
};
module.exports = exports['default'];