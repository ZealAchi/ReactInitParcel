'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var defaultProps = {
  strokeWidth: 1,
  trailWidth: 1
};

var Circle = function (_React$Component) {
  _inherits(Circle, _React$Component);

  function Circle() {
    _classCallCheck(this, Circle);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Circle.prototype.render = function render() {
    var props = (0, _objectAssign2["default"])({}, this.props);
    var prefixCls = props.prefixCls;
    var strokeWidth = props.strokeWidth;
    var radius = 50 - strokeWidth / 2;
    var pathString = 'M 50,50 m 0,-' + radius + '\n        a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + '\n        a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;
    var len = Math.PI * 2 * radius;
    var pathStyle = {
      strokeDasharray: len + 'px ' + len + 'px',
      strokeDashoffset: (100 - props.percent) / 100 * len + 'px',
      transition: 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
    };

    var progressInfo = void 0;
    var textStyle = {
      lineHeight: props.size + 'px'

    };

    if (props.showInfo === true) {
      var type = props.infoType;
      if (props.status === 'exception') {
        progressInfo = _react2["default"].createElement(
          'span',
          { style: textStyle, className: prefixCls + '-circle-text' },
          type === 'icon' ? _react2["default"].createElement('i', { className: 'icon-caution' }) : type === 'percent' ? props.percent + '%' : 'Error'
        );
      } else if (props.status === 'success') {
        progressInfo = _react2["default"].createElement(
          'span',
          { style: textStyle, className: prefixCls + '-circle-text' },
          type === 'icon' ? _react2["default"].createElement('i', { className: 'icon-success' }) : type === 'percent' ? props.percent + '%' : 'Success'
        );
      } else {
        progressInfo = _react2["default"].createElement(
          'span',
          { style: textStyle, className: prefixCls + '-circle-text' },
          props.percent,
          '%'
        );
      }
    }

    ['strokeWidth', 'trailWidth'].forEach(function (item) {
      if (item === 'trailWidth' && !props.trailWidth && props.strokeWidth) {
        props.trailWidth = props.strokeWidth;
        return;
      }
      if (!props[item]) {
        props[item] = defaultProps[item];
      }
    });

    return _react2["default"].createElement(
      'div',
      {
        className: 'kuma-progress-circle-wrap status-' + props.status,
        style: { width: props.size, height: props.size }
      },
      _react2["default"].createElement(
        'svg',
        { className: 'kuma-progress-circle', viewBox: '0 0 100 100' },
        _react2["default"].createElement('path', {
          className: 'kuma-progress-circle-trail',
          d: pathString,
          strokeWidth: props.trailWidth,
          fillOpacity: '0'
        }),
        _react2["default"].createElement('path', {
          className: 'kuma-progress-circle-path',
          d: pathString,
          strokeLinecap: 'round',
          strokeWidth: props.strokeWidth,
          fillOpacity: '0',
          style: pathStyle
        })
      ),
      progressInfo
    );
  };

  return Circle;
}(_react2["default"].Component);

Circle.displayName = 'Progress-Circle';
Circle.propTypes = {
  prefixCls: _propTypes2["default"].string,
  status: _propTypes2["default"].oneOf(['normal', 'exception', 'success']),
  percent: _propTypes2["default"].number,
  strokeWidth: _propTypes2["default"].number,
  size: _propTypes2["default"].number,
  showInfo: _propTypes2["default"].bool,
  infoType: _propTypes2["default"].string
};
Circle.defaultProps = {
  prefixCls: 'kuma-progress',
  status: 'normal', // exception active
  percent: 0,
  strokeWidth: 6,
  size: 156,
  showInfo: true,
  infoType: 'icon'
};

exports["default"] = Circle;
module.exports = exports['default'];