'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Line = function (_React$Component) {
  _inherits(Line, _React$Component);

  function Line() {
    _classCallCheck(this, Line);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Line.prototype.render = function render() {
    var props = (0, _objectAssign2["default"])({}, this.props);
    var prefixCls = props.prefixCls;

    if (parseInt(props.percent, 10) === 100) {
      props.status = 'success';
    }

    var progressInfo = void 0;
    var fullCls = '';

    if (props.showInfo === true) {
      var type = props.infoType;
      if (props.status === 'exception') {
        progressInfo = _react2["default"].createElement(
          'span',
          { className: prefixCls + '-line-text' },
          type === 'icon' ? _react2["default"].createElement('i', { className: 'icon-caution' }) : type === 'percent' ? props.percent + '%' : 'Error'
        );
      } else if (props.status === 'success') {
        progressInfo = _react2["default"].createElement(
          'span',
          { className: prefixCls + '-line-text' },
          type === 'icon' ? _react2["default"].createElement('i', { className: 'icon-success' }) : type === 'percent' ? props.percent + '%' : 'Success'
        );
      } else {
        progressInfo = _react2["default"].createElement(
          'span',
          { className: prefixCls + '-line-text' },
          props.percent,
          '%'
        );
      }
    } else {
      fullCls = ' ' + prefixCls + '-line-wrap-full';
    }

    var percentStyle = {
      width: props.percent + '%',
      height: props.strokeWidth
    };

    var outerStyle = {
      paddingTop: (22 - props.strokeWidth) / 2
    };

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-line-wrap fn-clear status-' + props.status + fullCls },
      progressInfo,
      _react2["default"].createElement(
        'div',
        { className: prefixCls + '-line-outer', style: outerStyle },
        _react2["default"].createElement(
          'div',
          { className: prefixCls + '-line-inner' },
          _react2["default"].createElement('div', { className: prefixCls + '-line-bg', style: percentStyle })
        )
      )
    );
  };

  return Line;
}(_react2["default"].Component);

Line.displayName = 'Progress-Line';
Line.propTypes = {
  prefixCls: _propTypes2["default"].string,
  status: _propTypes2["default"].oneOf(['normal', 'exception', 'active', 'success']),
  showInfo: _propTypes2["default"].bool,
  percent: _propTypes2["default"].number,
  strokeWidth: _propTypes2["default"].number,
  infoType: _propTypes2["default"].string
};
Line.defaultProps = {
  prefixCls: 'kuma-progress',
  percent: 0,
  strokeWidth: 10,
  status: 'normal', // exception active
  showInfo: true,
  infoType: 'icon'
};

exports["default"] = Line;
module.exports = exports['default'];