'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var getDPR = function getDPR() {
  if (typeof window !== 'undefined') {
    return window.devicePixelRatio || 1;
  }
  return 1;
};

var handleImageSrc = function handleImageSrc(props, adapter) {
  var enableUrlAdapter = props.enableUrlAdapter,
      adapterType = props.adapterType,
      src = props.src,
      _props$width = props.width,
      width = _props$width === undefined ? '' : _props$width,
      _props$height = props.height,
      height = _props$height === undefined ? '' : _props$height,
      type = props.type;


  var options = {
    multiple: getDPR(),
    type: type,
    adapterType: adapterType,
    width: width,
    height: height
  };

  if (enableUrlAdapter) {
    // 如果指定了适配器类型，那么直接使用
    if (adapterType) {
      return adapter[adapterType](src, options);
    }

    // 如果没有指定适配器类型，那么遍历所有适配器
    var adapterKeys = Object.keys(adapter);
    for (var i = 0; i < adapterKeys.length; i++) {
      var newUrl = adapter[adapterKeys[i]](src, options);

      if (newUrl !== src) {
        return newUrl;
      }
    }
  }
  return src;
};

var isDocumentLoaded = function isDocumentLoaded() {
  if (typeof document !== 'undefined') {
    return document.readyState === 'complete';
  }
  return true;
};

var getParams = function getParams(url, key) {
  var modifiedUrl = url.slice(url.indexOf('?') + 1);

  var list = modifiedUrl.split('&');
  var params = {};

  list.forEach(function (item) {
    var tmp = item.split('=');

    var _tmp = _slicedToArray(tmp, 2),
        paramsKey = _tmp[0],
        value = _tmp[1];

    params[paramsKey] = value;
  });

  return key ? params[key] : params;
};

var urlSetParams = function urlSetParams(url, data) {
  var anchor = '';

  var modifiedUrl = url;

  if (modifiedUrl.indexOf('#') > -1) {
    anchor = modifiedUrl.slice(modifiedUrl.indexOf('#'));
    modifiedUrl = modifiedUrl.slice(0, modifiedUrl.indexOf('#'));
  }

  if (modifiedUrl.indexOf('?') > -1) {
    var path = modifiedUrl.slice(0, modifiedUrl.indexOf('?'));

    // 获取目标url的参数
    var params = getParams(modifiedUrl);

    // 删掉同名参数
    Object.keys(params).forEach(function (key) {
      Object.keys(data).forEach(function (k) {
        if (key.toLowerCase() === k.toLowerCase()) {
          delete params[key];
        }
      });
    });

    // 添加data
    Object.keys(data).forEach(function (k) {
      params[k] = data[k];
    });

    var _paramsList = [];

    Object.keys(params).forEach(function (key) {
      _paramsList.push(key + '=' + params[key]);
    });

    return path + '?' + _paramsList.join('&') + anchor;
  }
  var paramsList = [];

  Object.keys(data).forEach(function (k) {
    paramsList.push(k + '=' + data[k]);
  });
  return modifiedUrl + '?' + paramsList.join('&') + anchor;
};

exports.getDPR = getDPR;
exports.handleImageSrc = handleImageSrc;
exports.isDocumentLoaded = isDocumentLoaded;
exports.getParams = getParams;
exports.urlSetParams = urlSetParams;