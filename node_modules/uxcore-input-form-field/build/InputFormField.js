'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _FormCount = require('./addons/FormCount');

var _FormCount2 = _interopRequireDefault(_FormCount);

var _LeftAddon = require('./addons/LeftAddon');

var _LeftAddon2 = _interopRequireDefault(_LeftAddon);

var _RightAddon = require('./addons/RightAddon');

var _RightAddon2 = _interopRequireDefault(_RightAddon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * InputFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * extend FormField, rewrite renderField method
 */
var InputFormField = function (_FormField) {
  _inherits(InputFormField, _FormField);

  function InputFormField() {
    _classCallCheck(this, InputFormField);

    return _possibleConstructorReturn(this, _FormField.apply(this, arguments));
  }

  InputFormField.prototype.componentWillUnmount = function componentWillUnmount() {
    _FormField.prototype.componentWillUnmount.call(this);
    this.clearTimer();
  };

  InputFormField.prototype.clearTimer = function clearTimer() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
  };

  InputFormField.prototype.handleChange = function handleChange(e) {
    var me = this;
    var autoTrim = me.props.autoTrim;

    var value = e.currentTarget.value;
    if (autoTrim) {
      me.clearTimer();
      me.timer = setTimeout(function () {
        value = _util2["default"].trim(value);
        me.handleDataChange(me.deFormatValue(value));
      }, 500);
    }
    me.handleDataChange(me.deFormatValue(value));
  };

  InputFormField.prototype.handleFocus = function handleFocus(e) {
    this.setState({
      focus: true
    });
    this.props.onFocus(e);
  };

  InputFormField.prototype.handleBlur = function handleBlur(e) {
    var me = this;
    me.setState({
      focus: false
    });
    var pass = true;
    if (me.props.validateOnBlur) {
      pass = me.doValidate();
    }
    me.props.onBlur(e, pass);
  };

  InputFormField.prototype.handleMouseEnter = function handleMouseEnter() {
    this.setState({
      hover: true
    });
  };

  InputFormField.prototype.handleMouseLeave = function handleMouseLeave() {
    this.setState({
      hover: false
    });
  };

  InputFormField.prototype.handleKeyDown = function handleKeyDown(e) {
    var me = this;
    me.props.onKeyDown(e);
  };

  /* eslint-disable class-methods-use-this */

  InputFormField.prototype.formatValue = function formatValue(value) {
    return value;
  };

  InputFormField.prototype.deFormatValue = function deFormatValue(value) {
    return value;
  };

  InputFormField.prototype.addSpecificClass = function addSpecificClass() {
    return 'kuma-input-uxform-field';
  };

  /* eslint-enable class-methods-use-this */

  InputFormField.prototype.getCount = function getCount() {
    var me = this;
    var children = me.props.children;
    var element = void 0;
    _react2["default"].Children.map(children, function (child) {
      if (child && typeof child.type === 'function' && child.type.displayName === 'FormCount') {
        element = child;
      }
    });
    if (element) {
      var total = element.props.total;
      var Count = _react2["default"].cloneElement(element, {
        length: me.state.value ? me.state.value.length : 0,
        key: 'count'
      });

      return {
        element: Count,
        total: total
      };
    }
    return null;
  };

  InputFormField.prototype.renderLeftAddon = function renderLeftAddon() {
    var me = this;
    var children = me.props.children;
    var element = void 0;
    _react2["default"].Children.map(children, function (child) {
      if (child && typeof child.type === 'function' && child.type.displayName === 'LeftAddon') {
        element = child;
      }
    });
    if (element) {
      return _react2["default"].cloneElement(element, {
        focus: me.state.focus,
        hover: me.state.hover,
        key: 'left'
      });
    }
    return null;
  };

  InputFormField.prototype.renderRightAddon = function renderRightAddon() {
    var me = this;
    var children = me.props.children;
    var element = void 0;
    _react2["default"].Children.map(children, function (child) {
      if (child && typeof child.type === 'function' && child.type.displayName === 'RightAddon') {
        element = child;
      }
    });

    if (element) {
      return _react2["default"].cloneElement(element, {
        key: 'right'
      });
    }
    return null;
  };

  InputFormField.prototype.renderField = function renderField() {
    var me = this;
    var arr = [];
    var mode = me.props.jsxmode || me.props.mode;
    var count = me.getCount();
    var leftAddon = me.renderLeftAddon();
    var rightAddon = me.renderRightAddon();
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      if (leftAddon) {
        arr.push(leftAddon);
      }
      var IEver = _util2["default"].getIEVer();
      var placeholder = IEver >= 10 && me.props.IECompatible ? '' : me.props.jsxplaceholder;
      var value = _util2["default"].isNil(me.state.formatValue) ? '' : me.formatValue(me.state.formatValue);
      var size = this.getSize();
      arr.push(_react2["default"].createElement('input', {
        className: (0, _classnames3["default"])(_defineProperty({
          'kuma-input': true,
          'kuma-uxform-input-has-right': !!count || !!rightAddon,
          'kuma-uxform-input-has-left': !!leftAddon
        }, 'kuma-input-' + size + '-size', !!size)),
        key: me.props.inputType,
        type: me.props.inputType,
        placeholder: placeholder,
        title: value || placeholder,
        disabled: me.props.jsxdisabled === 'disabled' || me.props.jsxdisabled === true ? 'disabled' : '',
        name: me.props.jsxname,
        value: value,
        onMouseEnter: function onMouseEnter(e) {
          me.handleMouseEnter(e);
        },
        onMouseLeave: function onMouseLeave(e) {
          me.handleMouseLeave(e);
        },
        onFocus: function onFocus(e) {
          me.handleFocus(e);
        },
        onBlur: function onBlur(e) {
          me.handleBlur(e);
        },
        onChange: function onChange(e) {
          me.handleChange(e);
        },
        onKeyDown: function onKeyDown(e) {
          me.handleKeyDown(e);
        },
        autoComplete: me.props.autoComplete ? 'on' : 'off'
      }));

      if (rightAddon) {
        arr.push(rightAddon);
      } else if (count) {
        arr.push(count.element);
      }
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      arr.push(_react2["default"].createElement(
        'span',
        { key: 'text', title: me.state.formatValue },
        me.props.renderView(me.state.formatValue)
      ));
    }
    return _react2["default"].createElement(
      'div',
      { className: 'kuma-uxform-input' },
      arr
    );
  };

  return InputFormField;
}(_uxcoreFormField2["default"]);

InputFormField.Count = _FormCount2["default"];
InputFormField.LeftAddon = _LeftAddon2["default"];
InputFormField.RightAddon = _RightAddon2["default"];
InputFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes, {
  IECompatible: _propTypes2["default"].bool,
  onBlur: _propTypes2["default"].func,
  onFocus: _propTypes2["default"].func,
  onKeyDown: _propTypes2["default"].func,
  renderView: _propTypes2["default"].func,
  validateOnBlur: _propTypes2["default"].bool,
  autoTrim: _propTypes2["default"].bool,
  inputType: _propTypes2["default"].string,
  autoComplete: _propTypes2["default"].bool
});
InputFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  IECompatible: true,
  onBlur: function onBlur() {},
  onFocus: function onFocus() {},
  onKeyDown: function onKeyDown() {},
  renderView: function renderView(value) {
    return value || value === 0 ? value : '--';
  },
  validateOnBlur: false,
  inputType: 'text',
  autoComplete: true
});
InputFormField.displayName = 'InputFormField';
exports["default"] = InputFormField;
module.exports = exports['default'];