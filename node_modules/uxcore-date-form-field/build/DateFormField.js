'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreCalendar = require('uxcore-calendar');

var _uxcoreCalendar2 = _interopRequireDefault(_uxcoreCalendar);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _omitBy = require('lodash/omitBy');

var _omitBy2 = _interopRequireDefault(_omitBy);

var _isNil = require('lodash/isNil');

var _isNil2 = _interopRequireDefault(_isNil);

var _uxcoreFormatter = require('uxcore-formatter');

var _uxcoreFormatter2 = _interopRequireDefault(_uxcoreFormatter);

var _RangeSelector = require('./RangeSelector');

var _RangeSelector2 = _interopRequireDefault(_RangeSelector);

var _reactHoverObserver = require('react-hover-observer');

var _reactHoverObserver2 = _interopRequireDefault(_reactHoverObserver);

var _uxcoreTooltip = require('uxcore-tooltip');

var _uxcoreTooltip2 = _interopRequireDefault(_uxcoreTooltip);

var _uxcoreMessage = require('uxcore-message');

var _uxcoreMessage2 = _interopRequireDefault(_uxcoreMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * DateFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CalendarPanel = {
  month: _uxcoreCalendar2["default"].MonthCalendar,
  year: _uxcoreCalendar2["default"].YearCalendar,
  day: _uxcoreCalendar2["default"]
};

var getMode = function getMode(props) {
  return props.jsxmode || props.mode;
};

var getPropFromArray = function getPropFromArray(arr, index) {
  if (arr instanceof Array) {
    return arr[index];
  }
  return arr;
};

var DateFormField = function (_FormField) {
  _inherits(DateFormField, _FormField);

  function DateFormField(props) {
    _classCallCheck(this, DateFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    _this.handleCascadeSelect = function (start, end) {
      _this.handleCascadeChange(0, new Date(start), start);
      setTimeout(function () {
        _this.handleCascadeChange(1, new Date(end), end);
        _this.hideToolTip();
      });
    };

    _this.resize = _this.resize.bind(_this);
    return _this;
  }

  DateFormField.prototype.getViewText = function getViewText(value, format) {
    var date = new Date(value);
    if (isNaN(date) || value === null) {
      return value;
    }
    var localTime = date.getTime();
    var localOffset = date.getTimezoneOffset() * 60 * 1000;
    value = this.props.fixTimezoneOffset ? localTime + localOffset : value;
    return _uxcoreFormatter2["default"].date(value, format);
  };

  DateFormField.prototype.componentDidMount = function componentDidMount() {
    _FormField.prototype.componentDidMount.call(this);
    var _props = this.props,
        jsxtype = _props.jsxtype,
        autoMatchWidth = _props.autoMatchWidth,
        jsxshow = _props.jsxshow;

    var mode = getMode(this.props);
    if (jsxtype === 'cascade' && autoMatchWidth && mode === _uxcoreConst2["default"].MODE.EDIT && jsxshow) {
      this.resize();
    }
  };

  DateFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {
    var _this2 = this;

    _FormField.prototype.componentDidUpdate.call(this, prevProps, prevState, snapshot);
    var _props2 = this.props,
        jsxtype = _props2.jsxtype,
        autoMatchWidth = _props2.autoMatchWidth,
        jsxshow = _props2.jsxshow,
        panel = _props2.panel;

    var mode = getMode(this.props);
    if (jsxtype === 'cascade' && autoMatchWidth && mode === _uxcoreConst2["default"].MODE.EDIT && jsxshow) {
      var shouldResize = function shouldResize() {
        if (!prevProps.jsxshow) {
          return true;
        }
        var prevMode = getMode(prevProps);
        if (mode !== prevMode) {
          return true;
        }
        if (panel !== prevProps.panel) {
          return true;
        }
        if (_this2.fieldWidth && _this2.fieldWidth !== parseInt(_this2.cascadeBox.clientWidth, 10)) {
          return true;
        }
        return false;
      };
      if (shouldResize()) {
        this.resize(true);
      }
    }
  };

  DateFormField.prototype.componentWillUnmount = function componentWillUnmount() {
    _FormField.prototype.componentWillUnmount.call(this);
    if (this.resizeTimer) {
      clearTimeout(this.resizeTimer);
      this.resizeTimer = null;
    }
  };

  DateFormField.prototype.resize = function resize(force) {
    var _this3 = this;

    var cascadeBox = this.cascadeBox;

    if (this.fieldWidth && this.fieldWidth === parseInt(cascadeBox.clientWidth, 10) && force !== true) {
      return;
    }
    var calendar1 = this.calendar1.getTriggerNode();
    var calendar2 = this.calendar2.getTriggerNode();
    var split = this.split;

    this.fieldWidth = parseInt(cascadeBox.clientWidth, 10);
    if (this.fieldWidth % 2 === 1) {
      split.style.width = '5px';
    }
    var splitCurrentStyle = split.currentStyle || window.getComputedStyle(split);
    var splitOuterWidth = split.clientWidth + parseInt(splitCurrentStyle.marginLeft, 10) + parseInt(splitCurrentStyle.marginRight, 10);
    if (!splitOuterWidth) {
      // if style is loaded later than component
      this.resizeTimer = setTimeout(function () {
        _this3.resize();
      }, 500);
    }
    calendar1.style.width = 'calc((100% - ' + splitOuterWidth + 'px)/2)';
    calendar2.style.width = 'calc((100% - ' + splitOuterWidth + 'px)/2)';
  };

  DateFormField.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  DateFormField.prototype.handleChange = function handleChange(value, format) {
    var me = this;
    var useFormat = me.props.useFormat;

    var data = void 0;
    if (useFormat) {
      data = format;
    } else {
      data = value ? me.processTime(value) : null;
    }
    me.handleDataChange(data);
  };

  DateFormField.prototype.handleCascadeChange = function handleCascadeChange(i, value, format) {
    var me = this;
    var values = [].concat(_toConsumableArray(this.formatValue(me.state.value) || []));
    var useFormat = me.props.useFormat;

    var data = void 0;
    if (useFormat) {
      data = format;
    } else {
      data = value ? me.processTime(value) : undefined;
    }
    values[i] = data;
    if (value) {
      if (i === 0 && !!values[1] && me.processTime(value) > me.processTime(values[1])) {
        values.pop();
      }
      if (i === 1 && !!values[0] && !me.props.showTime && me.processTime(value) < me.processTime(values[0])) {
        values[0] = undefined;
      }
      if (i === 1 && me.props.showTime) {
        var first = new Date(me.state.value[0]);
        var second = new Date(value);
        if (first.getFullYear() === second.getFullYear() && first.getMonth() === second.getMonth() && first.getDate() === second.getDate()) {
          if (second.getHours() < first.getHours() || second.getHours() === first.getHours() && second.getMinutes() < first.getMinutes()) {
            _uxcoreMessage2["default"].error(me.props.locale === 'zh-cn' ? '起始时间晚于结束时间，请确认后重新选择' : 'The start time is later than the end time, please check & choose again!');
          }
        }
      }
    }
    me.handleDataChange(this.reverseFormatValue(values));
  };

  DateFormField.prototype.hideToolTip = function hideToolTip() {
    var toolTip = this.refs.toolTip;

    if (!toolTip || !toolTip.getPopupDomNode) {
      return;
    }
    var toolTipNode = toolTip.getPopupDomNode();
    toolTipNode && toolTipNode.classList.add('kuma-tooltip-hidden');
  };

  DateFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      var str = me.props.jsxprefixCls + ' kuma-date-uxform-field';
      if (me.props.jsxtype === 'cascade') {
        str += ' kuma-cascade-date-uxform-field';
      }
      return str;
    }
    return me.props.jsxprefixCls;
  };

  DateFormField.prototype.processTime = function processTime(time) {
    // if showTime is true or timePicker is set, we use time to compare
    // otherwise we use day to compare
    var me = this;
    var _me$props = me.props,
        showTime = _me$props.showTime,
        timePicker = _me$props.timePicker;

    if (showTime || timePicker) {
      return new Date(time).getTime();
    }
    var newTime = new Date(time);
    newTime.setHours(0);
    newTime.setMinutes(0);
    newTime.setSeconds(0);
    newTime.setMilliseconds(0);
    return newTime.getTime();
    // new Date(dateString) will parse time as UTC+0!
    // return new Date(Formatter.date(time, 'YYYY-MM-DD')).getTime();
  };

  DateFormField.prototype.formatValue = function formatValue(value) {
    var useStartEnd = this.props.useStartEnd;

    return DateFormField.metadataAdapter(value, useStartEnd);
  };

  DateFormField.prototype.reverseFormatValue = function reverseFormatValue(value) {
    var useStartEnd = this.props.useStartEnd;

    return DateFormField.metadataAdapter(value, useStartEnd, true);
  };

  DateFormField.metadataAdapter = function metadataAdapter(value, useStartEnd, reversion) {
    if (!value) {
      return null;
    }
    if (!useStartEnd) {
      return value;
    }
    return !reversion ? [value.start || value.startDate, value.end || value.endDate] : {
      start: value[0],
      end: value[1]
    };
  };

  DateFormField.prototype.renderField = function renderField() {
    var _this4 = this;

    var me = this;

    var _me$props2 = me.props,
        jsxtype = _me$props2.jsxtype,
        jsxfrom = _me$props2.jsxfrom,
        jsxto = _me$props2.jsxto,
        disabledDate = _me$props2.disabledDate,
        panel = _me$props2.panel,
        defaultValue = _me$props2.defaultValue,
        others = _objectWithoutProperties(_me$props2, ['jsxtype', 'jsxfrom', 'jsxto', 'disabledDate', 'panel', 'defaultValue']);

    // remove props which cannot be passed.


    ['onSelect', 'style', 'prefixCls', 'value', 'className'].forEach(function (key) {
      delete others[key];
    });

    others.size = this.getSize();

    /* eslint-enable no-unused-vars */
    var from = jsxfrom ? me.processTime(jsxfrom) : -Infinity;
    var to = jsxto ? me.processTime(jsxto) : Infinity;
    var mode = me.props.jsxmode || me.props.mode;
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      var Panel = CalendarPanel[panel];
      if (jsxtype === 'single') {
        return _react2["default"].createElement(Panel, _extends({
          value: me.state.value,
          onSelect: me.handleChange.bind(me),
          defaultValue: defaultValue,
          disabledDate: disabledDate || function (current) {
            // if showTime is true or timePicker is set, we use time to compare
            // otherwise we use day to compare
            if (!current) {
              return false;
            }

            return me.processTime(current.getTime()) < from || me.processTime(current.getTime()) > to;
          }
        }, others));
      }
      if (jsxtype === 'cascade') {
        var arr = [];
        var others1 = void 0;
        var others2 = void 0;
        var quickSelectRanges = me.props.quickSelectRanges;

        var propsFromArray1 = {
          disabled: getPropFromArray(others.disabled, 0),
          placeholder: getPropFromArray(others.placeholder, 0),
          format: getPropFromArray(others.format, 0),
          disabledDate: getPropFromArray(disabledDate, 0),
          defaultValue: getPropFromArray(defaultValue, 0)
        };

        var propsFromArray2 = {
          disabled: getPropFromArray(others.disabled, 1),
          placeholder: getPropFromArray(others.placeholder, 1),
          format: getPropFromArray(others.format, 1),
          disabledDate: getPropFromArray(disabledDate, 1),
          defaultValue: getPropFromArray(defaultValue, 1)
        };

        var formatValue = me.formatValue(me.state.value);

        if (formatValue && formatValue[0]) {
          others1 = (0, _objectAssign2["default"])({}, others, {
            value: formatValue[0]
          }, (0, _omitBy2["default"])(propsFromArray1, _isNil2["default"]));
        } else {
          others1 = (0, _objectAssign2["default"])({}, others, {
            value: null,
            defaultValue: propsFromArray1.defaultValue || undefined
          }, (0, _omitBy2["default"])(propsFromArray1, _isNil2["default"]));
        }
        if (formatValue && formatValue[1]) {
          others2 = (0, _objectAssign2["default"])({}, others, {
            value: formatValue[1]
          }, (0, _omitBy2["default"])(propsFromArray2, _isNil2["default"]));
        } else {
          others2 = (0, _objectAssign2["default"])({}, others, {
            value: null,
            defaultValue: propsFromArray2.defaultValue || undefined
          }, (0, _omitBy2["default"])(propsFromArray2, _isNil2["default"]));
        }

        var Calendar1 = _react2["default"].createElement(Panel, _extends({
          key: 'calendar1',
          ref: me.saveRef('calendar1'),
          onSelect: me.handleCascadeChange.bind(me, 0),
          onOpenChange: function onOpenChange(iShow) {
            me.props.onOpenChange && me.props.onOpenChange.call(me, iShow);
            me.hideToolTip();
          },
          disabledDate: function disabledDate(current) {
            if (!current) {
              return false;
            }
            var now = me.processTime(current.getTime());
            return now < from || now > to;
          }
        }, others1));

        var Calendar2 = _react2["default"].createElement(Panel, _extends({
          key: 'calendar2',
          ref: me.saveRef('calendar2'),
          onOpenChange: function onOpenChange(iShow) {
            me.props.onOpenChange && me.props.onOpenChange.call(me, iShow);
            me.hideToolTip();
          },
          onSelect: me.handleCascadeChange.bind(me, 1),
          disabledDate: function disabledDate(current) {
            if (!current) {
              return false;
            }
            var now = me.processTime(current.getTime());
            var first = formatValue ? formatValue[0] : 0;
            //如果显示时间，需要将时间点前移到当前日期的0点
            if (me.props.showTime && first) {
              if (typeof first === "number") {
                first = _uxcoreFormatter2["default"].date(first, me.props.format || 'YYYY-MM-DD HH:mm:ss');
              }
              first = first.replace(/\d{1,2}:\d{1,2}:\d{1,2}/, '00:00:00');
            }
            first = me.processTime(first);
            return now < from || now > to || now < first;
          }
        }, others2));
        arr.push(Calendar1);
        arr.push(_react2["default"].createElement('span', {
          style: { width: '8px', borderBottom: '1px solid rgba(31,56,88,0.20)' },
          key: 'split',
          ref: me.saveRef('split'),
          className: 'kuma-uxform-split'
        }));
        arr.push(Calendar2);
        return _react2["default"].createElement(
          'div',
          {
            className: 'kuma-date-uxform-field-cascade',
            ref: function ref(c) {
              _this4.cascadeBox = c;
            }
          },
          quickSelectRanges.length ? _react2["default"].createElement(
            _uxcoreTooltip2["default"],
            {
              className: 'quick-selector-wrapper',
              ref: 'toolTip',
              overlayClassName: 'date-quick-range-selector',
              overlay: function overlay() {
                return _react2["default"].createElement(_RangeSelector2["default"], {
                  dateRanges: quickSelectRanges,
                  onSelect: me.handleCascadeSelect
                });
              },
              placement: 'bottomLeft'
            },
            _react2["default"].createElement(
              _reactHoverObserver2["default"],
              null,
              arr
            )
          ) : arr
        );
      }
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      var defaultFormat = 'YYYY-MM-DD';
      if (me.props.showTime || me.props.timePicker) {
        defaultFormat = 'YYYY-MM-DD HH:mm:ss';
      }
      if (panel === 'month') {
        defaultFormat = 'YYYY-MM';
      }
      if (panel === 'year') {
        defaultFormat = 'YYYY';
      }
      if (jsxtype === 'single') {
        return _react2["default"].createElement(
          'span',
          null,
          this.getViewText(me.state.value, me.props.format || defaultFormat)
        );
      }
      var _formatValue = me.formatValue(me.state.value);

      return _react2["default"].createElement(
        'span',
        null,
        _formatValue instanceof Array ? _formatValue.map(function (item) {
          return _this4.getViewText(item, me.props.format || defaultFormat);
        }).join(' - ') : _formatValue
      );
    }
    return null;
  };

  return DateFormField;
}(_uxcoreFormField2["default"]);

DateFormField.displayName = 'DateFormField';
DateFormField.propTypes = (0, _objectAssign2["default"])(_uxcoreFormField2["default"].propTypes, {
  locale: _propTypes2["default"].string,
  jsxtype: _propTypes2["default"].string,
  panel: _propTypes2["default"].string,
  useFormat: _propTypes2["default"].bool,
  autoMatchWidth: _propTypes2["default"].bool,
  quickSelectRanges: _propTypes2["default"].array,
  fixTimezoneOffset: _propTypes2["default"].bool
});
DateFormField.defaultProps = (0, _objectAssign2["default"])(_uxcoreFormField2["default"].defaultProps, {
  locale: 'zh-cn',
  hasTrigger: true,
  jsxtype: 'single',
  autoMatchWidth: false,
  panel: 'day',
  useFormat: false,
  quickSelectRanges: [],
  fixTimezoneOffset: false
});
exports["default"] = DateFormField;
module.exports = exports['default'];