'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Picker = require('rc-calendar/lib/Picker');

var _Picker2 = _interopRequireDefault(_Picker);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames4 = require('classnames');

var _classnames5 = _interopRequireDefault(_classnames4);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _Normal = require('./timePicker/Normal');

var _Normal2 = _interopRequireDefault(_Normal);

var _RcRangeCalendar = require('./RcRangeCalendar');

var _RcRangeCalendar2 = _interopRequireDefault(_RcRangeCalendar);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _DateRangeSelector = require('./DateRangeSelector');

var _DateRangeSelector2 = _interopRequireDefault(_DateRangeSelector);

var _uxcoreTooltip = require('uxcore-tooltip');

var _uxcoreTooltip2 = _interopRequireDefault(_uxcoreTooltip);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var CalendarLocale = {};

CalendarLocale['zh-cn'] = require('rc-calendar/lib/locale/zh_CN');
CalendarLocale['en-us'] = require('rc-calendar/lib/locale/en_US');

CalendarLocale['zh-cn'] = _extends({}, CalendarLocale['zh-cn'], _locale2["default"]['zh-cn']);
CalendarLocale['en-us'] = _extends({}, CalendarLocale['en-us'], _locale2["default"]['en-us']);

var getCalendarContainer = _util2["default"].getCalendarContainer,
    generalizeFormat = _util2["default"].generalizeFormat;

var Calendar = function (_React$Component) {
  _inherits(Calendar, _React$Component);

  function Calendar(props) {
    _classCallCheck(this, Calendar);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.handleQuickRangeSelect = function (start, end) {
      _this.handleChange([(0, _moment2["default"])(start), (0, _moment2["default"])(end)]);
      _this.hideQuickSelector();
    };

    _this.state = {};
    _this.clearValue = _this.clearValue.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.TimePickerElement = _react2["default"].createElement(_Normal2["default"], { prefixCls: 'kuma-time-picker-panel' });
    return _this;
  }

  Calendar.prototype.getTriggerNode = function getTriggerNode() {
    return this.trigger;
  };

  Calendar.prototype.getDate = function getDate() {
    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var me = this;
    var _me$props = me.props,
        timezone = _me$props.timezone,
        locale = _me$props.locale;

    var value = date.map(function (item) {
      return (0, _moment2["default"])(item).locale(locale);
    });
    if (timezone) {
      return value.map(function (item) {
        return item.utcOffset(parseInt(timezone, 10) * 60);
      });
    }
    return value;
  };

  Calendar.prototype.getFormat = function getFormat() {
    var _props = this.props,
        format = _props.format,
        locale = _props.locale,
        showTime = _props.showTime;

    if (format) return format;
    var defaultFormatMap = {
      'zh-cn': {
        day: 'YYYY-MM-DD',
        time: 'YYYY-MM-DD HH:mm:ss'
      },
      'en-us': {
        day: 'DD/MM/YYYY',
        time: 'DD/MM/YYYY HH:mm:ss'
      },
      en: {
        day: 'DD/MM/YYYY',
        time: 'DD/MM/YYYY HH:mm:ss'
      }
    };
    return defaultFormatMap[locale][showTime ? 'time' : 'day'];
  };

  Calendar.prototype.clearValue = function clearValue(e) {
    e.stopPropagation();
    var onSelect = this.props.onSelect;

    onSelect(null, null);
  };

  Calendar.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  Calendar.prototype.handleChange = function handleChange(v) {
    var _this2 = this;

    var onSelect = this.props.onSelect;

    if (v) {
      var date = v.map(function (item) {
        return new Date(item.valueOf());
      });
      var formattedDate = v.map(function (item) {
        return item.format(generalizeFormat(_this2.getFormat()));
      });
      onSelect(date, formattedDate);
    } else {
      onSelect(v, v);
    }
  };

  Calendar.prototype.hideQuickSelector = function hideQuickSelector() {
    var overlay = document.querySelector('.date-quick-range-selector');
    if (overlay) {
      overlay.classList.add('kuma-tooltip-hidden');
    }
  };

  Calendar.prototype.render = function render() {
    var _classnames,
        _this3 = this;

    var me = this;
    var p = me.props;
    var timePaneNumber = 1 + p.showHour + p.showSecond;
    var calendarOptions = {
      className: (0, _classnames5["default"])((_classnames = {}, _defineProperty(_classnames, p.className, !!p.className), _defineProperty(_classnames, 'kuma-calendar-two-time-panel', timePaneNumber === 2), _defineProperty(_classnames, 'kuma-calendar-one-time-panel', timePaneNumber === 1), _defineProperty(_classnames, 'kuma-calendar-' + p.size, !!p.size), _classnames)),
      style: p.style,
      contentRender: function contentRender(current, value) {
        if (typeof p.contentRender === 'function') {
          var date = current.clone();
          date.getTime = current.valueOf;
          date.getDayOfMonth = date.date;
          return p.contentRender(date, value);
        }
        return current.date();
      },
      disabledDate: function disabledDate(current) {
        if (typeof p.disabledDate === 'function' && current) {
          var date = current.clone();
          date.getTime = current.valueOf;
          return p.disabledDate(date);
        }
        return false;
      },
      disabledTime: function disabledTime(current) {
        if (typeof p.disabledTime === 'function' && current) {
          var date = current.clone();
          date.getTime = current.valueOf;
          return p.disabledTime(date);
        }
        return false;
      },
      showSecond: p.showSecond,
      showHour: p.showHour,
      format: generalizeFormat(this.getFormat()),
      showWeekNumber: p.showWeekNumber,
      showToday: p.showToday,
      timePicker: p.timePicker || (p.showTime ? me.TimePickerElement : null),
      showDateInput: p.showDateInput,
      locale: CalendarLocale[p.locale],
      localeStr: p.locale,
      prefixCls: 'kuma-calendar',
      renderSidebar: p.renderSidebar ? p.renderSidebar : function () {
        return null;
      },
      renderFooter: p.renderFooter ? p.renderFooter : function () {
        return null;
      }
    };
    var pickerOptions = {
      disabled: p.disabled,
      align: p.align,
      transitionName: p.transitionName,
      onOpenChange: p.onOpenChange,
      adjustOrientOnCalendarOverflow: false,
      prefixCls: 'kuma-calendar-picker',
      placement: 'bottomLeft',
      getCalendarContainer: p.getPopupContainer || getCalendarContainer
    };

    if (p.value && Array.isArray(p.value) && p.value.length !== 0) {
      var value = this.getDate(p.value);
      pickerOptions.value = value;
      calendarOptions.defaultValue = value;
    } else {
      pickerOptions.value = null;
      calendarOptions.defaultValue = null;
    }

    if (p.defaultValue && Array.isArray(p.defaultValue) && p.defaultValue.length !== 0) {
      var _value = this.getDate(p.defaultValue);
      calendarOptions.defaultValue = _value;
      pickerOptions.defaultValue = _value;
    } else {
      var thisMonth = new Date().getMonth();
      var _value2 = [new Date().getTime(), new Date().setMonth(thisMonth + 1)];
      calendarOptions.defaultValue = this.getDate(_value2);
    }
    if (p.hasTrigger) {
      pickerOptions.trigger = _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-calender' });
    }

    var calendar = _react2["default"].createElement(_RcRangeCalendar2["default"], calendarOptions);

    var triggerStyle = {};
    if (p.inputWidth) {
      triggerStyle.width = p.inputWidth + 'px';
    }

    var inputClassName = (0, _classnames5["default"])('kuma-input', _defineProperty({}, 'kuma-input-' + p.size + '-size', !!p.size));

    var triggerClassName = (0, _classnames5["default"])('kuma-calendar-picker-input', _defineProperty({}, 'kuma-calendar-picker-input-' + p.size, !!p.size));

    return _react2["default"].createElement(
      _Picker2["default"],
      _extends({
        calendar: calendar,
        onChange: me.handleChange
      }, pickerOptions),
      function (_ref) {
        var value = _ref.value;

        var showClear = p.allowClear ? value && !p.disabled : false;
        var newValue = value;
        if (newValue) {
          newValue = newValue.map(function (item) {
            return (0, _moment2["default"])(item).format(generalizeFormat(_this3.getFormat()));
          }).join(' - ');
        } else {
          newValue = '';
        }
        var field = _react2["default"].createElement(
          'span',
          { className: triggerClassName, style: triggerStyle, ref: me.saveRef('trigger') },
          _react2["default"].createElement('input', {
            value: newValue,
            readOnly: true,
            disabled: me.props.disabled,
            placeholder: me.props.placeholder || calendarOptions.locale.placeholder,
            className: inputClassName
          }),
          p.hasTrigger ? _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'riqi', className: 'kuma-calendar-trigger-icon ' + (showClear ? 'kuma-calendar-trigger-icon__has-clear' : '') }) : null,
          showClear ? _react2["default"].createElement('i', { className: 'uxcore-icon uxicon-biaodanlei-tongyongqingchu kuma-icon-close', onClick: _this3.clearValue }) : null
        );
        return p.quickSelectRanges.length ? _react2["default"].createElement(
          _uxcoreTooltip2["default"],
          {
            overlayClassName: 'date-quick-range-selector',
            overlay: function overlay() {
              return _react2["default"].createElement(_DateRangeSelector2["default"], {
                dateRanges: p.quickSelectRanges,
                onSelect: me.handleQuickRangeSelect
              });
            },
            placement: 'bottomLeft'
          },
          field
        ) : field;
      }
    );
  };

  return Calendar;
}(_react2["default"].Component);

Calendar.displayName = 'Calendar';
Calendar.defaultProps = {
  placeholder: '',
  onSelect: function onSelect() {},

  locale: 'zh-cn',
  align: {
    offset: [0, 0]
  },
  allowClear: true,
  showSecond: true,
  showHour: true,
  showDateInput: true,
  hasTrigger: true,
  transitionName: 'calendarSlideUp',
  quickSelectRanges: []
};
Calendar.propTypes = {
  format: _propTypes2["default"].string,
  inputWidth: _propTypes2["default"].number,
  placeholder: _propTypes2["default"].string,
  onSelect: _propTypes2["default"].func,
  locale: _propTypes2["default"].string,
  allowClear: _propTypes2["default"].bool,
  hasTrigger: _propTypes2["default"].bool,
  showSecond: _propTypes2["default"].bool,
  showTime: _propTypes2["default"].bool,
  showHour: _propTypes2["default"].bool,
  getPopupContainer: _propTypes2["default"].func,
  quickSelectRanges: _propTypes2["default"].array
};

exports["default"] = Calendar;
module.exports = exports['default'];