'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * 大日历组件处理思路
                                                                                                                                                                                                                                                                   * step1： initEvents 初始化事件，包括对事件日期是否正确的处理，进行排序;
                                                                                                                                                                                                                                                                   * step2: splitEvents 对于跨日程事件进行拆分 splitEvents;
                                                                                                                                                                                                                                                                   * step3: sortByEventRender 对于事件按日期进行排序;
                                                                                                                                                                                                                                                                   * step4：handleEvents 为日程事件添加日程容器;
                                                                                                                                                                                                                                                                   * step5: computeEventStyle 计算事件在面板中的位置
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var WEEK_COLUMN = 6;
var MONTH_CELL_HEIGHT = 22;
var PRE_WHITE_SPACE = 0.005; //为日、周预留的空白距离

function getTime(props) {
  var startHour = props.startHour,
      value = props.value;

  var newStartHour = typeof startHour !== 'undefined' ? parseInt(startHour, 10) : 9;
  return (0, _moment2["default"])(value).hour(newStartHour).minute(0);
}

/**
 * 根据事件的开始时间进行排序
 * @param {array} events 事件数组
 */
function sortByEventRender(events) {
  return (0, _lodash.sortBy)(events, function (e) {
    return (0, _moment2["default"])(e.start).valueOf();
  });
}

function getMomentValue(date, hour) {
  return (0, _moment2["default"])(date).set({ hour: hour, minute: 0, second: 0, millisecond: 0 }).valueOf();
}

function getFormatDate(value, format) {
  return (0, _moment2["default"])(value).format(format);
}

/**
 * 获取日期是星期几
 * @param {object} date;
 */
function getDateDay(date) {
  var day = (0, _moment2["default"])(date).day();
  return day === 0 ? 7 : day;
}

/**
 * 是否在同一行
 * @param {object} target 比较对象
 * @param {object} source 被比较对象
 */
function inSameRow(target, source) {
  if (!target || !source) {
    return false;
  }
  var isLt = (0, _moment2["default"])(source.start).isBefore((0, _moment2["default"])(source.start));
  isLt = isLt && (0, _moment2["default"])(source.start).isAfter((0, _moment2["default"])(target.end));
  var isEq = (0, _moment2["default"])(source.start).isSame((0, _moment2["default"])(source.start));
  isEq = isEq && (0, _moment2["default"])(source.end).isSame((0, _moment2["default"])(source.end));

  return isLt || isEq;
}

/**
 * 获取当月第一天或最后一天与target差距的天数
 * @param {*} target
 * @param {*} source // 面板的当前时间
 */
function getCurrentMonthDiffToStart(target, source) {
  var prevDiffDays = 0;
  var afterDiffDays = 0;
  var currentFirstOfMonthDay = 0;
  var currentLastOfMonthDay = 0;
  var currentFirstOfMonth = '';
  var currentLastOfMonth = '';

  if (source) {
    currentFirstOfMonth = (0, _moment2["default"])(source).startOf('month');
    currentLastOfMonth = (0, _moment2["default"])(source).endOf('month');
    prevDiffDays = (0, _moment2["default"])(currentFirstOfMonth).diff(target, 'days');
    afterDiffDays = (0, _moment2["default"])(currentLastOfMonth).diff(target, 'days');
    currentFirstOfMonthDay = currentFirstOfMonth.day();
    currentLastOfMonthDay = currentLastOfMonth.day();
  }

  return {
    prevDiffDays: prevDiffDays,
    afterDiffDays: afterDiffDays,
    currentFirstOfMonthDay: currentFirstOfMonthDay,
    currentLastOfMonthDay: currentLastOfMonthDay,
    currentFirstOfMonth: currentFirstOfMonth,
    currentLastOfMonth: currentLastOfMonth
  };
}

/**
 * 获取当前日期在月面板的第几行
 */
function getMonthEventTop(start) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var value = opts.value;


  if (Object.keys(opts).length !== 0) {
    var _getCurrentMonthDiffT = getCurrentMonthDiffToStart(start, value),
        prevDiffDays = _getCurrentMonthDiffT.prevDiffDays,
        afterDiffDays = _getCurrentMonthDiffT.afterDiffDays;
    // 是否属于前一个月


    if (prevDiffDays >= 0 && afterDiffDays > 0) {
      return 0;
    }
    if (prevDiffDays < 0 && afterDiffDays <= 0) {
      return 5;
    }
  }

  var diffDate = (0, _moment2["default"])(+new Date(start)).startOf('month').day();
  var firstDayOfMonthPanel = diffDate + (0, _moment2["default"])(start).date() - 1;

  return Math.ceil(Math.abs(firstDayOfMonthPanel) / 7) - 1;
}

/**
 * 判断是日期相同
 * @param {object} target 比较对象
 * @param {object} source 被比较对象
 */
function isSameDateByType(target, source) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'month';

  if (!(0, _moment2["default"])(target).isSame(source, type) && type === 'month') {
    var _getCurrentMonthDiffT2 = getCurrentMonthDiffToStart(target, source),
        prevDiffDays = _getCurrentMonthDiffT2.prevDiffDays,
        afterDiffDays = _getCurrentMonthDiffT2.afterDiffDays,
        currentFirstOfMonthDay = _getCurrentMonthDiffT2.currentFirstOfMonthDay;

    var isPreThenCurrent = prevDiffDays >= 0 && prevDiffDays <= currentFirstOfMonthDay;
    var isAfterThenCurrent = afterDiffDays <= 0 && Math.abs(afterDiffDays) <= 7;
    return isPreThenCurrent || isAfterThenCurrent;
  }

  return (0, _moment2["default"])(target).isSame(source, type);
}

function getWeekStartEnd(current) {
  var day = getDateDay(current);
  var firstDate = (0, _moment2["default"])(current).subtract(day - 1, 'd');
  var lastDate = (0, _moment2["default"])(current).add(7 - day, 'd');
  return { firstDate: firstDate, lastDate: lastDate };
}

/**
 * 判断是否在同一周
 * @param {moment} start 事件的开始时间
 * @param {moment} current 当前时间
 */
function inSameWeek(start, current) {
  var _getWeekStartEnd = getWeekStartEnd(current),
      firstDate = _getWeekStartEnd.firstDate,
      lastDate = _getWeekStartEnd.lastDate;

  if ((0, _moment2["default"])(start).isBetween(firstDate, lastDate)) {
    return true;
  }
  return (0, _moment2["default"])(start).isSame(firstDate, 'Date') || (0, _moment2["default"])(start).isSame(lastDate, 'Date');
}

/**
 * 获取是否处于当前面板中
 * @param {object} event 事件
 * @param {object} opts 大日历组件传入的相关参数 opts : {type,step,startHour,endHour}
 */
function isInCurrentPanle(event, opts) {
  var value = opts.value,
      type = opts.type;
  var start = event.start,
      end = event.end;


  if ((0, _moment2["default"])(end).valueOf() - (0, _moment2["default"])(start).valueOf() < 0) {
    return false;
  }
  if (type === 'week') {
    return inSameWeek(start, value);
  }
  var typeHash = { time: 'day', month: 'month' };
  return isSameDateByType(start, value, typeHash[type]);
}

/**
 * 根据指定格式、分隔符获取hash值
 * @param {moment} start 开始时间
 * @param {moment} end 结束时间
 * @param {string} format 格式
 * @param {string} splitStr 分隔符
 */
function getHashKeyByFomart(start, end, format, splitStr, type) {
  var startKey = getFormatDate(start, format);
  if (start && end) {
    // 说明 是上一天的24点
    var endKey = '';
    if ((0, _moment2["default"])(end).hour() === 0) {
      if (type !== 'month') {
        endKey = startKey;
      } else {
        endKey = getFormatDate((0, _moment2["default"])(end).subtract(1, 'days'), format);
      }
    } else {
      endKey = getFormatDate(end, format);
    }
    return '' + startKey + splitStr + endKey;
  }
  return startKey;
}

/**
 * 获取月面板中的容器hash值
 * @param {object} event
 */
function getMonthContainerHash(event, containerEvents) {
  var start = event.start,
      end = event.end;


  for (var i = 0, len = containerEvents.length; i < len; i++) {
    var containerEvent = containerEvents[i];
    var containerStart = containerEvent.start,
        containerEnd = containerEvent.end;

    if ((0, _moment2["default"])(start).valueOf() >= (0, _moment2["default"])(containerStart).valueOf() && (0, _moment2["default"])(end).valueOf() <= (0, _moment2["default"])(containerEnd).valueOf()) {
      return getHashKeyByFomart(containerStart, containerEnd, 'YYYY-MM-DD', '~', 'month');
    }
  }

  return getHashKeyByFomart(start, end, 'YYYY-MM-DD', '~', 'month');
}

/**
 * 获取容器的hash key值
 * @param {object} event 获取事件 ;
 * @param {objec} opts ;
 */
function getHashKey(event, opts, containerEvents) {
  var type = opts ? opts.type : 'week';
  var start = event.start,
      end = event.end,
      isColspan = event.isColspan;


  if (type === 'month') {
    return getMonthContainerHash(event, containerEvents);
  }

  return getHashKeyByFomart(start, end, 'YYYY-MM-DD', '~');
}

/**
 * 判断当前开始时间是否存在于现有容器数组中
 * @param {array} containers  //
 * @param {moment} start
 */
function findContainer(containers, start) {
  return containers.find(function (c) {
    return (0, _moment2["default"])(c.end).valueOf() > (0, _moment2["default"])(start).valueOf();
  });
}

/**
 * 处理事件间的包含所属关系
 * @param {array} events
 */
function handleEvents(events, opts) {
  var containerEvents = [];
  var wraperHtml = {};

  for (var i = 0, len = events.length; i < len; i++) {
    var event = events[i];
    var start = event.start,
        end = event.end,
        isColspan = event.isColspan;

    var hashKey = getHashKey(event, opts, containerEvents);

    if (!wraperHtml[hashKey]) {
      wraperHtml[hashKey] = {
        children: [],
        date: start,
        end: end,
        isColspan: isColspan,
        monthTop: isColspan && getMonthEventTop(start, opts),
        isContainer: true,
        sameDateArr: []
      };
    }

    wraperHtml[hashKey].children.push(event);
    var container = findContainer(containerEvents, start);

    if (!container) {
      event.rows = [];
      containerEvents.push(event);
    } else {
      // 找到evet的容器
      event.container = container;
      var row = null;
      for (var r = container.rows.length - 1; !row && r >= 0; r--) {
        if (inSameRow(event, container.rows[r])) {
          row = container.rows[r];
        }
      }
      if (row) {
        row.leaves.push(event);
        event.row = row;
      } else {
        event.leaves = [];
        container.rows.push(event);
      }
    }
  }
  return wraperHtml;
}

/**
 *处理月面板中事件的展现
 * @param {object} event  事件
 */
function computeMonthEventStyle(event) {
  var end = event.end,
      isColspan = event.isColspan,
      monthTop = event.monthTop,
      children = event.children,
      start = event.start,
      date = event.date;

  var eventStart = start || date;
  var top = !Number.isNaN(Number(monthTop)) ? monthTop : getMonthEventTop(eventStart);
  var widthSlice = 7;
  var diffEvent = (0, _moment2["default"])(end).diff(eventStart, 'days') + 1;

  var startDate = getDateDay(eventStart);
  var offsetx = (startDate - 1) / 7;

  if (event.isContainer) {
    return {
      width: 1 - PRE_WHITE_SPACE,
      offsetX: PRE_WHITE_SPACE,
      top: top / WEEK_COLUMN
    };
  }

  return {
    width: children && isColspan ? 1 - PRE_WHITE_SPACE : 1 / widthSlice * diffEvent - PRE_WHITE_SPACE,
    offsetX: children && isColspan ? PRE_WHITE_SPACE : offsetx,
    top: top / WEEK_COLUMN
  };
}

/**
 *计算事件的样式
 * @param {*} event 事件
 * @param {*} type 类型
 */
function computeEventStyle(event, type) {
  if (type === 'month') {
    return computeMonthEventStyle(event);
  }

  var end = event.end,
      isColspan = event.isColspan,
      children = event.children,
      start = event.start,
      date = event.date;


  var eventStart = start || date;
  var startDay = getDateDay(eventStart);

  var widthSlice = 1;
  var offsetx = 0;
  var diffEvent = 0;

  if (type !== 'time' && (children || isColspan)) {
    widthSlice = 7;
    var endDate = (0, _moment2["default"])(end).date();
    var startDate = (0, _moment2["default"])(eventStart).date();

    // 判断 24 跟 0 的界限，24算当天的最后时间
    if (endDate - startDate === 1 && (0, _moment2["default"])(end).hour() == 0) {
      diffEvent = 1;
    } else {
      diffEvent = endDate - startDate + 1;
    }
    offsetx = (startDay - 1) / 7;
    return {
      width: children && isColspan ? 1 - PRE_WHITE_SPACE : 1 / widthSlice * diffEvent - PRE_WHITE_SPACE * 2,
      offsetX: children && isColspan ? PRE_WHITE_SPACE : offsetx + PRE_WHITE_SPACE,
      top: 0
    };
  }

  if ((!event.rows || !event.rows.length) && !event.container) {
    // 为外层包裹元素
    if (event.isContainer) {
      return {
        width: 1 / widthSlice - PRE_WHITE_SPACE * 2,
        offsetX: offsetx + PRE_WHITE_SPACE
      };
    }

    return {
      width: 1 / widthSlice,
      offsetX: offsetx
    };
  }

  if (event.rows) {
    var columns = event.rows.reduce(function (max, row) {
      return Math.max(max, row.leaves.length + 1);
    }, 0) + 1;
    return {
      width: 1 / (columns * widthSlice) - PRE_WHITE_SPACE * 2,
      offsetX: offsetx
    };
  }

  if (event.leaves) {
    var totalCount = event.leaves.length + 2;
    var avaliableWidth = event.container.width;
    var leftWidth = 1 - avaliableWidth * totalCount;
    var _averOffsetX = leftWidth / (totalCount - 1);
    offsetx = avaliableWidth + event.container.offsetX + _averOffsetX;
    return { width: avaliableWidth, offsetX: offsetx };
  }

  var _event$row = event.row,
      leaves = _event$row.leaves,
      offsetX = _event$row.offsetX;

  var idx = leaves.indexOf(event);
  var averOffsetX = offsetX - event.row.width;

  return {
    width: event.row.width,
    offsetX: (event.row.width + averOffsetX) * (idx + 1) + offsetX
  };
}

/**
 * 拆分月面板事件
 * @param {object} event 事件
 * @param {number} diffDays 事件头尾相差的天数
 */
function splitMonthEvents(event, diffDays) {
  var arrs = [];
  var start = event.start,
      end = event.end,
      render = event.render;

  var startDay = getDateDay(start);
  var eStart = (0, _moment2["default"])(start).valueOf();
  var eEnd = (0, _moment2["default"])(end).valueOf();
  // 头尾不在月面板中的一行
  if (startDay + diffDays > 7) {
    var splitDays = Math.ceil(Math.abs(7 - (startDay + diffDays)) / 7);
    for (var i = 0; i <= splitDays; i++) {
      var startTime = i === 0 ? start : (0, _moment2["default"])(eStart).add(8 - startDay + 7 * (i - 1), 'd');
      var endTime = i === splitDays ? end : (0, _moment2["default"])(eStart).add(7 - startDay + 7 * i, 'd');
      arrs.push(_extends({}, event, {
        start: startTime,
        end: endTime,
        render: render,
        eStart: eStart,
        eEnd: eEnd,
        isColspan: true
      }));
    }
  } else {
    // 头尾在月面板中的一行
    arrs.push(_extends({}, event, {
      start: start,
      end: end,
      render: render,
      eStart: eStart,
      eEnd: eEnd,
      isColspan: diffDays >= 1
    }));
  }
  return arrs;
}

function getCorrectEventsDate(event, opts) {
  var startHour = opts.startHour,
      endHour = opts.endHour;
  var start = event.start,
      end = event.end;

  var eHour = (0, _moment2["default"])(end).hour();
  var newEnd = eHour > endHour ? (0, _moment2["default"])(end).hour(endHour) : end;
  var sHour = (0, _moment2["default"])(start).hour();
  var newStart = sHour < startHour ? (0, _moment2["default"])(start).hour(startHour) : start;
  return _extends({}, event, { newEnd: newEnd, newStart: newStart });
}

/**
 * 拆分事件，是否为跨天事件
 * @param {object} event
 * @param {number} diffDays
 * @param {object} opts
 */

function splitEvents(event, diffDays, opts) {
  var arrs = [];
  var startHour = opts.startHour,
      endHour = opts.endHour,
      type = opts.type;
  var start = event.start,
      end = event.end,
      render = event.render;


  if (type === 'month') {
    return splitMonthEvents(event, diffDays);
  }

  var _getCorrectEventsDate = getCorrectEventsDate(event, opts),
      newStart = _getCorrectEventsDate.newStart,
      newEnd = _getCorrectEventsDate.newEnd;

  var eStart = (0, _moment2["default"])(start).valueOf();
  var eEnd = (0, _moment2["default"])(end).valueOf();

  for (var i = 0; i <= diffDays; i++) {
    var startTime = i === 0 ? newStart : (0, _moment2["default"])(eStart).add(i, 'd').hour(startHour).minute(0);

    var endTime = i === diffDays ? newEnd : (0, _moment2["default"])(startTime).hour(endHour).minute(0);
    arrs.push(_extends({}, event, {
      start: startTime,
      end: endTime,
      render: render,
      eStart: eStart,
      eEnd: eEnd
    }));
  }

  return arrs;
}

function initEvents(events, opts) {
  var resultEvents = [];

  events.forEach(function (event) {
    var start = event.start,
        end = event.end,
        name = event.name;

    var diffDate = (0, _moment2["default"])(end).diff((0, _moment2["default"])(start), 'days');
    event.name = name || 'event_' + setTimeout(0);
    if (diffDate > 0) {
      resultEvents = resultEvents.concat(splitEvents(event, diffDate, opts));
    } else {
      var _getCorrectEventsDate2 = getCorrectEventsDate(event, opts),
          newStart = _getCorrectEventsDate2.newStart,
          newEnd = _getCorrectEventsDate2.newEnd;

      event.start = newStart;
      event.end = newEnd;
      resultEvents.push(event);
    }
  });

  return resultEvents;
}

/**
 * 拆分跨日程事件
 * @param {object} event  事件
 * @param {number} continuousDay 连续的天数
 */
function handleSplitEvent(event, continuousDay) {
  var arrs = [];
  var start = event.start,
      render = event.render;


  for (var i = 0; i <= continuousDay; i++) {
    var startTime = (0, _moment2["default"])(start).add(i, 'd').format('YYYY-MM-DD');
    arrs.push({
      start: startTime,
      end: startTime,
      render: render
    });
  }
  return arrs;
}

/**
 * 处理事件，拆分为天
 * @param {array} events 事件数组
 */
function handlePropsEvents(events) {
  var results = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  events.forEach(function (event) {
    var start = event.start,
        end = event.end;

    var startKey = (0, _moment2["default"])(start).format('YYYY-MM-DD');
    var diffDate = (0, _moment2["default"])(end).diff((0, _moment2["default"])(start), 'days');
    if (diffDate > 0) {
      var splitResultEvents = handleSplitEvent(event, diffDate);
      handlePropsEvents(splitResultEvents, results);
    } else {
      if (!results[startKey]) {
        results[startKey] = {
          events: []
        };
      }
      results[startKey].events.push(event);
    }
  });
}

function getEventTopHeight(event, opts, sourceDate) {
  var startHour = opts.startHour,
      current = opts.current,
      slicePiece = opts.slicePiece,
      step = opts.step,
      type = opts.type,
      value = opts.value;
  var start = event.start;
  var sourceStart = sourceDate.sourceStart,
      sourceEnd = sourceDate.sourceEnd;

  var startCurrent = getMomentValue(value, startHour);

  var totalSeconds = (slicePiece + 2) * step * 60 * 1000;
  var evetTop = void 0;
  var eventHeight = void 0;

  if (type === 'time') {
    var diffStartCurrent = Math.abs(sourceStart - startCurrent) + step * 60 * 1000;
    var diffEventHeight = sourceEnd - sourceStart;
    evetTop = diffStartCurrent / totalSeconds + 0.005;
    eventHeight = diffEventHeight / totalSeconds - 0.01;
    return { top: evetTop, height: eventHeight };
  }
  if (type === 'week') {
    startCurrent = getMomentValue(start, startHour);

    var _diffStartCurrent = sourceStart - startCurrent + step * 60 * 1000;
    var _diffEventHeight = sourceEnd - sourceStart;
    evetTop = _diffStartCurrent / totalSeconds + 0.005;

    eventHeight = _diffEventHeight / totalSeconds - 0.01;
    return { top: evetTop, height: eventHeight };
  }
  return { top: 0, height: 0 };
}
function handleEventsInSameDate(eventsContainer, opts) {
  var value = opts.value,
      type = opts.type;

  var events = eventsContainer.children;
  var rangeEvents = [];
  events.forEach(function (event) {
    var start = event.start,
        end = event.end;

    var eStart = (0, _moment2["default"])(start).valueOf();
    var eEnd = (0, _moment2["default"])(end).valueOf();
    var sourceDate = {
      sourceStart: eStart,
      sourceEnd: eEnd
    };

    // 在同一个面板中
    if (isInCurrentPanle(event, opts)) {
      // 获取事件的top值和高度
      var _getEventTopHeight = getEventTopHeight(event, opts, sourceDate),
          top = _getEventTopHeight.top,
          height = _getEventTopHeight.height;

      var _computeEventStyle = computeEventStyle(event, type, value),
          width = _computeEventStyle.width,
          offsetX = _computeEventStyle.offsetX;

      var evetObj = {};
      if (!Number.isNaN(Number(width)) && !Number.isNaN(Number(offsetX))) {
        event.width = width;
        event.offsetX = offsetX;
        evetObj = {
          event: event,
          top: top,
          height: height,
          width: width,
          offsetX: offsetX
        };
      } else {
        evetObj = {
          event: event
        };
      }
      rangeEvents.push(evetObj);
    }
  });

  return rangeEvents;
}

/**
 * 获取同事件的容器
 * @param {*} events
 * @param {*} opts
 */
function getEventContainer(events, opts) {
  var type = opts.type,
      current = opts.current;

  var targetEvents = (0, _lodash.cloneDeep)(events);

  //拆分连续时间超过1天的事件
  var newEvents = initEvents(targetEvents, opts);

  // 对事件进行排序
  var sortedEvents = sortByEventRender(newEvents);

  // 获取同一段事件的容器位置
  var containerEvents = handleEvents(sortedEvents, opts);

  // 筛选位于同一面板
  return getCanRenderEventInVisiblePan(containerEvents, opts);
}

/**
 * 获取当前面板中可视的事件去渲染
 * @param {array} events
 * @param {opts} opts
 */

function getCanRenderEventInVisiblePan(events, opts) {
  var type = opts.type,
      current = opts.current,
      value = opts.value;


  var containerEventsKeys = Object.keys(events);
  containerEventsKeys = (containerEventsKeys || []).filter(function (key) {
    var times = key.split('~');
    return isInCurrentPanle({ start: times[0], end: times[1] }, opts);
  });

  var renderEvents = [];

  // 在当前面板中可视才渲染
  containerEventsKeys.forEach(function (key) {
    if (containerEventsKeys.includes(key)) {
      var wrapSchedule = events[key];
      var containerStyle = computeEventStyle(wrapSchedule, type, value);
      wrapSchedule.height = type === 'month' ? 1 / 6 - PRE_WHITE_SPACE : 1;
      wrapSchedule.top = containerStyle.top;
      wrapSchedule.width = containerStyle.width;
      wrapSchedule.offsetX = containerStyle.offsetX;
      events[key].children = handleEventsInSameDate(wrapSchedule, opts, events);
      renderEvents.push(wrapSchedule);
    }
  });

  return renderEvents;
}

function go2More(event, opts) {
  var seeEventsDetail = opts.seeEventsDetail;

  seeEventsDetail('time', event);
}

/**
 * 获取月面板中能显示的事件个数
 * @param {object} event 事件
 * @param {array} moreInfoEvents 更多事件数组
 */
function handleShowMoreInfo(event, moreInfoEvents) {
  var start = event.start,
      end = event.end,
      important = event.important;

  var diffDate = Math.abs((0, _moment2["default"])(start).diff(end, 'days'));
  for (var i = 0, len = diffDate; i <= len; i++) {
    var keyDate = (0, _moment2["default"])(start).add(i, 'd');
    var startKey = keyDate.format('YYYY-MM-DD');

    var day = getDateDay(keyDate);
    if (moreInfoEvents[startKey]) {
      moreInfoEvents[startKey].count += 1;
    } else {
      moreInfoEvents[startKey] = {
        key: startKey,
        important: important,
        count: 1,
        offsetX: (day - 1) / 7,
        width: 1 / 7
      };
    }
  }
}

function getJSXfromMoreInfos(moreInfoEvents, maxCount, opts) {
  var _this = this;

  var jsxArr = [];
  var eventKeys = Object.keys(moreInfoEvents);
  var now = new Date();
  eventKeys.forEach(function (event) {
    var info = moreInfoEvents[event];
    var offsetX = info.offsetX,
        count = info.count,
        key = info.key,
        width = info.width,
        important = info.important;

    var moreStyle = {
      left: offsetX * 100 + '%',
      width: width * 100 + '%'
    };
    var moreEvent = (0, _classnames2["default"])({
      'more-event': true,
      important: !!important
    });
    var moreIcon = (0, _classnames2["default"])({
      'more-icon': maxCount > -1,
      'hot-icon': maxCount === -1,
      past: (0, _moment2["default"])(event).isBefore((0, _moment2["default"])(now), 'date'),
      today: (0, _moment2["default"])(event).isSame((0, _moment2["default"])(now), 'date')
    });
    jsxArr.push(_react2["default"].createElement(
      'div',
      {
        className: moreEvent,
        style: moreStyle,
        key: key,
        onClick: go2More.bind(_this, event, opts)
      },
      maxCount > -1 && _react2["default"].createElement(
        'span',
        null,
        count,
        ' \u6761'
      ),
      !!important && maxCount === -1 && _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'zhongyaoshijian', usei: true, className: 'import-event' }),
      (!important || maxCount > -1) && _react2["default"].createElement('span', { className: moreIcon })
    ));
  });
  return jsxArr;
}
/**
 * 获取月面板中最多能显示的事件个数
 * @param {array} events 传入的事件
 * @param {number} maxCount 显示的最大数据
 * @param {object} opts 日历参数
 * @param {function} callback 选中后的回调
 */
function getVisibleEvent(events, maxCount, opts) {
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

  var isMonthType = opts.type === 'month';
  var resultArr = [];
  var eventLen = events.length;
  var moreInfoEvents = {};

  var _loop = function _loop(i) {
    var event = events[i];
    var originEvt = event.event;
    var start = originEvt.start,
        render = originEvt.render,
        important = originEvt.important,
        title = originEvt.title;

    if (isMonthType) {
      handleShowMoreInfo(originEvt, moreInfoEvents);
    }

    if (resultArr.length < maxCount) {
      var importantCls = (0, _classnames2["default"])({
        'kuma-calendar-content-box': true,
        'red-important': !!important
      });
      var eStyle = {
        top: event.top * 100 + '%',
        height: event.height * 100 + '%',
        left: event.offsetX * 100 + '%',
        width: event.width * 100 + '%'
      };

      var content = render ? typeof render === 'function' ? render(event) : render : title ? title : (0, _moment2["default"])(start).date();

      resultArr.push(_react2["default"].createElement(
        'div',
        {
          className: importantCls,
          key: i,
          style: eStyle,
          onClick: function onClick(e) {
            callback(e, originEvt);
          }
        },
        _react2["default"].createElement(
          'div',
          {
            className: 'kuma-calendar-content-wraper',
            'data-event-name': originEvt.name,
            onMouseEnter: function onMouseEnter(e) {
              var eventName = e.currentTarget.getAttribute('data-event-name');
              document.querySelectorAll('[data-event-name]').forEach(function (item) {
                if (item.getAttribute('data-event-name') === eventName) {
                  item.classList.add('hover');
                }
              });
            },
            onMouseLeave: function onMouseLeave() {
              document.querySelectorAll('[data-event-name]').forEach(function (item) {
                item.classList.remove('hover');
              });
            }
          },
          _react2["default"].createElement(
            'div',
            {
              className: 'kuma-calendar-content-detail',
              title: (typeof content === 'undefined' ? 'undefined' : _typeof(content)) !== 'object' ? content : '',
              style: originEvt.style || {}
            },
            !!important && _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'zhongyaoshijian', usei: true, className: 'import-event' }),
            content
          )
        )
      ));
    }
  };

  for (var i = 0; i < eventLen; i++) {
    _loop(i);
  }

  if (isMonthType && (resultArr.length < eventLen || resultArr.length === 0)) {
    resultArr = resultArr.concat(getJSXfromMoreInfos(moreInfoEvents, maxCount, opts));
  }

  return resultArr;
}

/**
 *  * 获取月面板中最多能显示的事件个数跟当前事件的top值
 * @param {number} tableHeight 表格的高度
 */

function getMonthTopAndMaxCount(tableHeight) {
  var fulltMonthTableHeight = tableHeight || 0;
  var maxCount = 99;
  var cellContainerHeight = (fulltMonthTableHeight - 34 - MONTH_CELL_HEIGHT) / WEEK_COLUMN;
  if (cellContainerHeight <= 50 && cellContainerHeight > 0) {
    maxCount = -1;
  } else if (cellContainerHeight > 50 && cellContainerHeight < 65) {
    maxCount = 0;
  } else {
    maxCount = Math.floor((cellContainerHeight - MONTH_CELL_HEIGHT) / MONTH_CELL_HEIGHT) - 1;
  }

  var currentDateHight = cellContainerHeight * 0.22;
  currentDateHight = currentDateHight < 18 ? 18 : currentDateHight;
  currentDateHight += 4;

  return { maxCount: maxCount, currentDateHight: currentDateHight };
}

/**
 * 生成跨日程的事件提醒
 * @param
 * ({
 *  start: '2018-11-12 12:00',
 *  end: '2018-11-12 14:00',
 *  render: function(){}
 * })
 */
var generateScheduleContent = function generateScheduleContent(events, callback) {
  return function scheduleRender(evts, opts, tableHeight) {
    if (!evts || !evts.length) {
      return;
    }

    var containerEvents = getEventContainer(evts, opts);

    var resultScheduleHtml = [];
    var eventsKeys = Object.keys(containerEvents);

    var isMonthType = opts.type === 'month';
    var isWeekType = opts.type === 'week';
    var isDayType = opts.type === 'time';

    for (var i = 0, len = eventsKeys.length; i < len; i++) {
      var key = eventsKeys[i];
      var container = containerEvents[key];

      var rangeEvents = container.children,
          width = container.width,
          offsetX = container.offsetX,
          height = container.height,
          top = container.top,
          isColspan = container.isColspan,
          end = container.end,
          monthTop = container.monthTop;


      var monthMaxCount = 99;
      var currentMonthDateHight = 0;
      var extraMonthPaddingTop = 0;

      if (isMonthType) {
        var _getMonthTopAndMaxCou = getMonthTopAndMaxCount(tableHeight),
            maxCount = _getMonthTopAndMaxCou.maxCount,
            currentDateHight = _getMonthTopAndMaxCou.currentDateHight;

        monthMaxCount = maxCount;
        currentMonthDateHight = currentDateHight;
        // 月视图中展示的日期会占据一定的空间
        var isSameDate = monthTop === getMonthEventTop(opts.current, opts);
        extraMonthPaddingTop = 28;
        if (isSameDate) {
          extraMonthPaddingTop = currentMonthDateHight;
          monthMaxCount = monthMaxCount - 1;
        }
      }

      var containerStyle = {
        width: width * 100 + '%',
        left: offsetX * 100 + '%',
        top: top ? top * 100 + '%' : 0,
        paddingTop: isMonthType ? extraMonthPaddingTop : 0,
        height: height * 100 + '%'
      };

      var containerCls = (0, _classnames2["default"])({
        'cell-container': true,
        'colspan-cell': isColspan,
        'hide-event': isMonthType && !monthMaxCount
      });

      resultScheduleHtml.push(_react2["default"].createElement(
        'div',
        { className: containerCls, key: i, style: containerStyle },
        getVisibleEvent(rangeEvents, monthMaxCount, opts, callback)
      ));
    }

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames2["default"])('events-wrapper', {
          'events-month-wrapper': isMonthType,
          'events-week-wrapper': isWeekType,
          'events-day-wrapper': isDayType
        })
      },
      resultScheduleHtml
    );
  }.bind(null, events);
};

exports["default"] = {
  handlePropsEvents: handlePropsEvents,
  getFormatDate: getFormatDate,
  inSameWeek: inSameWeek,
  generateScheduleContent: generateScheduleContent,
  getTime: getTime
};
module.exports = exports['default'];