'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // customized rc-calendar https://github.com/react-component/calendar/blob/master/src/Calendar.jsx

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _CalendarMixin = require('rc-calendar/lib/mixin/CalendarMixin');

var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

var _CommonMixin = require('rc-calendar/lib/mixin/CommonMixin');

var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

var _DateInput = require('rc-calendar/lib/date/DateInput');

var _DateInput2 = _interopRequireDefault(_DateInput);

var _index = require('rc-calendar/lib/util/index');

var _KeyCode = require('rc-util/lib/KeyCode');

var _KeyCode2 = _interopRequireDefault(_KeyCode);

var _CalendarFooter = require('./CalendarFooter');

var _CalendarFooter2 = _interopRequireDefault(_CalendarFooter);

var _CalendarHeader = require('./CalendarHeader');

var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);

var _DateTable = require('./date/DateTable');

var _DateTable2 = _interopRequireDefault(_DateTable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function noop() {}

function goStartMonth() {
  var next = this.state.value.clone();
  next.startOf('month');
  this.setValue(next);
}

function goEndMonth() {
  var next = this.state.value.clone();
  next.endOf('month');
  this.setValue(next);
}

function goTime(direction, unit) {
  var next = this.state.value.clone();
  next.add(direction, unit);
  this.setValue(next);
}

function goMonth(direction) {
  return goTime.call(this, direction, 'months');
}

function goYear(direction) {
  return goTime.call(this, direction, 'years');
}

function goWeek(direction) {
  return goTime.call(this, direction, 'weeks');
}

function goDay(direction) {
  return goTime.call(this, direction, 'days');
}

var Calendar = (0, _createReactClass2["default"])({
  propTypes: {
    disabledDate: _propTypes2["default"].func,
    disabledTime: _propTypes2["default"].any,
    value: _propTypes2["default"].object,
    selectedValue: _propTypes2["default"].object,
    defaultValue: _propTypes2["default"].object,
    className: _propTypes2["default"].string,
    locale: _propTypes2["default"].object,
    showWeekNumber: _propTypes2["default"].bool,
    style: _propTypes2["default"].object,
    showToday: _propTypes2["default"].bool,
    showDateInput: _propTypes2["default"].bool,
    visible: _propTypes2["default"].bool,
    onSelect: _propTypes2["default"].func,
    onOk: _propTypes2["default"].func,
    showOk: _propTypes2["default"].bool,
    prefixCls: _propTypes2["default"].string,
    onKeyDown: _propTypes2["default"].func,
    timePicker: _propTypes2["default"].element,
    dateInputPlaceholder: _propTypes2["default"].any,
    onClear: _propTypes2["default"].func,
    onChange: _propTypes2["default"].func,
    renderFooter: _propTypes2["default"].func,
    renderSidebar: _propTypes2["default"].func,
    yearSelectTotal: _propTypes2["default"].number,
    yearSelectOffset: _propTypes2["default"].number,
    localeStr: _propTypes2["default"].string
  },

  mixins: [_CommonMixin2["default"], _CalendarMixin2["default"]],

  getDefaultProps: function getDefaultProps() {
    return {
      showToday: true,
      showDateInput: true,
      timePicker: null,
      onOk: noop
    };
  },
  getInitialState: function getInitialState() {
    return {
      showTimePicker: true
    };
  },
  onKeyDown: function onKeyDown(event) {
    if (event.target.nodeName.toLowerCase() === 'input') {
      return undefined;
    }
    var keyCode = event.keyCode;
    // mac

    var ctrlKey = event.ctrlKey || event.metaKey;
    switch (keyCode) {
      case _KeyCode2["default"].DOWN:
        goWeek.call(this, 1);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].UP:
        goWeek.call(this, -1);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].LEFT:
        if (ctrlKey) {
          goYear.call(this, -1);
        } else {
          goDay.call(this, -1);
        }
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].RIGHT:
        if (ctrlKey) {
          goYear.call(this, 1);
        } else {
          goDay.call(this, 1);
        }
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].HOME:
        goStartMonth.call(this);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].END:
        goEndMonth.call(this);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].PAGE_DOWN:
        goMonth.call(this, 1);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].PAGE_UP:
        goMonth.call(this, -1);
        event.preventDefault();
        return 1;
      case _KeyCode2["default"].ENTER:
        this.onSelect(this.state.value, {
          source: 'keyboard'
        });
        event.preventDefault();
        return 1;
      default:
        this.props.onKeyDown(event);
        return 1;
    }
  },
  onClear: function onClear() {
    this.onSelect(null);
    this.props.onClear();
  },
  onOk: function onOk() {
    var selectedValue = this.state.selectedValue;

    this.onSelect(selectedValue, {
      source: 'keyboard'
    });
  },
  onDateInputChange: function onDateInputChange(value) {
    this.onSelect(value, {
      source: 'dateInput'
    });
  },
  onDateTableSelect: function onDateTableSelect(value) {
    this.onSelect(value);
  },
  onHeaderSelect: function onHeaderSelect(value) {
    // this.onSelect(value, {
    //   source: 'dateInput',
    // });
    this.setValue(value);
  },
  onToday: function onToday() {
    var value = this.state.value;

    var now = (0, _index.getTodayTime)(value);
    this.onSelect(now, {
      source: 'todayButton'
    });
  },
  getRootDOMNode: function getRootDOMNode(node) {
    // return ReactDOM.findDOMNode(this);
    return this[node];
  },
  openTimePicker: function openTimePicker() {
    this.setState({
      showTimePicker: true
    });
  },
  closeTimePicker: function closeTimePicker() {
    this.setState({
      showTimePicker: false
    });
  },
  render: function render() {
    var _this = this;

    var _props = this.props,
        locale = _props.locale,
        prefixCls = _props.prefixCls,
        disabledDate = _props.disabledDate,
        dateInputPlaceholder = _props.dateInputPlaceholder,
        timePicker = _props.timePicker,
        disabledTime = _props.disabledTime,
        yearSelectOffset = _props.yearSelectOffset,
        yearSelectTotal = _props.yearSelectTotal,
        localeStr = _props.localeStr,
        renderFooter = _props.renderFooter;
    var _state = this.state,
        value = _state.value,
        selectedValue = _state.selectedValue,
        showTimePicker = _state.showTimePicker;

    var disabledTimeConfig = showTimePicker && disabledTime && timePicker ? (0, _index.getTimeConfig)(selectedValue, disabledTime) : null;

    var timePickerEle = timePicker && showTimePicker ? _react2["default"].cloneElement(timePicker, _extends({
      showHour: this.props.showHour,
      showSecond: this.props.showSecond,
      showMinute: true,
      locale: locale
    }, disabledTimeConfig, {
      onChange: this.onDateInputChange,
      defaultOpenValue: value,
      value: selectedValue,
      disabledTime: disabledTime
    })) : null;

    var dateInputElement = this.props.showDateInput ? _react2["default"].createElement(_DateInput2["default"], {
      ref: function ref(c) {
        _this.dateInput = c;
      },
      format: this.getFormat(),
      key: 'date-input',
      value: value,
      locale: locale,
      placeholder: dateInputPlaceholder,
      showClear: false,
      disabledTime: disabledTime,
      disabledDate: disabledDate,
      onClear: this.onClear,
      prefixCls: prefixCls,
      selectedValue: selectedValue,
      onChange: this.onDateInputChange
    }) : null;
    var children = [this.props.renderSidebar(), _react2["default"].createElement(
      'div',
      { className: prefixCls + '-panel', key: 'panel' },
      dateInputElement,
      _react2["default"].createElement(
        'div',
        { className: 'fn-clear ' + prefixCls + '-date-main' },
        _react2["default"].createElement(
          'div',
          { className: prefixCls + '-date-panel' },
          _react2["default"].createElement(_CalendarHeader2["default"], {
            locale: locale,
            localeStr: localeStr,
            onValueChange: this.onHeaderSelect,
            value: value,
            yearSelectOffset: yearSelectOffset,
            yearSelectTotal: yearSelectTotal,
            showTimePicker: showTimePicker,
            prefixCls: prefixCls
          }),
          _react2["default"].createElement(
            'div',
            { className: prefixCls + '-body' },
            _react2["default"].createElement(_DateTable2["default"], {
              locale: locale,
              localeStr: localeStr,
              value: value,
              selectedValue: selectedValue,
              prefixCls: prefixCls,
              dateRender: this.props.dateRender,
              contentRender: this.props.contentRender,
              onSelect: this.onDateTableSelect,
              disabledDate: disabledDate,
              showWeekNumber: this.props.showWeekNumber
            })
          )
        ),
        timePicker && showTimePicker ? _react2["default"].createElement(
          'div',
          { className: prefixCls + '-time-picker' },
          _react2["default"].createElement(
            'div',
            { className: prefixCls + '-time-picker-panel' },
            timePickerEle
          )
        ) : null
      ),
      renderFooter ? renderFooter() : null,
      timePicker && showTimePicker ? _react2["default"].createElement(_CalendarFooter2["default"], { locale: locale, prefixCls: prefixCls, onOk: this.onOk }) : null
    )];

    return this.renderRoot({
      children: children,
      className: this.props.showWeekNumber ? prefixCls + '-week-number' : ''
    });
  }
});

exports["default"] = Calendar;
module.exports = exports['default'];