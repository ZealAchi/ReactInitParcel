'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createReactClass = require('create-react-class');

var _createReactClass2 = _interopRequireDefault(_createReactClass);

var _MonthPanel = require('rc-calendar/lib/month/MonthPanel');

var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

var _YearPanel = require('rc-calendar/lib/year/YearPanel');

var _YearPanel2 = _interopRequireDefault(_YearPanel);

var _mapSelf = require('rc-util/lib/Children/mapSelf');

var _mapSelf2 = _interopRequireDefault(_mapSelf);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Option = _uxcoreSelect2["default"].Option;


function goMonth(direction) {
  var next = this.props.value.clone();
  next.add(direction, 'months');
  this.props.onValueChange(next);
}

function goYear(direction) {
  var next = this.props.value.clone();
  next.add(direction, 'years');
  this.props.onValueChange(next);
}

var CalendarHeader = (0, _createReactClass2["default"])({
  propTypes: {
    enablePrev: _propTypes2["default"].any,
    enableNext: _propTypes2["default"].any,
    prefixCls: _propTypes2["default"].string,
    showTimePicker: _propTypes2["default"].bool,
    locale: _propTypes2["default"].object,
    value: _propTypes2["default"].object,
    onValueChange: _propTypes2["default"].func,
    yearSelectOffset: _propTypes2["default"].number,
    yearSelectTotal: _propTypes2["default"].number,
    localeStr: _propTypes2["default"].string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      enableNext: 1,
      enablePrev: 1,
      yearSelectOffset: 100,
      yearSelectTotal: 150,
      localeStr: 'zh-cn'
    };
  },
  getInitialState: function getInitialState() {
    this.nextMonth = goMonth.bind(this, 1);
    this.previousMonth = goMonth.bind(this, -1);
    this.nextYear = goYear.bind(this, 1);
    this.previousYear = goYear.bind(this, -1);
    return {};
  },
  onSelect: function onSelect(value) {
    this.setState({
      showMonthPanel: 0,
      showYearPanel: 0
    });
    this.props.onValueChange(value);
  },
  onYearChange: function onYearChange(year) {
    var newValue = this.props.value.clone();
    newValue.year(parseInt(year, 10));
    var onValueChange = this.props.onValueChange;
    if (onValueChange) {
      onValueChange(newValue);
    }
  },
  onMonthChange: function onMonthChange(month) {
    var newValue = this.props.value.clone();
    newValue.month(parseInt(month, 10));
    var onValueChange = this.props.onValueChange;
    if (onValueChange) {
      onValueChange(newValue);
    }
  },
  getSelectContainer: function getSelectContainer() {
    return this.root;
  },
  monthYearElement: function monthYearElement() {
    var _this = this;

    var props = this.props;
    var prefixCls = props.prefixCls;
    var locale = props.locale;
    var value = props.value.locale(props.localeStr);
    var monthBeforeYear = locale.monthBeforeYear;
    var selectClassName = prefixCls + '-' + (monthBeforeYear ? 'my-select' : 'ym-select');
    var yearValue = value.year();
    var startYear = yearValue - props.yearSelectOffset;
    var endYear = startYear + props.yearSelectTotal;
    var yearOptions = [];
    var monthOptions = [];
    var isLocaleCn = locale.year === '年';
    var suffix = isLocaleCn ? '年' : '';

    for (var i = startYear; i < endYear; i++) {
      yearOptions.push(_react2["default"].createElement(
        Option,
        { key: '' + i, label: '' + (i + suffix) },
        i
      ));
    }
    var year = _react2["default"].createElement(
      _uxcoreSelect2["default"],
      {
        value: '' + yearValue,
        className: (0, _classnames4["default"])(prefixCls + '-year-select', _defineProperty({}, prefixCls + '-cn-select', isLocaleCn)),
        showSearch: false,
        dropdownMatchSelectWidth: false,
        dropdownClassName: prefixCls + '-year-select-dropdown',
        optionLabelProp: 'label',
        getPopupContainer: function getPopupContainer() {
          return _this.getSelectContainer();
        },
        dropdownAlign: {
          offset: [0, -2]
        },
        onChange: this.onYearChange
      },
      yearOptions
    );
    for (var _i = 0; _i < 12; _i++) {
      var current = value.clone();
      var localeData = value.localeData();
      current.month(_i);
      monthOptions.push(_react2["default"].createElement(
        Option,
        {
          key: '' + _i,
          label: localeData.monthsShort(current)
        },
        localeData.monthsShort(current)
      ));
    }
    var month = _react2["default"].createElement(
      _uxcoreSelect2["default"],
      {
        value: '' + value.month(),
        dropdownMatchSelectWidth: false,
        dropdownClassName: prefixCls + '-month-select-dropdown',
        className: (0, _classnames4["default"])(prefixCls + '-month-select', _defineProperty({}, prefixCls + '-cn-select', isLocaleCn)),
        showSearch: false,
        optionLabelProp: 'label',
        getPopupContainer: function getPopupContainer() {
          return _this.getSelectContainer();
        },
        dropdownAlign: {
          offset: [0, -2]
        },
        onChange: this.onMonthChange
      },
      monthOptions
    );
    var my = [];
    if (monthBeforeYear) {
      my = [month, year];
    } else {
      my = [year, month];
    }
    return _react2["default"].createElement(
      'span',
      { className: selectClassName },
      (0, _mapSelf2["default"])(my)
    );
  },
  showIf: function showIf(condition, el) {
    return condition ? el : null;
  },
  showMonthPanel: function showMonthPanel() {
    this.setState({
      showMonthPanel: 1,
      showYearPanel: 0
    });
  },
  showYearPanel: function showYearPanel() {
    this.setState({
      showMonthPanel: 0,
      showYearPanel: 1
    });
  },
  render: function render() {
    var _this2 = this;

    var props = this.props;
    var enableNext = props.enableNext,
        enablePrev = props.enablePrev,
        prefixCls = props.prefixCls,
        locale = props.locale,
        value = props.value,
        showTimePicker = props.showTimePicker;

    var state = this.state;
    var PanelClass = null;
    if (state.showMonthPanel) {
      PanelClass = _MonthPanel2["default"];
    } else if (state.showYearPanel) {
      PanelClass = _YearPanel2["default"];
    }
    var panel = void 0;
    if (PanelClass) {
      panel = _react2["default"].createElement(PanelClass, {
        locale: locale,
        defaultValue: value,
        rootPrefixCls: prefixCls,
        onSelect: this.onSelect
      });
    }
    return _react2["default"].createElement(
      'div',
      {
        className: prefixCls + '-header',
        ref: function ref(c) {
          _this2.root = c;
        }
      },
      _react2["default"].createElement(
        'div',
        { style: { position: 'relative' } },
        this.showIf(enablePrev, _react2["default"].createElement('a', {
          className: prefixCls + '-prev-year-btn',
          role: 'button',
          onClick: this.previousYear,
          title: locale.previousYear
        })),
        this.showIf(enablePrev, _react2["default"].createElement('a', {
          className: prefixCls + '-prev-month-btn',
          role: 'button',
          onClick: this.previousMonth,
          title: locale.previousMonth
        })),
        this.monthYearElement(showTimePicker),
        this.showIf(enableNext, _react2["default"].createElement('a', {
          className: prefixCls + '-next-month-btn',
          onClick: this.nextMonth,
          title: locale.nextMonth
        })),
        this.showIf(enableNext, _react2["default"].createElement('a', {
          className: prefixCls + '-next-year-btn',
          onClick: this.nextYear,
          title: locale.nextYear
        }))
      ),
      panel
    );
  }
});

exports["default"] = CalendarHeader;
module.exports = exports['default'];