'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _index = require('rc-calendar/lib/util/index');

var _Calendar = require('./Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _MonthCalendar = require('./MonthCalendar');

var _MonthCalendar2 = _interopRequireDefault(_MonthCalendar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Option = _uxcoreSelect2["default"].Option;


var SWITCHERS = [{
  label: 'time',
  value: 'time'
}, {
  label: 'week',
  value: 'week'
}, {
  label: 'month',
  value: 'month'
}];
var TYPE_HASH = { time: 'd', week: 'w', month: 'M' };

function ShowCalendar(config) {
  var headerSize = config.headerSize,
      yearSelectOffset = config.yearSelectOffset,
      yearSelectTotal = config.yearSelectTotal,
      value = config.value,
      onValueChange = config.onValueChange,
      type = config.type;

  if (type === 'month') {
    return _react2["default"].createElement(_MonthCalendar2["default"], {
      value: value,
      onSelect: onValueChange,
      size: headerSize,
      style: { top: '40px' }
    });
  }
  return _react2["default"].createElement(_Calendar2["default"], {
    showToday: false,
    showTime: false,
    allowClear: false,
    showDateInput: false,
    showSecond: false,
    yearSelectOffset: yearSelectOffset,
    yearSelectTotal: yearSelectTotal,
    size: headerSize,
    value: value,
    onSelect: onValueChange,
    hasTrigger: false,
    style: { top: '40px' }
  });
}

var CalendarHeader = function (_Component) {
  _inherits(CalendarHeader, _Component);

  function CalendarHeader() {
    _classCallCheck(this, CalendarHeader);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  CalendarHeader.prototype.setToday = function setToday() {
    var _props = this.props,
        onValueChange = _props.onValueChange,
        value = _props.value;

    var now = (0, _index.getTodayTime)(value);
    onValueChange(now);
  };

  CalendarHeader.prototype.getShowValue = function getShowValue() {
    var _props2 = this.props,
        value = _props2.value,
        type = _props2.type,
        format = _props2.format;

    if (type === 'time') {
      return (0, _moment2["default"])(value).format(format);
    }
    if (type === 'week') {
      var day = (0, _moment2["default"])(value).day();
      day = day === 0 ? 7 : day;
      var firstDate = (0, _moment2["default"])(value).subtract(day - 1, 'd').format(format);
      var lastDate = (0, _moment2["default"])(value).add(7 - day, 'd').format(format);
      return firstDate + ' ~ ' + lastDate;
    }
    var newFormat = format.replace(/([-/])?dd/gi, '');
    return (0, _moment2["default"])(value).format(newFormat);
  };

  CalendarHeader.prototype.getSelectSwitcher = function getSelectSwitcher() {
    var _props3 = this.props,
        type = _props3.type,
        locale = _props3.locale;

    return _react2["default"].createElement(
      _uxcoreSelect2["default"],
      {
        defaultValue: type,
        className: 'select-switcher',
        onSelect: this.changeType.bind(this),
        size: 'small'
      },
      SWITCHERS.map(function (switcher) {
        return _react2["default"].createElement(
          Option,
          { value: switcher.value, key: switcher.value },
          locale[switcher.label] || '日'
        );
      })
    );
  };

  CalendarHeader.prototype.getExpandedSwitcher = function getExpandedSwitcher() {
    var _this2 = this;

    var _props4 = this.props,
        prefixCls = _props4.prefixCls,
        type = _props4.type,
        locale = _props4.locale;

    var switchCls = prefixCls + '-header-switcher';
    return _react2["default"].createElement(
      'span',
      { className: switchCls },
      SWITCHERS.map(function (s) {
        var _classnames;

        return _react2["default"].createElement(
          'span',
          {
            onClick: _this2.changeType.bind(_this2, s.value),
            key: s.label,
            className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, switchCls + '-normal', true), _defineProperty(_classnames, switchCls + '-time', s.value === 'time'), _defineProperty(_classnames, switchCls + '-week', s.value === 'week'), _defineProperty(_classnames, switchCls + '-date', s.value === 'month'), _defineProperty(_classnames, switchCls + '-focus', type === s.value), _classnames))
          },
          locale[s.label] || '日'
        );
      })
    );
  };

  CalendarHeader.prototype.todayElement = function todayElement() {
    var _props5 = this.props,
        showToday = _props5.showToday,
        locale = _props5.locale;

    var isSuperMini = this.fullHeader ? this.fullHeader.offsetWidth <= 380 : false;
    var cls = (0, _classnames3["default"])({
      'today-btn': true,
      'super-mini': isSuperMini
    });
    return showToday ? _react2["default"].createElement(
      _uxcoreButton2["default"],
      { type: 'secondary', onClick: this.setToday.bind(this), className: cls },
      _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'zhixiang-qianjin', className: 'forward' }),
      !isSuperMini && locale.today
    ) : null;
  };

  CalendarHeader.prototype.handlePrev = function handlePrev() {
    var _props6 = this.props,
        type = _props6.type,
        onValueChange = _props6.onValueChange,
        value = _props6.value;

    var newValue = value || (0, _moment2["default"])();
    newValue = newValue.subtract(1, TYPE_HASH[type]);
    onValueChange(newValue);
  };

  CalendarHeader.prototype.changeType = function changeType(value) {
    var typeChange = this.props.typeChange;

    typeChange(value);
  };

  CalendarHeader.prototype.handleNext = function handleNext() {
    var _props7 = this.props,
        type = _props7.type,
        onValueChange = _props7.onValueChange,
        value = _props7.value;

    var newValue = value || (0, _moment2["default"])();
    newValue = newValue.add(1, TYPE_HASH[type]);
    onValueChange(newValue);
  };

  // 日历选择


  CalendarHeader.prototype.initCalendar = function initCalendar() {
    var prefixCls = this.props.prefixCls;

    var showValue = this.getShowValue();

    return _react2["default"].createElement(
      'div',
      { className: prefixCls + '-date-select' },
      _react2["default"].createElement('span', { className: prefixCls + '-prev-btn', onClick: this.handlePrev.bind(this) }),
      _react2["default"].createElement('input', { value: showValue, readOnly: true, className: prefixCls + '-show-input kuma-input' }),
      _react2["default"].createElement(ShowCalendar, this.props),
      _react2["default"].createElement('span', { className: prefixCls + '-next-btn', onClick: this.handleNext.bind(this) })
    );
  };

  CalendarHeader.prototype.renderSwitcher = function renderSwitcher() {
    var showTypeSwitch = this.props.showTypeSwitch;

    if (!showTypeSwitch) {
      return null;
    }
    if (this.fullHeader && this.fullHeader.offsetWidth < 380) {
      return this.getSelectSwitcher();
    }
    return this.getExpandedSwitcher();
  };

  CalendarHeader.prototype.render = function render() {
    var _this3 = this;

    var prefixCls = this.props.prefixCls;


    return _react2["default"].createElement(
      'div',
      {
        className: prefixCls + '-header',
        ref: function ref(c) {
          _this3.fullHeader = c;
        }
      },
      this.todayElement(),
      this.initCalendar(),
      this.renderSwitcher()
    );
  };

  return CalendarHeader;
}(_react.Component);

CalendarHeader.propTypes = {
  yearSelectOffset: _propTypes2["default"].number,
  yearSelectTotal: _propTypes2["default"].number,
  onValueChange: _propTypes2["default"].func,
  typeChange: _propTypes2["default"].func,
  prefixCls: _propTypes2["default"].string,
  type: _propTypes2["default"].string,
  showTypeSwitch: _propTypes2["default"].bool,
  showToday: _propTypes2["default"].bool
};
CalendarHeader.defaultProps = {
  yearSelectOffset: 10,
  yearSelectTotal: 20,
  onValueChange: null,
  showToday: true,
  type: 'time',
  showTypeSwitch: true,
  typeChange: function typeChange() {},

  prefixCls: ''
};

exports["default"] = CalendarHeader;
module.exports = exports['default'];