'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _RcCalendarFull = require('./RcCalendarFull');

var _RcCalendarFull2 = _interopRequireDefault(_RcCalendarFull);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var CalendarLocale = {};

CalendarLocale['zh-cn'] = require('rc-calendar/lib/locale/zh_CN');
CalendarLocale['en-us'] = require('rc-calendar/lib/locale/en_US');

CalendarLocale['zh-cn'] = _extends({}, CalendarLocale['zh-cn'], _locale2["default"]['zh-cn']);
CalendarLocale['en-us'] = _extends({}, CalendarLocale['en-us'], _locale2["default"]['en-us']);

var generalizeFormat = _util2["default"].generalizeFormat;

var FullCalendar = function (_React$Component) {
  _inherits(FullCalendar, _React$Component);

  function FullCalendar(props) {
    _classCallCheck(this, FullCalendar);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      type: props.type || 'week'
    };
    var locale = props.locale;

    _this.locale = locale ? locale.toLowerCase().replace('_', '-') : 'zh-cn';
    return _this;
  }

  FullCalendar.prototype.onSelect = function onSelect(value) {
    if (value) {
      var onSelect = this.props.onSelect;

      var date = value.valueOf();
      onSelect(new Date(date), value.format(generalizeFormat(this.getFormat('time'))));
    }
  };

  FullCalendar.prototype.getFormat = function getFormat(key) {
    var newKey = key || 'day';
    var format = this.props.format;

    if (format) return format;
    var defaultFormatMap = {
      'zh-cn': { day: 'YYYY-MM-DD', time: 'YYYY-MM-DD HH:mm' },
      'en-us': { day: 'DD/MM/YYYY', time: 'DD/MM/YYYY HH:mm' },
      en: { day: 'DD/MM/YYYY', time: 'DD/MM/YYYY HH:mm' }
    };

    return defaultFormatMap[this.locale][newKey];
  };

  FullCalendar.prototype.setType = function setType(type) {
    var _this2 = this;

    this.setState({ type: type }, function () {
      var onTypeChange = _this2.props.onTypeChange;

      onTypeChange(type);
    });
  };

  FullCalendar.prototype.getDate = function getDate(date) {
    var me = this;
    var timezone = me.props.timezone;

    var value = (0, _moment2["default"])(date).locale(this.locale);
    if (timezone) {
      return value.utcOffset(parseInt(timezone, 10) * 60);
    }
    return value;
  };

  FullCalendar.prototype.getDateValue = function getDateValue() {
    var _props = this.props,
        defaultValue = _props.defaultValue,
        timeRender = _props.timeRender,
        dateRender = _props.dateRender,
        weekRender = _props.weekRender,
        scheduleRender = _props.scheduleRender,
        contentRender = _props.contentRender,
        value = _props.value;

    var newOptions = {};
    var cvalue = void 0;
    if (value || defaultValue) {
      cvalue = this.getDate(value || defaultValue);
      newOptions.defaultValue = cvalue;
    } else {
      cvalue = this.getDate(new Date().getTime());
      newOptions.defaultValue = cvalue;
    }
    if (timeRender) {
      newOptions.timeRender = this.handleCellRender.bind(this, 'timeRender');
    }
    if (weekRender) {
      newOptions.weekRender = this.handleCellRender.bind(this, 'weekRender');
    }
    if (dateRender) {
      newOptions.dateRender = this.handleCellRender.bind(this, 'dateRender');
    }
    if (scheduleRender && typeof scheduleRender === 'function') {
      newOptions.scheduleRender = scheduleRender;
    }
    if (contentRender && typeof contentRender === 'function') {
      newOptions.contentRender = contentRender;
      newOptions.contentRender = function (events, current) {
        if (typeof contentRender === 'function') {
          var date = current.clone();
          date.getTime = current.valueOf;
          date.getDayOfMonth = date.date;
          return contentRender(events, current);
        }
        return current.date();
      };
    }
    return newOptions;
  };

  FullCalendar.prototype.handleCellRender = function handleCellRender(renderType, current, value) {
    if (renderType && value && this.props[renderType]) {
      return this.props[renderType]((0, _moment2["default"])(current).toDate(), value.format(generalizeFormat(this.getFormat('time'))));
    }
    return '';
  };

  FullCalendar.prototype.render = function render() {
    var me = this;
    var p = me.props;

    var className = p.className,
        style = p.style,
        prefixCls = p.prefixCls,
        disabledDate = p.disabledDate,
        disabledTime = p.disabledTime,
        format = p.format,
        locale = p.locale,
        value = p.value,
        defaultValue = p.defaultValue,
        onSelect = p.onSelect,
        timeRender = p.timeRender,
        weekRender = p.weekRender,
        dateRender = p.dateRender,
        contentRender = p.contentRender,
        scheduleRender = p.scheduleRender,
        type = p.type,
        otherProps = _objectWithoutProperties(p, ['className', 'style', 'prefixCls', 'disabledDate', 'disabledTime', 'format', 'locale', 'value', 'defaultValue', 'onSelect', 'timeRender', 'weekRender', 'dateRender', 'contentRender', 'scheduleRender', 'type']);

    var stateType = this.state.type;

    var calendarOptions = {
      className: (0, _classnames3["default"])(_defineProperty({}, className, !!className)),
      style: p.style,
      prefixCls: 'kuma-calendar-full',
      disabledDate: function disabledDate(current) {
        if (typeof p.disabledDate === 'function' && current) {
          var date = current.clone();
          date.getTime = current.valueOf;
          return p.disabledDate(date);
        }
        return false;
      },
      disabledTime: function disabledTime(current) {
        if (typeof p.disabledTime === 'function' && current) {
          var date = current.clone();
          date.getTime = current.valueOf;
          date.getHours = current.hour;
          return p.disabledTime(date);
        }
        return false;
      },
      format: generalizeFormat(this.getFormat()),
      locale: CalendarLocale[this.locale],
      originLocale: this.locale,
      type: stateType
    };
    var newOption = this.getDateValue();
    (0, _objectAssign2["default"])(calendarOptions, newOption);
    return _react2["default"].createElement(
      'div',
      { className: prefixCls },
      _react2["default"].createElement(_RcCalendarFull2["default"], _extends({}, calendarOptions, {
        setType: this.setType.bind(this),
        onSelect: this.onSelect.bind(this)
      }, otherProps))
    );
  };

  return FullCalendar;
}(_react2["default"].Component);

exports["default"] = FullCalendar;


FullCalendar.displayName = 'FullCalendar';
FullCalendar.defaultProps = {
  align: {
    offset: [0, 0]
  },
  locale: 'zh-cn',
  type: 'time',
  format: 'YYYY-MM-DD',
  fullscreen: true,
  showHeader: true,
  prefixCls: 'kuma-full-calendar',
  startHour: 9,
  endHour: 23,
  step: 60,
  onTypeChange: function onTypeChange() {}
};
FullCalendar.propTypes = {
  align: _propTypes2["default"].object,
  prefixCls: _propTypes2["default"].string,
  format: _propTypes2["default"].string,
  fullscreen: _propTypes2["default"].bool,
  locale: _propTypes2["default"].string,
  type: _propTypes2["default"].string,
  showHeader: _propTypes2["default"].bool,
  startHour: _propTypes2["default"].number,
  endHour: _propTypes2["default"].number,
  step: _propTypes2["default"].number,
  onSelect: _propTypes2["default"].func,
  onTypeChange: _propTypes2["default"].func,
  contentRender: _propTypes2["default"].func,
  weekRender: _propTypes2["default"].func,
  dateRender: _propTypes2["default"].func,
  scheduleRender: _propTypes2["default"].func,
  timeRender: _propTypes2["default"].func,
  headerComponent: _propTypes2["default"].object, // The whole header component
  headerRender: _propTypes2["default"].func,
  disabledDate: _propTypes2["default"].func,
  disabledTime: _propTypes2["default"].func
};
module.exports = exports['default'];