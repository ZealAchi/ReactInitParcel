'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreCheckboxGroup = require('uxcore-checkbox-group');

var _uxcoreCheckboxGroup2 = _interopRequireDefault(_uxcoreCheckboxGroup);

var _uxcoreButton = require('uxcore-button');

var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

var _classnames5 = require('classnames');

var _classnames6 = _interopRequireDefault(_classnames5);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _Checkbox = require('./Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * MultiSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author peijie.dpj
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var MultiSelect = function (_Component) {
  _inherits(MultiSelect, _Component);

  function MultiSelect() {
    var _temp, _this, _ret;

    _classCallCheck(this, MultiSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      visible: false,
      lastValues: _this.props.value
    }, _this.handleChange = function (values) {
      var _this2 = _this,
          props = _this2.props;

      var newValues = [];
      if (props.maxSelect && values.length > props.maxSelect) {
        newValues = _this.state.lastValues;
      } else {
        newValues = values;
        _this.setState({ lastValues: values });
      }
      props.onChange(newValues);
    }, _this.handleSelectAll = function () {
      var _this3 = _this,
          props = _this3.props;

      var valueList = [];
      if (props.disabled) {
        return;
      }
      _react2["default"].Children.forEach(props.children, function (item) {
        if (!item.props.disabled || _this.hasSelected(item.props.value)) {
          valueList.push(item.props.value);
        }
      });

      props.onChange(valueList);
    }, _this.handleClear = function () {
      var _this4 = _this,
          props = _this4.props;

      var valueList = [];
      if (props.disabled) {
        return;
      }
      _react2["default"].Children.forEach(props.children, function (item) {
        if (item.props.disabled && _this.hasSelected(item.props.value)) {
          valueList.push(item.props.value);
        }
      });
      props.onChange(valueList);
    }, _this.handleOk = function () {
      var _this5 = _this,
          props = _this5.props,
          state = _this5.state;

      _this.setState({
        visible: false
      });

      var lastLabels = [];
      state.lastValues.forEach(function (value) {
        _react2["default"].Children.forEach(props.children, function (item) {
          if (value === item.props.value) {
            lastLabels.push(item.props.text || item.props.value);
          }
        });
      });
      props.onSubmit(state.lastValues, lastLabels);
    }, _this.processLabel = function (type) {
      var _this6 = _this,
          props = _this6.props;

      var res = [];
      res = _react2["default"].Children.map(props.value, function (value) {
        var item = null;
        _react2["default"].Children.forEach(props.children, function (child) {
          if (child.props.value === value) {
            item = child;
          }
        });
        if (item) {
          switch (type) {
            case 'content':
              return _react2["default"].createElement(
                'span',
                { className: props.prefixCls + '-selection__choice__content' },
                item.props[props.optionLabelProp],
                _react2["default"].createElement(
                  'span',
                  { className: props.prefixCls + '-selection__choice__break' },
                  props.titleBreakStr
                )
              );
            case 'title':
              return item.props[props.optionLabelProp] + props.titleBreakStr;
            default:
              return '';
          }
        }
        return null;
      }) || [];

      if (res.length === 0) {
        switch (type) {
          case 'content':
            res = _react2["default"].createElement(
              'span',
              { className: props.prefixCls + '-selection__placeholder' },
              props.placeholder
            );
            break;
          case 'title':
            res = [props.placeholder];
            break;
          default:
            res = '';
        }
      } else if (type === 'title') {
        var len = res.length;
        res[len - 1] = res[len - 1].slice(0, res[len - 1].length - 1);
      }
      return type === 'title' ? res.join('') : res;
    }, _this.hasSelected = function (value) {
      return _this.props.value.indexOf(value) !== -1;
    }, _this.handleVisibleChange = function (visible) {
      var _this7 = _this,
          props = _this7.props;

      if (props.disabled) {
        return;
      }
      _this.setState({
        visible: visible
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MultiSelect.prototype.renderSelectAll = function renderSelectAll() {
    var _this8 = this;

    var props = this.props;
    // 检查是否可以点击 全选
    var isAllDisabled = true;
    var isHalfChecked = false;
    var checkedColumn = 0;
    var enabledColumn = 0;
    _react2["default"].Children.forEach(props.children, function (item) {
      if (!item.props.disabled) {
        isAllDisabled = false;
        enabledColumn += 1;
        if (props.value.indexOf(item.props.value) !== -1) {
          isHalfChecked = true;
          checkedColumn += 1;
        }
      }
    });
    var isAllChecked = enabledColumn ? checkedColumn === enabledColumn : false;
    return _react2["default"].createElement(
      'div',
      {
        className: props.prefixCls + '-select-all'
      },
      _react2["default"].createElement(
        _Checkbox2["default"],
        {
          disabled: isAllDisabled,
          checked: isAllChecked,
          halfChecked: isAllChecked ? false : isHalfChecked,
          className: props.prefixCls + '-select-all-checkbox',
          onChange: function onChange(e) {
            if (e.target.checked) {
              _this8.handleSelectAll();
            } else {
              _this8.handleClear();
            }
          }
        },
        _i18n2["default"][props.locale].selectAll
      )
    );
  };

  MultiSelect.prototype.renderMaxSelect = function renderMaxSelect() {
    var props = this.props;
    return _react2["default"].createElement(
      'p',
      null,
      _i18n2["default"][props.locale].maxSelect[0] + props.maxSelect + _i18n2["default"][props.locale].maxSelect[1]
    );
  };

  MultiSelect.prototype.render = function render() {
    var _classnames2, _classnames3, _classnames4;

    var props = this.props;

    var menu = _react2["default"].createElement(
      'div',
      { className: props.prefixCls + '-dropdown-border' },
      _react2["default"].createElement(
        'div',
        { className: props.prefixCls + '-content' },
        _react2["default"].createElement(
          _uxcoreCheckboxGroup2["default"],
          {
            onChange: this.handleChange,
            value: props.value
          },
          _react2["default"].Children.map(props.children, function (item, index) {
            return _react2["default"].createElement(_uxcoreCheckboxGroup2["default"].Item, _extends({}, item.props, { key: index, jsxdisabled: props.disabled }));
          })
        )
      ),
      _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames6["default"])(props.prefixCls + '-footer', _defineProperty({}, props.prefixCls + '-footer-hidden', !props.maxSelect && !props.showClear && !props.showSelectAll))
        },
        props.maxSelect ? this.renderMaxSelect() : this.renderSelectAll(),
        _react2["default"].createElement(
          'div',
          { className: props.prefixCls + '-button-group' },
          _react2["default"].createElement(
            _uxcoreButton2["default"],
            {
              className: (0, _classnames6["default"])((_classnames2 = {}, _defineProperty(_classnames2, props.prefixCls + '-button', true), _defineProperty(_classnames2, props.prefixCls + '-button-clear', true), _defineProperty(_classnames2, props.prefixCls + '-button-hidden', !props.showClear), _classnames2)),
              size: 'small',
              type: 'secondary',
              onClick: this.handleClear
            },
            _i18n2["default"][props.locale].clear
          ),
          _react2["default"].createElement(
            _uxcoreButton2["default"],
            {
              size: 'small',
              onClick: this.handleOk
            },
            _i18n2["default"][props.locale].ok
          )
        )
      )
    );

    return _react2["default"].createElement(
      'div',
      null,
      _react2["default"].createElement(
        _uxcoreDropdown2["default"],
        {
          overlay: menu,
          minOverlayWidthMatchTrigger: false,
          visible: this.state.visible,
          onVisibleChange: this.handleVisibleChange,
          trigger: ['click'],
          overlayClassName: (0, _classnames6["default"])((_classnames3 = {}, _defineProperty(_classnames3, props.prefixCls + '-dropdown', true), _defineProperty(_classnames3, props.dropdownClassName, !!props.dropdownClassName), _classnames3))
        },
        _react2["default"].createElement(
          'span',
          {
            className: (0, _classnames6["default"])((_classnames4 = {}, _defineProperty(_classnames4, props.prefixCls, true), _defineProperty(_classnames4, props.className, !!props.className), _defineProperty(_classnames4, props.prefixCls + '-' + props.size, !!props.size), _defineProperty(_classnames4, props.prefixCls + '-open', this.state.visible), _defineProperty(_classnames4, props.prefixCls + '-disabled', props.disabled), _classnames4))
          },
          _react2["default"].createElement(
            'span',
            { className: props.prefixCls + '-selection ' + props.prefixCls + '-selection--multiple' },
            _react2["default"].createElement(
              'span',
              { className: props.prefixCls + '-selection--multiple--content', title: this.processLabel('title') },
              this.processLabel('content')
            ),
            _react2["default"].createElement('span', { className: props.prefixCls + '-arrow' })
          )
        )
      )
    );
  };

  return MultiSelect;
}(_react.Component);

MultiSelect.displayName = 'MultiSelect';
MultiSelect.Item = _uxcoreCheckboxGroup2["default"].Item;
MultiSelect.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  dropdownClassName: _propTypes2["default"].string,
  value: _propTypes2["default"].array,
  disabled: _propTypes2["default"].bool,
  maxSelect: _propTypes2["default"].number,
  placeholder: _propTypes2["default"].string,
  titleBreakStr: _propTypes2["default"].string,
  optionLabelProp: _propTypes2["default"].string,
  showSelectAll: _propTypes2["default"].bool,
  showClear: _propTypes2["default"].bool,
  onChange: _propTypes2["default"].func,
  onSubmit: _propTypes2["default"].func,
  locale: _propTypes2["default"].string,
  size: _propTypes2["default"].oneOf(['large', 'middle', 'small'])
};
MultiSelect.defaultProps = {
  prefixCls: 'kuma-multi-select',
  className: '',
  dropdownClassName: '',
  value: [],
  disabled: false,
  placeholder: '请选择',
  titleBreakStr: ', ',
  optionLabelProp: 'text',
  showSelectAll: true,
  showClear: true,
  onChange: function onChange() {},
  onSubmit: function onSubmit() {},

  locale: 'zh-cn',
  size: 'large'
};
exports["default"] = MultiSelect;
module.exports = exports['default'];