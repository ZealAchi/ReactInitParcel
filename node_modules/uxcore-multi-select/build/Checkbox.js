'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var CheckBox = function (_Component) {
  _inherits(CheckBox, _Component);

  function CheckBox() {
    _classCallCheck(this, CheckBox);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  CheckBox.prototype.getValue = function getValue() {
    return this.checkbox.checked;
  };

  CheckBox.prototype.handleChange = function handleChange(e) {
    this.props.onChange(e);
  };

  CheckBox.prototype.handleClick = function handleClick() {
    // simulate checkbox
    this.props.onChange({
      target: {
        checked: true
      }
    });
  };

  CheckBox.prototype.renderHalfChecked = function renderHalfChecked() {
    return _react2["default"].createElement(
      'span',
      {
        className: (0, _classnames4["default"])(_defineProperty({}, this.props.className, !!this.props.className)), onClick: this.handleClick.bind(this)
      },
      _react2["default"].createElement('i', {
        className: (0, _classnames4["default"])({
          'half-checked': true
        })
      }),
      this.props.children
    );
  };

  CheckBox.prototype.renderCheckBox = function renderCheckBox(renderProps) {
    var _this2 = this;

    return _react2["default"].createElement(
      'label',
      {
        className: (0, _classnames4["default"])(_defineProperty({}, this.props.className, !!this.props.className))
      },
      _react2["default"].createElement('input', _extends({ type: 'checkbox', ref: function ref(c) {
          _this2.checkbox = c;
        } }, renderProps)),
      _react2["default"].createElement('s', null),
      this.props.children
    );
  };

  CheckBox.prototype.render = function render() {
    var props = this.props;
    if (props.halfChecked) {
      return this.renderHalfChecked();
    }
    var renderProps = {
      className: 'kuma-checkbox',
      checked: this.props.checked,
      onChange: this.handleChange.bind(this)
    };
    return this.renderCheckBox(renderProps);
  };

  return CheckBox;
}(_react.Component);

CheckBox.propTypes = {
  onChange: _propTypes2["default"].func,
  checked: _propTypes2["default"].bool,
  className: _propTypes2["default"].string,
  children: _propTypes2["default"].any
};

CheckBox.defaultProps = {
  onChange: function onChange() {}
};

exports["default"] = CheckBox;
module.exports = exports['default'];