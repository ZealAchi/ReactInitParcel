'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _isObject = require('lodash/isObject');

var _isObject2 = _interopRequireDefault(_isObject);

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _nattyFetch = require('natty-fetch');

var _nattyFetch2 = _interopRequireDefault(_nattyFetch);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _find = require('lodash/find');

var _find2 = _interopRequireDefault(_find);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by xy on 15/4/13.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var processData = _util2["default"].processData,
    transferDataToObj = _util2["default"].transferDataToObj,
    getValuePropValue = _util2["default"].getValuePropValue;

var defaultLabels = {
  placeholder: {
    'zh-cn': '请下拉选择',
    'en-us': 'Please select',
    en: 'Please select'
  },
  notFoundContent: {
    'zh-cn': '未查询到备选项',
    'en-us': 'No Options Found',
    en: 'No Options Found'
  }
};

var Option = _uxcoreSelect2["default"].Option;

var selectOptions = ['allowClear', 'autoClearSearchValue', 'autoFocus', 'backfill', 'combobox', 'defaultActiveFirstOption', 'defaultOpen', 'disabled', 'dropdownAlign', 'dropdownClassName', 'dropdownMatchSelectWidth', 'dropdownMenuStyle', 'dropdownRender', 'dropdownStyle', 'filterOption', 'firstActiveValue', 'getInputElement', 'getPopupContainer', 'labelInValue', 'loading', 'maxTagCount', 'maxTagPlaceholder', 'maxTagTextLength', 'menuItemSelectedIcon', 'multiple', 'notFoundContent', 'onBlur', 'onDeselect', 'onFocus', 'onInputKeyDown', 'onPopupScroll', 'open', 'optionFilterProp', 'optionLabelProp', 'placeholder', 'rcRef', 'searchPlaceholder', 'showAction', 'showArrow', 'showSearch', 'tags'];

var SelectFormField = function (_FormField) {
  _inherits(SelectFormField, _FormField);

  function SelectFormField(props) {
    _classCallCheck(this, SelectFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    var me = _this;
    var jsxdata = props.jsxdata;

    (0, _objectAssign2["default"])(me.state, {
      data: processData(jsxdata),
      prevPropsData: jsxdata
    });
    return _this;
  }

  SelectFormField.prototype.componentDidMount = function componentDidMount() {
    _FormField.prototype.componentDidMount.call(this);
    if (this.props.jsxfetchUrl && this.props.fetchDataOnMount) {
      this.fetchData();
    }
  };

  SelectFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    _FormField.prototype.componentDidUpdate.call(this, prevProps, prevState);
    var jsxfetchUrl = this.props.jsxfetchUrl;

    if (jsxfetchUrl && prevProps.jsxfetchUrl !== jsxfetchUrl) {
      this.fetchData();
    }
  };

  /**
   * select inner method is used, not very reliable
   *
   * @deprecated
   */
  /* eslint-disable */


  SelectFormField.prototype.resetSelect = function resetSelect() {
    console.warn('Method resetSelect is deprecated');
  };
  /* eslint-enable */

  SelectFormField.prototype.fetchData = function fetchData(value) {
    var _this2 = this;

    if (this.fetch) {
      this.fetch.abort();
    }

    var formerData = this.state.data;

    this.setState({
      data: [],
      loading: true
    });

    var _props = this.props,
        jsxfetchUrl = _props.jsxfetchUrl,
        dataType = _props.dataType,
        beforeFetch = _props.beforeFetch,
        afterFetch = _props.afterFetch,
        method = _props.method,
        fetchMethod = _props.fetchMethod,
        fetchHeader = _props.fetchHeader,
        fitResponse = _props.fitResponse,
        jsxdata = _props.jsxdata;


    var param = {
      url: jsxfetchUrl,
      jsonp: dataType ? dataType === 'jsonp' : /\.jsonp/.test(jsxfetchUrl),
      data: beforeFetch({
        q: value
      }),
      method: fetchMethod || method,
      fit: fitResponse,
      Promise: _lie2["default"]
    };
    if (fetchHeader) {
      param.header = fetchHeader;
    }
    this.fetch = _nattyFetch2["default"].create(param);

    this.fetch().then(function (content) {
      var fetchData = processData(afterFetch(content));
      if (jsxdata) {
        fetchData = processData(jsxdata).concat(fetchData);
      }
      _this2.setState({
        data: fetchData,
        loading: false
      });
    })["catch"](function (e) {
      console.error(e.stack);

      _this2.setState({
        data: formerData,
        loading: false
      });
    });
  };

  SelectFormField.prototype.handleChange = function handleChange(value) {
    var _props2 = this.props,
        useValueText = _props2.useValueText,
        jsxfetchUrl = _props2.jsxfetchUrl,
        onSearch = _props2.onSearch,
        labelInValue = _props2.labelInValue;

    var labelInValueMode = !!jsxfetchUrl || !!onSearch || labelInValue;
    if (labelInValueMode && useValueText) {
      var newValue = value;
      if (Array.isArray(value)) {
        newValue = value.map(function (item) {
          return {
            value: item.key,
            text: item.label
          };
        });
      } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null) {
        newValue = {
          value: value.key,
          text: value.label
        };
      }
      this.handleDataChange(newValue);
    } else {
      this.handleDataChange(value);
    }
  };

  SelectFormField.prototype.handleSearch = function handleSearch(value) {
    var me = this;
    if (me.searchTimer) {
      clearTimeout(me.searchTimer);
    }
    me.searchTimer = setTimeout(function () {
      if (me.props.jsxfetchUrl) {
        me.fetchData(value);
      } else if (me.props.onSearch) {
        me.props.onSearch(value);
      }
    }, me.props.searchDelay);
  };

  SelectFormField.prototype._generateOptionsFromData = function _generateOptionsFromData() {
    var me = this;
    var values = me.state.data;
    var _me$props = me.props,
        children = _me$props.children,
        optionTextRender = _me$props.optionTextRender,
        valueStrictMode = _me$props.valueStrictMode;

    if (!values.length) {
      if (children) {
        return children;
      }
    }
    var arr = values.map(function (item) {
      var value = item.value,
          text = item.text,
          others = _objectWithoutProperties(item, ['value', 'text']);

      if (valueStrictMode) {
        others.value = value;
      }

      return _react2["default"].createElement(
        Option,
        _extends({ key: value, title: text }, others),
        optionTextRender ? optionTextRender(item.text, item) : item.text
      );
    });
    return arr;
  };

  /**
   * 获取当前已经选择项的完整数据
   * 多选时返回数组，单选时返回 object
   * 新增 value is object。
   */


  SelectFormField.prototype.getFullData = function getFullData() {
    var _state = this.state,
        data = _state.data,
        value = _state.value;

    if (Array.isArray(value)) {
      return value.map(function (selectItem) {
        if ((0, _isObject2["default"])(selectItem)) {
          return (0, _find2["default"])(data, function (item) {
            return item.value === selectItem.key;
          });
        }
        return (0, _find2["default"])(data, function (item) {
          return item.value === selectItem;
        });
      }).filter(function (i) {
        return i !== undefined;
      });
    }
    if ((0, _isObject2["default"])(value)) {
      return (0, _find2["default"])(data, function (item) {
        return item.value === value.key;
      });
    }
    return (0, _find2["default"])(data, function (item) {
      return item.value === value;
    });
  };

  /**
   * transfer 'a' to { key: 'a' }
   * transfer ['a'] to [{ key: 'a' }]
   * transfer { value: 'a', text: 'A' } to { key: 'a', label: 'A' }
   * transfer [{ value: 'a', text: 'A' }] to [{ key: 'x', label: 'A' }]
   */


  SelectFormField.prototype.processValue = function processValue(value) {
    var _this3 = this;

    var me = this;
    var newValue = value;
    if (value === undefined) {
      newValue = me.state.value;
    }
    if (!me.props.jsxfetchUrl && !me.props.onSearch) {
      return newValue;
    }
    if (typeof newValue === 'string') {
      return {
        key: newValue
      };
    }
    if (newValue instanceof Array) {
      return newValue.map(function (item) {
        return _this3.processValue(item);
      });
    }
    if ((typeof newValue === 'undefined' ? 'undefined' : _typeof(newValue)) === 'object' && newValue !== null) {
      return {
        key: newValue.value || newValue.key,
        label: newValue.text || newValue.label,
        title: newValue.title || newValue.text || newValue.label
      };
    }
    return newValue;
  };

  SelectFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-select-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  SelectFormField.prototype.renderField = function renderField() {
    var _this4 = this;

    var me = this;
    var arr = [];
    var mode = me.props.jsxmode || me.props.mode;

    var safeLocale = me.props.locale || 'zh-cn';
    if (['zh-cn', 'en', 'en-us'].indexOf(safeLocale) === -1) {
      safeLocale = 'zh-cn';
    }

    var loadingView = _react2["default"].createElement('div', { className: 'kuma-loading-s kuma-select-uxform-options-loading' });

    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      var options = {
        ref: function ref(c) {
          _this4.select = c;
        },
        key: 'select',
        style: me.props.jsxstyle,
        multiple: me.props.jsxmultiple,
        allowClear: me.props.jsxallowClear,
        combobox: me.props.jsxcombobox,
        searchPlaceholder: me.props.jsxsearchPlaceholder,
        tags: me.props.jsxtags,
        disabled: !!me.props.jsxdisabled,
        showSearch: me.props.jsxshowSearch,
        placeholder: me.props.jsxplaceholder || defaultLabels.placeholder[safeLocale],
        onChange: me.handleChange.bind(me),
        onSearch: me.handleSearch.bind(me),
        onSelect: function onSelect() {
          if (_this4.props.onSelect) {
            var _props3;

            (_props3 = _this4.props).onSelect.apply(_props3, arguments);
          }
        },
        size: me.getSize()
      };

      if (me.props.jsxfetchUrl) {
        options.filterOption = false;
      }

      selectOptions.forEach(function (item) {
        if (item in me.props) {
          options[item] = me.props[item];
        }
      });

      if (!{}.hasOwnProperty.call(me.props, 'notFoundContent')) {
        options.notFoundContent = defaultLabels.notFoundContent[safeLocale];
      }

      if (me.state.loading) {
        options.notFoundContent = me.props.loadingView || loadingView;
      }

      // only jsxfetchUrl mode need pass label, for the options always change.
      // when mount, state.label is undefined, which cause defalutValue cannot be used.
      if (me.props.jsxfetchUrl || me.props.onSearch) {
        options.labelInValue = true;
      }

      options.value = me.processValue() || [];

      /* eslint-disable no-underscore-dangle */
      /* used in SearchFormField */
      arr.push(_react2["default"].createElement(
        _uxcoreSelect2["default"],
        options,
        me._generateOptionsFromData()
      ));
      /* eslint-enable no-underscore-dangle */
    } else if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      var str = '';
      var renderValues = [];
      var splitter = ', \xA0';
      if (me.state.value) {
        var value = me.processValue();
        var values = !Array.isArray(value) ? [value] : value;
        if (me.props.jsxfetchUrl || me.props.onSearch || me.props.labelInValue) {
          // labelInValue mode
          str = values.map(function (item) {
            var label = item.label || item.key;

            renderValues.push({
              value: item.key,
              text: label
            });

            return label;
          }).join(splitter);
        } else if (me.props.children) {
          // <Option> mode
          var optionsLabel = [];
          me.props.children.forEach(function (child) {
            var valuePropValue = getValuePropValue(child);
            if (values.indexOf(valuePropValue) !== -1) {
              var label = '' + child.props[me.props.optionLabelProp];

              optionsLabel.push(label);

              renderValues.push({
                value: valuePropValue,
                text: label
              });
            }
          });

          str = optionsLabel.length ? optionsLabel.join(splitter) : values.join(splitter);
        } else {
          // only jsxdata
          str = values.map(function (item) {
            var label = transferDataToObj(me.state.data)[item === '' ? '__all__' : item];

            renderValues.push({
              value: item,
              text: label || item
            });

            return label || item;
          }).join(splitter);
        }
      }

      if (me.props.renderView) {
        str = me.props.renderView(renderValues);
      }

      arr.push(_react2["default"].createElement(
        'span',
        { key: 'select' },
        str || '--'
      ));
    }
    return arr;
  };

  return SelectFormField;
}(_uxcoreFormField2["default"]);

SelectFormField.getDerivedStateFromProps = function (props, state) {
  var baseUpdate = _uxcoreFormField2["default"].getDerivedStateFromProps(props, state);
  var jsxdata = props.jsxdata;

  if (!(0, _isEqual2["default"])(jsxdata, state.prevPropsData)) {
    return _extends({}, baseUpdate, {
      data: processData(props.jsxdata),
      prevPropsData: props.jsxdata
    });
  }
  return baseUpdate;
};

SelectFormField.Option = Option;
SelectFormField.displayName = 'SelectFormField';
SelectFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes, {
  jsxstyle: _propTypes2["default"].object,
  jsxplaceholder: _propTypes2["default"].string,
  jsxcombobox: _propTypes2["default"].bool,
  jsxdata: _propTypes2["default"].oneOfType([_propTypes2["default"].object, _propTypes2["default"].array]),
  searchDelay: _propTypes2["default"].number,
  beforeFetch: _propTypes2["default"].func,
  afterFetch: _propTypes2["default"].func,
  jsxshowSearch: _propTypes2["default"].bool,
  jsxtags: _propTypes2["default"].bool,
  jsxmultiple: _propTypes2["default"].bool,
  jsxallowClear: _propTypes2["default"].bool,
  jsxsearchPlaceholder: _propTypes2["default"].string,
  optionFilterProp: _propTypes2["default"].string,
  dataType: _propTypes2["default"].string,
  fetchDataOnMount: _propTypes2["default"].bool,
  useValueText: _propTypes2["default"].bool,
  method: _propTypes2["default"].string,
  fetchMethod: _propTypes2["default"].string,
  fetchHeader: _propTypes2["default"].object,
  dropdownAlign: _propTypes2["default"].object,
  optionTextRender: _propTypes2["default"].func,
  renderView: _propTypes2["default"].func,
  loadingView: _propTypes2["default"].node,
  valueStrictMode: _propTypes2["default"].bool
});

SelectFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  jsxstyle: {},
  jsxplaceholder: undefined,
  jsxcombobox: false,
  jsxdata: {},
  searchDelay: 100,
  beforeFetch: function beforeFetch(obj) {
    return obj;
  },
  afterFetch: function afterFetch(obj) {
    return obj;
  },
  fitResponse: function fitResponse(response) {
    return {
      content: response.content || response,
      success: response.success === undefined ? true : response.success
    };
  },
  jsxshowSearch: true,
  jsxallowClear: false,
  jsxtags: false,
  jsxmultiple: false,
  jsxsearchPlaceholder: '',
  optionFilterProp: 'children',
  optionLabelProp: 'children',
  fetchDataOnMount: true,
  useValueText: false,
  method: 'GET',
  fetchMethod: undefined,
  fetchHeader: undefined,
  dropdownAlign: {
    points: ['tl', 'bl', 'tr', 'br'],
    offset: [0, 4],
    overflow: {
      adjustX: true,
      adjustY: true
    }
  },
  optionTextRender: function optionTextRender(text) {
    return text;
  },
  renderView: undefined,
  loadingView: undefined,
  valueStrictMode: false
});

exports["default"] = SelectFormField;
module.exports = exports['default'];