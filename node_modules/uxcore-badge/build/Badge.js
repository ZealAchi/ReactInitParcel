'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcAnimate = require('rc-animate');

var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ScrollNumber = require('./ScrollNumber');

var _ScrollNumber2 = _interopRequireDefault(_ScrollNumber);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Badge Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fork from ant.design
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Badge = function (_React$Component) {
  _inherits(Badge, _React$Component);

  function Badge() {
    _classCallCheck(this, Badge);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Badge.prototype.render = function render() {
    var _classNames;

    var _props = this.props,
        prefixCls = _props.prefixCls,
        overflowCount = _props.overflowCount,
        className = _props.className,
        style = _props.style,
        children = _props.children,
        dot = _props.dot,
        text = _props.text,
        themeType = _props.themeType;
    var count = this.props.count;

    count = count > overflowCount ? overflowCount + '+' : count;
    if (dot) {
      count = '';
    }
    if (text) {
      count = text;
    }
    // null undefined "" "0" 0 <0
    var hidden = (!count || count === '0' || count < 0) && !dot;
    var scrollNumberCls = prefixCls + (dot ? '-dot' : '-count');
    var badgeCls = (0, _classnames2["default"])((_classNames = {}, _defineProperty(_classNames, className, !!className), _defineProperty(_classNames, prefixCls, true), _defineProperty(_classNames, prefixCls + '-' + themeType, themeType && themeType !== 'default'), _defineProperty(_classNames, prefixCls + '-not-a-wrapper', !children), _classNames));

    return _react2["default"].createElement(
      'span',
      {
        className: badgeCls,
        title: count,
        style: this.props.style
      },
      children,
      _react2["default"].createElement(
        _rcAnimate2["default"],
        {
          component: '',
          showProp: 'data-show',
          transitionName: prefixCls + '-zoom',
          transitionAppear: true
        },
        hidden ? null : _react2["default"].createElement(_ScrollNumber2["default"], {
          'data-show': !hidden,
          className: scrollNumberCls,
          count: count,
          style: style
        })
      )
    );
  };

  return Badge;
}(_react2["default"].Component);

Badge.defaultProps = {
  prefixCls: 'kuma-badge',
  count: null,
  dot: false,
  overflowCount: 99,
  text: null,
  themeType: 'default'
};

Badge.propTypes = {
  prefixCls: _propTypes2["default"].string,
  count: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
  dot: _propTypes2["default"].bool,
  overflowCount: _propTypes2["default"].number,
  text: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  style: _propTypes2["default"].object,
  children: _propTypes2["default"].any,
  themeType: _propTypes2["default"].oneOf(['default', 'dark'])
};

Badge.displayName = 'Badge';

exports["default"] = Badge;
module.exports = exports['default'];