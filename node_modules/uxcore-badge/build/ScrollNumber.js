'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _cssAnimation = require('css-animation');

var _reactLifecyclesCompat = require('react-lifecycles-compat');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Badge Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Fork from ant-design
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var isWin = navigator.platform === "Win32" || navigator.platform === "Windows";

var renderNumberList = function renderNumberList(position) {
  var childrenToReturn = [];
  for (var i = 0; i < 30; i++) {
    if (isWin) {
      if (position === i) {
        childrenToReturn.push(_react2["default"].createElement(
          'p',
          { key: i },
          i % 10
        ));
        break;
      }
    } else {
      var currentClassName = position === i ? 'current' : null;
      childrenToReturn.push(_react2["default"].createElement(
        'p',
        { key: i, className: currentClassName },
        i % 10
      ));
    }
  }
  return childrenToReturn;
};

function getNumberArray(num) {
  return num ? num.toString().split('').reverse().map(function (i) {
    return Number(i);
  }) : [];
}

var ScrollNumber = function (_React$Component) {
  _inherits(ScrollNumber, _React$Component);

  function ScrollNumber(props) {
    _classCallCheck(this, ScrollNumber);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      animateStarted: true,
      count: props.count,
      animationEnabled: true,
      lastCount: 1
    };
    return _this;
  }

  ScrollNumber.prototype.componentDidMount = function componentDidMount() {
    if (!_cssAnimation.isCssAnimationSupported) {
      this.setState({
        animationEnabled: false
      });
    }
  };

  ScrollNumber.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if ('count' in props) {
      if (state.count === props.count) {
        return null;
      }
      // 复原数字初始位置
      return {
        animateStarted: state.count === props.count,
        count: props.count,
        lastCount: state.count
      };
    }
    return null;
  };

  ScrollNumber.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    // 等待数字位置复原完毕,
    // 开始设置完整的数字
    if (this.props.count !== prevProps.count) {
      prevProps.onAnimated();
    }
  };

  ScrollNumber.prototype.getPositionByNum = function getPositionByNum(num, i) {
    if (this.state.animateStarted) {
      return 10 + num;
    }
    var currentDigit = getNumberArray(this.state.count)[i];
    var lastDigit = getNumberArray(this.state.lastCount)[i];
    // 同方向则在同一侧切换数字

    if (this.state.count > this.state.lastCount) {
      if (currentDigit >= lastDigit) {
        return 10 + num;
      }
      return 20 + num;
    }
    if (currentDigit <= lastDigit) {
      return 10 + num;
    }
    return num;
  };

  ScrollNumber.prototype.renderCurrentNumber = function renderCurrentNumber(num, i) {
    var position = this.getPositionByNum(num, i);
    var height = this.props.height;
    var removeTransition = this.state.animateStarted || getNumberArray(this.state.lastCount)[i] === undefined;
    var transformStyle = {};
    if (!isWin) {
      transformStyle.WebkitTransform = 'translate3d(0, ' + -position * height + 'px, 0)';
      transformStyle.transform = 'translate3d(0, ' + -position * height + 'px, 0)';
    }
    return (0, _react.createElement)('span', {
      className: this.props.prefixCls + '-only',
      style: _extends({
        transition: removeTransition && 'none'
      }, transformStyle, {
        height: height
      }),
      key: i
    }, renderNumberList(position));
  };

  ScrollNumber.prototype.renderNumberElement = function renderNumberElement() {
    var _this2 = this;

    var state = this.state;
    if (!state.count || isNaN(state.count)) {
      return state.count;
    }
    return getNumberArray(state.count).map(function (num, i) {
      return _this2.renderCurrentNumber(num, i);
    }).reverse();
  };

  ScrollNumber.prototype.render = function render() {
    var _classnames;

    var props = {
      height: this.props.height,
      className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, '' + this.props.prefixCls, true), _defineProperty(_classnames, '' + this.props.className, !!this.props.className), _defineProperty(_classnames, 'not-support-css-animation', !this.state.animationEnabled), _classnames))
    };
    return (0, _react.createElement)(this.props.component, props, this.renderNumberElement());
  };

  return ScrollNumber;
}(_react2["default"].Component);

ScrollNumber.defaultProps = {
  prefixCls: 'kuma-scroll-number',
  count: null,
  component: 'sup',
  onAnimated: function onAnimated() {},

  height: 14
};

ScrollNumber.propTypes = {
  count: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
  component: _propTypes2["default"].string,
  onAnimated: _propTypes2["default"].func,
  height: _propTypes2["default"].number,
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string
};

(0, _reactLifecyclesCompat.polyfill)(ScrollNumber);

exports["default"] = ScrollNumber;
module.exports = exports['default'];