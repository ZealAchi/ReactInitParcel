'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _FormField2 = require('./FormField');

var _FormField3 = _interopRequireDefault(_FormField2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Input = function Input(_ref) {
  var placeholder = _ref.placeholder,
      value = _ref.value,
      _onChange = _ref.onChange;
  return _react2["default"].createElement('input', {
    className: 'kuma-input',
    placeholder: placeholder,
    value: value,
    onChange: function onChange(e) {
      _onChange(e.target.value);
    }
  });
};

Input.propTypes = {
  value: _propTypes2["default"].string,
  onChange: _propTypes2["default"].func,
  placeholder: _propTypes2["default"].string
};

Input.defaultProps = {
  value: '',
  onChange: function onChange() {},
  placeholder: ''
};

var defaultOptions = {
  valuePropName: 'value',
  changePropName: 'onChange',
  fieldName: 'CustomFormField',
  component: _react2["default"].createElement(Input, null),
  processValue: function processValue(value) {
    return value;
  },
  renderView: function renderView(value) {
    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' ? JSON.stringify(value) : value || '--';
  }
};

var FormFieldPropKeys = Object.keys(_FormField3["default"].propTypes);

var createFormField = function createFormField() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var newOptions = (0, _objectAssign2["default"])({}, defaultOptions, options);

  var CustomFormField = function (_FormField) {
    _inherits(CustomFormField, _FormField);

    function CustomFormField() {
      _classCallCheck(this, CustomFormField);

      return _possibleConstructorReturn(this, _FormField.apply(this, arguments));
    }

    /* eslint-disable class-methods-use-this */
    CustomFormField.prototype.addSpecificClass = function addSpecificClass() {
      return newOptions.specificClass || '';
    };

    /* eslint-enable class-methods-use-this */


    CustomFormField.prototype.renderField = function renderField() {
      var _extends2;

      var me = this;
      var mode = me.props.jsxmode || me.props.mode;
      var cloneProps = _extends({}, me.props);
      FormFieldPropKeys.concat([newOptions.valuePropName, newOptions.changePropName]).forEach(function (key) {
        delete cloneProps[key];
      });

      if (mode === _uxcoreConst2["default"].MODE.VIEW) {
        return newOptions.renderView(me.state.value, cloneProps);
      }

      return _react2["default"].cloneElement(newOptions.component, _extends((_extends2 = {}, _defineProperty(_extends2, newOptions.valuePropName, me.state.value), _defineProperty(_extends2, newOptions.changePropName, function () {
        me.handleDataChange(newOptions.processValue.apply(newOptions, arguments));
      }), _extends2), cloneProps));
    };

    return CustomFormField;
  }(_FormField3["default"]);

  CustomFormField.defaultProps = (0, _objectAssign2["default"])({}, _FormField3["default"].defaultProps);
  CustomFormField.propTypes = (0, _objectAssign2["default"])({}, _FormField3["default"].propTypes);
  CustomFormField.displayName = newOptions.fieldName;
  return CustomFormField;
};

exports["default"] = createFormField;
module.exports = exports['default'];