'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Tag Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author peijie.dpj
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2017, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var KEYCODE_ENTER = 13;

var trim = function trim() {
  var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return text.replace(/(^\s*)|(\s*$)/g, '');
};

// 用于判断blur的时候点击的是不是提交输入框按钮
// 如果是输入框按钮，并且onAdd返回了true，那么不会收起输入框
var isClickSubmit = false;

var Tag = function (_React$Component) {
  _inherits(Tag, _React$Component);

  function Tag(props) {
    _classCallCheck(this, Tag);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      showInput: false,
      inputValue: '',
      animationTag: ''
    };
    return _this;
  }

  Tag.prototype.getChildContext = function getChildContext() {
    return {
      tagPrefixCls: this.props.prefixCls
    };
  };

  Tag.prototype.onAdd = function onAdd() {
    var me = this;
    var props = me.props;
    var value = trim(me.state.inputValue);

    if (props.onAdd.length <= 1) {
      // 兼容之前的逻辑
      props.onAdd(value);
      me.setState({
        inputValue: ''
      });
    } else {
      // 如果传入两个参数，视为第二个参数为必须回调的参数
      // 返回true时不会收起输入框不会清空输入框
      props.onAdd(value, function (keepOpen) {
        if (keepOpen) {
          me.input.focus();
          isClickSubmit = true;

          setTimeout(function () {
            isClickSubmit = false;
          }, 100);
        } else {
          me.setState({
            inputValue: ''
          });
        }
      });
    }
  };

  Tag.prototype.onInputChange = function onInputChange(e) {
    var me = this;
    var value = e.target.value;

    me.setState({
      inputValue: value
    });
  };

  Tag.prototype.onInputKeyDown = function onInputKeyDown(e) {
    var me = this;

    if (e.keyCode === KEYCODE_ENTER) {
      me.onAdd();
    }
  };

  Tag.prototype.onInputBlur = function onInputBlur() {
    var me = this;

    setTimeout(function () {
      if (!isClickSubmit) {
        me.setState({
          showInput: false
        });
      }
    }, 16);
  };

  Tag.prototype.onClickAddButton = function onClickAddButton() {
    var me = this;

    me.setState({
      showInput: true
    }, function () {
      me.input.focus();
    });
  };

  Tag.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  Tag.prototype.renderAddTag = function renderAddTag() {
    var me = this;
    var _me$props = me.props,
        addTags = _me$props.addTags,
        locale = _me$props.locale,
        prefixCls = _me$props.prefixCls;

    var lang = _i18n2["default"][locale.toLowerCase()];
    if (!addTags) {
      return null;
    }
    if (me.state.showInput) {
      return _react2["default"].createElement(
        'li',
        { className: prefixCls + '-add-input' },
        _react2["default"].createElement('input', {
          ref: me.saveRef('input'),
          className: 'kuma-input',
          placeholder: lang.inputPlaceholder,
          onChange: function onChange(e) {
            me.onInputChange(e);
          },
          onBlur: function onBlur() {
            me.onInputBlur();
          },
          onKeyDown: function onKeyDown(e) {
            me.onInputKeyDown(e);
          },
          value: me.state.inputValue
        }),
        _react2["default"].createElement(
          'span',
          { className: prefixCls + '-add-input-submit', onMouseDown: function onMouseDown() {
              me.onAdd();
            } },
          _react2["default"].createElement(_uxcoreIcon2["default"], { name: 'biaoqianxuanze-duoxuan-gou', usei: true })
        )
      );
    }
    return _react2["default"].createElement(
      'li',
      {
        className: prefixCls + '-add',
        onClick: me.onClickAddButton.bind(me)
      },
      _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-add' })
    );
  };

  Tag.prototype.render = function render() {
    var me = this;
    var props = me.props;
    return _react2["default"].createElement(
      'ul',
      {
        className: (0, _classnames3["default"])(props.prefixCls, _defineProperty({}, props.className, !!props.className))
      },
      props.children,
      me.renderAddTag()
    );
  };

  return Tag;
}(_react2["default"].Component);

Tag.childContextTypes = {
  tagPrefixCls: _propTypes2["default"].string
};
exports["default"] = Tag;


Tag.defaultProps = {
  prefixCls: 'uxcore-tag',
  className: '', //
  addTags: true, // 是否可以新增标签
  onAdd: function onAdd() {}, // 添加标签回调
  locale: 'zh-cn' // 多语言，可选en-us
};

// http://facebook.github.io/react/docs/reusable-components.html
Tag.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  addTags: _propTypes2["default"].bool,
  onAdd: _propTypes2["default"].func,
  locale: _propTypes2["default"].string
};

Tag.displayName = 'Tag';

Tag.Item = _Item2["default"];
module.exports = exports['default'];