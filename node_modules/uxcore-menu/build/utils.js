'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_LET_REACT_16 = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.forceLineClampSupport = forceLineClampSupport;
exports.getClampProps = getClampProps;

var _react = require('react');

var isLineClampSupport = function () {
  var div = document.createElement('div');
  return ['lineClamp', 'WebkitLineClamp'].filter(function (prop) {
    return prop in div.style;
  }).length;
}();

var _ReactVersion$split = _react.version.split('.'),
    _ReactVersion$split2 = _slicedToArray(_ReactVersion$split, 1),
    ReactMajorVersion = _ReactVersion$split2[0];

var IS_LET_REACT_16 = exports.IS_LET_REACT_16 = parseInt(ReactMajorVersion, 10) < 16;

function forceLineClampSupport(support) {
  isLineClampSupport = support;
}

function getClampProps(_ref) {
  var mode = _ref.mode,
      level = _ref.level,
      lineClamp = _ref.lineClamp,
      className = _ref.className;

  var props = {};
  var clamp = false;
  if (mode === 'inline' || mode === 'vertical' && level === 1) {
    if (isLineClampSupport && lineClamp > 1) {
      var style = {};
      style.WebkitLineClamp = lineClamp;
      style.lineClamp = lineClamp;
      style.WebkitBoxOrient = 'vertical';
      style.boxOrient = 'vertical';
      props.style = style;
      props.className = className;
      clamp = true;
    }
  }
  return { props: props, clamp: clamp };
}