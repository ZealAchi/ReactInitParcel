'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * UserGuide Component for uxcore
 * @author buzhou
 *
 * Copyright 2015-2016, Uxcore Team, Alinw.
 * All rights reserved.
 */
var React = require('react');
var ReactDOM = require('react-dom');
var UserGuideStage = require('./UserGuideStage');
var scrollToTop = require('./scrollToTop');

var guideMap = {};

// HOC, 不是一个react component

var UserGuide = function () {
  function UserGuide(key, config) {
    _classCallCheck(this, UserGuide);

    this.key = key;
    this.locale = config && config.locale || 'zh-cn';
    this.prefixCls = config && config.prefixCls || 'kuma-user-guide';
    this.className = config && config.className || '';
    // 默认 true,
    this.isBlocking = config && config.isBlocking;
    if (this.isBlocking === undefined) {
      this.isBlocking = true;
    }
    this.assistType = config && config.assistType;
    this.onAssistClick = config && config.onAssistClick;
    this.onComplete = config && config.onComplete;
  }

  UserGuide.prototype.addUserGuide = function addUserGuide(guideProps) {
    var _this = this;

    var _guideProps$step = guideProps.step,
        step = _guideProps$step === undefined ? 0 : _guideProps$step;

    if (!this.steps) {
      this.steps = [];
    }
    this.steps[step] = guideProps || {};
    // if (WrappedComponent instanceof HTMLElement) {
    //   this.steps[step].dom = WrappedComponent;
    //   return WrappedComponent;
    // }
    if (guideProps.type === 'ReactComponent') {
      return function (props) {
        return React.createElement(guideProps.dom, _extends({}, props, {
          ref: function ref(comp) {
            _this.steps[step].dom = comp;
          }
        }));
      };
    }
    return false;
  };

  UserGuide.prototype.start = function start(designMode) {
    var _this2 = this;

    // key must specified
    var steps = (this.steps || []).filter(function (i) {
      return i;
    });
    var dom = document.createElement('div');
    dom.className = this.prefixCls + '-stage' + (designMode ? ' design-mode' : '') + (this.className ? ' ' + this.className : '') + (this.isBlocking ? ' isBlocking' : '');
    document.body.appendChild(dom);
    var overflow = document.body.style.overflowY;
    if (this.isBlocking) {
      document.body.style.overflowY = 'hidden';
    }
    scrollToTop(0);
    steps.forEach(function (step) {
      var s = step;
      s.assistType = _this2.assistType;
    });
    this.stop = function stop() {
      var callOnComplete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      ReactDOM.unmountComponentAtNode(dom);
      document.body.removeChild(dom);
      document.body.style.overflowY = overflow;
      this.drop();
      if (typeof this.onComplete === 'function' && callOnComplete) {
        this.onComplete();
      }
    };
    ReactDOM.render(React.createElement(UserGuideStage, {
      steps: steps,
      assistType: this.assistType,
      onAssistClick: this.onAssistClick,
      locale: this.locale,
      prefixCls: this.prefixCls,
      className: this.className,
      done: function done() {
        return _this2.stop();
      },
      designMode: designMode
    }), dom);
  };

  UserGuide.prototype.drop = function drop() {
    // 防止内存泄漏
    delete guideMap[this.key];
  };

  return UserGuide;
}();

exports["default"] = UserGuide;


UserGuide.getWithKey = function getWithKey(key, config) {
  if (guideMap[key]) {
    return guideMap[key];
  }
  guideMap[key] = new UserGuide(key, config);
  return guideMap[key];
};

module.exports = UserGuide;
module.exports = exports['default'];