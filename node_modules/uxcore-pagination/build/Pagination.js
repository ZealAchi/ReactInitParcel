'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _Pager = require('./Pager');

var _Pager2 = _interopRequireDefault(_Pager);

var _Options = require('./Options');

var _Options2 = _interopRequireDefault(_Options);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Forked from project rc-pagination
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @maintainer eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function noop() {}

var Pagination = function (_React$Component) {
  _inherits(Pagination, _React$Component);

  Pagination.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    if (nextProps.current !== prevState.lastCurrent) {
      return {
        current: nextProps.current,
        _current: nextProps.current,
        lastCurrent: nextProps.current,
        pageSize: prevState.pageSize,
        lastPageSize: prevState.lastPageSize
      };
    }
    if (nextProps.pageSize !== prevState.lastPageSize) {
      return {
        current: prevState.current,
        _current: prevState.current,
        lastCurrent: prevState.current,
        pageSize: nextProps.pageSize,
        lastPageSize: nextProps.pageSize
      };
    }
    return null;
  };

  function Pagination(props) {
    _classCallCheck(this, Pagination);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    var current = Math.floor(props.current);
    var pageSize = Math.floor(props.pageSize);
    _this.state = {
      current: current,
      _current: current,
      lastCurrent: current,
      pageSize: pageSize,
      lastPageSize: pageSize
    };

    ['render', '_handleChange',
    // '_handleKeyUp',
    // '_handleKeyDown',
    '_changePageSize', '_isValid', '_prev', '_next', '_hasPrev', '_hasNext', '_jumpPrev', '_jumpNext'].forEach(function (method) {
      _this[method] = _this[method].bind(_this);
      return null;
    });
    return _this;
  }

  // private methods

  Pagination.prototype._calcPage = function _calcPage(p) {
    var pageSize = p;
    if (typeof pageSize === 'undefined') {
      pageSize = this.state.pageSize;
    }
    var total = Math.floor(this.props.total);
    if ([0, undefined, null].indexOf(total) !== -1) {
      return Infinity;
    }
    return Math.floor((total - 1 + this.props.totalSizeOffset) / pageSize) + 1;
  };

  Pagination.prototype._isValid = function _isValid(page) {
    return typeof page === 'number' && page >= 1 && page !== this.state.current;
  };

  Pagination.prototype._changePageSize = function _changePageSize(size) {
    if (typeof size === 'number') {
      var current = this.state.current;

      this.setState({
        pageSize: size
      });

      if (this.state.current > this._calcPage(size)) {
        current = this._calcPage(size);
        this.setState({
          current: current,
          _current: current
        });
      }

      this.props.onShowSizeChange(current, size);
    }
  };

  Pagination.prototype._handleChange = function _handleChange(p) {
    var page = p;
    var me = this;
    if (this._isValid(page)) {
      if (page > this._calcPage()) {
        page = this._calcPage();
      }
      this.setState({
        current: page,
        _current: page
      }, function () {
        me.props.onChange(page);
      });

      return page;
    }

    return this.state.current;
  };

  Pagination.prototype._prev = function _prev() {
    if (this._hasPrev()) {
      this._handleChange(this.state.current - 1);
    }
  };

  Pagination.prototype._next = function _next() {
    if (this._hasNext()) {
      this._handleChange(this.state.current + 1);
    }
  };

  Pagination.prototype._jumpPrev = function _jumpPrev() {
    this._handleChange(Math.max(1, this.state.current - 5));
  };

  Pagination.prototype._jumpNext = function _jumpNext() {
    this._handleChange(Math.min(this._calcPage(), this.state.current + 5));
  };

  Pagination.prototype._hasPrev = function _hasPrev() {
    return this.state.current > 1;
  };

  Pagination.prototype._hasNext = function _hasNext() {
    return this.state.current < this._calcPage();
  };

  Pagination.prototype.renderTotal = function renderTotal() {
    var _props = this.props,
        locale = _props.locale,
        total = _props.total;

    if (this.props.showTotal) {
      return _react2["default"].createElement(
        'li',
        { className: this.props.prefixCls + '-total' },
        _locale2["default"][locale].total(Math.floor(total))
      );
    }
    return null;
  };

  Pagination.prototype.render = function render() {
    var _this2 = this;

    var props = this.props;

    var prefixCls = props.prefixCls;
    var allPages = this._calcPage();
    var pagerList = [];
    var jumpPrev = null;
    var jumpNext = null;
    var firstPager = null;
    var lastPager = null;

    if ([0, undefined, null].indexOf(Math.floor(props.total)) !== -1) {
      return _react2["default"].createElement(
        'ul',
        { className: prefixCls + ' ' + props.className },
        _react2["default"].createElement(
          'li',
          { title: 'Previous Page', onClick: this._prev, className: '' + (this._hasPrev() ? '' : prefixCls + '-disabled ') + prefixCls + '-prev' },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'left' })
        ),
        _react2["default"].createElement(
          'div',
          { title: 'Page ' + this.state.current, className: prefixCls + '-unknown-total' },
          _react2["default"].createElement(
            'span',
            { className: prefixCls + '-current' },
            _locale2["default"][props.locale].pageNo(this.state._current)
          )
        ),
        _react2["default"].createElement(
          'li',
          { title: 'Next Page', onClick: this._next, className: '' + (this._hasNext() ? '' : prefixCls + '-disabled ') + prefixCls + '-next' },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'right' })
        )
      );
    }

    if (props.simple) {
      return _react2["default"].createElement(
        'ul',
        { className: prefixCls + ' ' + prefixCls + '-simple ' + props.className },
        _react2["default"].createElement(
          'li',
          { title: 'Previous Page', onClick: this._prev, className: '' + (this._hasPrev() ? '' : prefixCls + '-disabled ') + prefixCls + '-prev' },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'left' })
        ),
        _react2["default"].createElement(
          'div',
          { title: 'Page ' + this.state.current + ' of ' + allPages, className: prefixCls + '-simple-pager' },
          _react2["default"].createElement(
            'span',
            { className: prefixCls + '-current' },
            this.state._current
          ),
          _react2["default"].createElement(
            'span',
            { className: prefixCls + '-slash' },
            '/'
          ),
          allPages
        ),
        _react2["default"].createElement(
          'li',
          { title: 'Next Page', onClick: this._next, className: '' + (this._hasNext() ? '' : prefixCls + '-disabled ') + prefixCls + '-next' },
          _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'right' })
        )
      );
    }

    var pageShowCount = props.pageShowCount || props.maxUnfoldedLength || 9;
    if (allPages <= pageShowCount) {
      for (var i = 1; i <= allPages; i++) {
        var active = this.state.current === i;
        pagerList.push(_react2["default"].createElement(_Pager2["default"], {
          rootPrefixCls: prefixCls,
          onClick: this._handleChange.bind(this, i),
          key: i,
          page: i,
          active: active
        }));
      }
    } else {
      jumpPrev = _react2["default"].createElement(
        'li',
        { title: 'Previous 5 Page', key: 'prev', onClick: this._jumpPrev, className: prefixCls + '-jump-prev' },
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'more-dot' }),
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'left_double' })
      );
      jumpNext = _react2["default"].createElement(
        'li',
        { title: 'Next 5 Page', key: 'next', onClick: this._jumpNext, className: prefixCls + '-jump-next' },
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'more-dot' }),
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'right_double' })
      );
      lastPager = _react2["default"].createElement(_Pager2["default"], {
        last: true,
        rootPrefixCls: prefixCls,
        onClick: this._handleChange.bind(this, allPages),
        key: allPages,
        page: allPages,
        active: false
      });
      firstPager = _react2["default"].createElement(_Pager2["default"], {
        rootPrefixCls: prefixCls,
        onClick: this._handleChange.bind(this, 1),
        key: 1,
        page: 1,
        active: false
      });

      var current = this.state.current;

      var left = Math.max(1, current - 2);
      var right = Math.min(current + 2, allPages);

      if (current - 1 <= 2) {
        right = 1 + 4;
      }

      if (allPages - current <= 2) {
        left = allPages - 4;
      }

      for (var _i = left; _i <= right; _i++) {
        var _active = current === _i;
        pagerList.push(_react2["default"].createElement(_Pager2["default"], {
          rootPrefixCls: prefixCls,
          onClick: this._handleChange.bind(this, _i),
          key: _i,
          page: _i,
          active: _active
        }));
      }

      if (current - 1 >= 4) {
        pagerList.unshift(jumpPrev);
      }
      if (allPages - current >= 4) {
        pagerList.push(jumpNext);
      }

      if (left !== 1) {
        pagerList.unshift(firstPager);
      }
      if (right !== allPages) {
        pagerList.push(lastPager);
      }
    }

    return _react2["default"].createElement(
      'ul',
      {
        className: prefixCls + ' ' + props.className,
        unselectable: 'unselectable'
      },
      this.renderTotal(),
      _react2["default"].createElement(
        'li',
        { title: 'Previous Page', onClick: this._prev, className: '' + (this._hasPrev() ? '' : prefixCls + '-disabled ') + prefixCls + '-prev' },
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'left' })
      ),
      pagerList,
      _react2["default"].createElement(
        'li',
        { title: 'Next Page', onClick: this._next, className: '' + (this._hasNext() ? '' : prefixCls + '-disabled ') + prefixCls + '-next' },
        _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'right' })
      ),
      _react2["default"].createElement(_Options2["default"], {
        rootPrefixCls: prefixCls,
        ref: function ref(options) {
          _this2.options = options;
        },
        locale: props.locale,
        selectComponentClass: props.selectComponentClass,
        getPopupContainer: props.getSelectPopupContainer,
        selectPrefixCls: props.selectPrefixCls,
        changeSize: this.props.showSizeChanger ? this._changePageSize.bind(this) : null,
        current: this.state.current,
        pageSize: props.pageSize,
        sizeOptions: props.sizeOptions,
        quickGo: this.props.showQuickJumper ? this._handleChange.bind(this) : null
      })
    );
  };

  return Pagination;
}(_react2["default"].Component);

Pagination.propTypes = {
  current: _propTypes2["default"].number,
  total: _propTypes2["default"].number,
  totalSizeOffset: _propTypes2["default"].number,
  locale: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  showTotal: _propTypes2["default"].bool,
  pageSize: _propTypes2["default"].number,
  sizeOptions: _propTypes2["default"].array,
  onChange: _propTypes2["default"].func,
  showSizeChanger: _propTypes2["default"].bool,
  onShowSizeChange: _propTypes2["default"].func,
  selectComponentClass: _propTypes2["default"].func,
  showQuickJumper: _propTypes2["default"].bool,
  pageShowCount: _propTypes2["default"].number
};

Pagination.defaultProps = {
  current: 1,
  total: 0,
  totalSizeOffset: 0,
  locale: 'zh-cn',
  showTotal: false,
  pageSize: 10,
  sizeOptions: [10, 20, 30, 40],
  onChange: noop,
  className: '',
  selectPrefixCls: 'kuma-select2',
  prefixCls: 'kuma-page',
  selectComponentClass: _uxcoreSelect2["default"],
  showQuickJumper: false,
  showSizeChanger: false,
  onShowSizeChange: noop,
  pageShowCount: undefined
};

Pagination.displayName = 'Pagination';

(0, _reactLifecyclesCompat.polyfill)(Pagination);

exports["default"] = Pagination;
module.exports = exports['default'];