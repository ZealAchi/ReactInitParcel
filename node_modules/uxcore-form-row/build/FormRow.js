'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var FormRow = function (_React$Component) {
  _inherits(FormRow, _React$Component);

  function FormRow(props) {
    _classCallCheck(this, FormRow);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.totalFlex = 0;
    _this.isAllViewMode = true;
    return _this;
  }

  FormRow.prototype.processChild = function processChild(children) {
    var _this2 = this;

    var me = this;
    var _props = this.props,
        autoAdjustSpacing = _props.autoAdjustSpacing,
        mode = _props.mode;

    me.totalFlex = 0;
    var length = _react2["default"].Children.count(children);
    var elements = [];
    if (length === 0) {
      console.warn('FORM: You must pass children to the form component');
      return false;
    }
    _react2["default"].Children.forEach(children, function (child) {
      // 如果是自己添加的 DOM 直接抛弃
      if (child && typeof child.type === 'function') {
        var displayName = child.type.displayName;

        var realMode = child.props.jsxmode || mode;
        if (realMode === _uxcoreConst2["default"].MODE.EDIT) {
          _this2.isAllViewMode = false;
        }
        if (/FormField/.test(displayName)) {
          if (child.props.jsxshow) {
            me.totalFlex += child.props.jsxflex || 1;
          }
          elements.push(child);
        }
      }
    });
    // if autoAdjustSpacing is not active, isAllViewMode is not active
    if (!autoAdjustSpacing) {
      this.isAllViewMode = false;
    }
    return elements;
  };

  FormRow.prototype.render = function render() {
    var _classnames,
        _this3 = this;

    var me = this;
    var elements = me.processChild(me.props.children);
    var totalFlex = me.props.totalFlex || me.totalFlex;
    var prefixCls = me.props.prefixCls || 'kuma-uxform-row';
    if (me.props.formPrefixCls) {
      prefixCls = me.props.formPrefixCls + '-row';
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, prefixCls, true), _defineProperty(_classnames, me.props.className, !!me.props.className), _classnames))
      },
      !!elements && elements.map(function (child, index) {
        var value = me.props.data[child.props.jsxname];
        var cloneProps = {
          mode: me.props.mode,
          jsxinstant: me.props.instantValidate,
          jsxVerticalAlign: me.props.verticalAlign,
          jsxsize: me.props.size,
          value: value,
          key: child.props.jsxname || index,
          asyncValidate: me.props.asyncValidate,
          isAllViewMode: _this3.isAllViewMode,
          totalFlex: totalFlex,
          style: { width: child.props.jsxflex / me.totalFlex * 100 + '%' },
          attachFormField: me.props.attachFormField,
          detachFormField: me.props.detachFormField,
          handleDataChange: me.props.handleDataChange,
          getValues: me.props.getValues,
          resetValues: me.props.resetValues
        };
        if (me.props.formPrefixCls) {
          cloneProps.jsxprefixCls = me.props.formPrefixCls + '-field';
          cloneProps.formPrefixCls = me.props.formPrefixCls;
        }
        return _react2["default"].cloneElement(child, cloneProps);
      })
    );
  };

  return FormRow;
}(_react2["default"].Component);

FormRow.defaultProps = {
  prefixCls: '',
  mode: _uxcoreConst2["default"].MODE.EDIT,
  autoAdjustSpacing: false
};

FormRow.propTypes = {
  prefixCls: _propTypes2["default"].string,
  mode: _propTypes2["default"].string,
  autoAdjustSpacing: _propTypes2["default"].bool
};

FormRow.displayName = 'FormRow';

exports["default"] = FormRow;
module.exports = exports['default'];