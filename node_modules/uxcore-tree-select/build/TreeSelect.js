'use strict';

var _Select = require('./Select');

var _Select2 = _interopRequireDefault(_Select);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _TreeNode = require('rc-tree-select/lib/TreeNode');

var _TreeNode2 = _interopRequireDefault(_TreeNode);

var _strategies = require('rc-tree-select/lib/strategies');

var _strategies2 = _interopRequireDefault(_strategies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * TreeSelect Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author biangang.bg
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var supportSVG = false;
if (typeof document !== 'undefined') {
  supportSVG = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var TreeSelect = function (_RcTreeSelect) {
  _inherits(TreeSelect, _RcTreeSelect);

  function TreeSelect() {
    _classCallCheck(this, TreeSelect);

    return _possibleConstructorReturn(this, _RcTreeSelect.apply(this, arguments));
  }

  return TreeSelect;
}(_Select2["default"]);

TreeSelect.TreeNode = _TreeNode2["default"];
(0, _objectAssign2["default"])(TreeSelect, _strategies2["default"]);
TreeSelect.displayName = 'TreeSelect';

TreeSelect.defaultProps = (0, _objectAssign2["default"])(_Select2["default"].defaultProps, {
  prefixCls: 'uxcore-tree-select',
  dropdownClassName: supportSVG ? 'use-svg' : 'no-svg',
  transitionName: 'slideUp',
  choiceTransitionName: 'uxcore-tree-select-selection__choice-zoom',
  showSearch: false,
  dropdownMatchSelectWidth: false,
  maxTagTextLength: 10,
  locale: 'zh-cn'
});

TreeSelect.propTypes = _Select2["default"].propTypes;

module.exports = TreeSelect;