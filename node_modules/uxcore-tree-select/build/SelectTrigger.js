'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _rcTrigger = require('rc-trigger');

var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

var _rcTree = require('rc-tree');

var _rcTree2 = _interopRequireDefault(_rcTree);

var _util = require('rc-tree-select/lib/util');

var _toArray = require('rc-util/lib/Children/toArray');

var _toArray2 = _interopRequireDefault(_toArray);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _utils = require('./utils');

var _RightTreeNode = require('./RightTreeNode');

var _RightTreeNode2 = _interopRequireDefault(_RightTreeNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } // customized rc-tree-select  https://github.com/react-component/tree-select/blob/master/src/SelectTrigger.jsx

var BUILT_IN_PLACEMENTS = {
  bottomLeft: {
    points: ['tl', 'bl'],
    offset: [0, 4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  },
  topLeft: {
    points: ['bl', 'tl'],
    offset: [0, -4],
    overflow: {
      adjustX: 0,
      adjustY: 1
    }
  }
};

var SelectTrigger = function (_Component) {
  _inherits(SelectTrigger, _Component);

  function SelectTrigger() {
    var _temp, _this, _ret;

    _classCallCheck(this, SelectTrigger);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {
      _expandedKeys: [],
      fireOnExpand: false,
      dropdownWidth: null
    }, _this.onResultsPanelAllClear = function () {
      _this.props.onAllClear();
    }, _this.onExpand = function (expandedKeys) {
      // rerender
      _this.setState({
        _expandedKeys: expandedKeys,
        fireOnExpand: true
      }, function () {
        // Fix https://github.com/ant-design/ant-design/issues/5689
        if (_this.trigger && _this.trigger.forcePopupAlign) {
          _this.trigger.forcePopupAlign();
        }
      });
    }, _this.highlightTreeNode = function (treeNode) {
      var props = _this.props;
      var filterVal = treeNode.props[(0, _util.labelCompatible)(props.treeNodeFilterProp)];
      if (typeof filterVal === 'string') {
        return props.inputValue && filterVal.indexOf(props.inputValue) > -1;
      }
      return false;
    }, _this.filterTreeNode = function (input, child) {
      if (!input) {
        return true;
      }
      var filterTreeNode = _this.props.filterTreeNode;
      if (!filterTreeNode) {
        return true;
      }
      if (child.props.disabled) {
        return false;
      }
      return filterTreeNode.call(_this, input, child);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  SelectTrigger.prototype.componentDidMount = function componentDidMount() {
    this.setDropdownWidth();
  };

  SelectTrigger.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.inputValue && nextProps.inputValue !== this.props.inputValue) {
      // set autoExpandParent to true
      this.setState({
        _expandedKeys: [],
        fireOnExpand: false
      });
    }
  };

  SelectTrigger.prototype.componentDidUpdate = function componentDidUpdate() {
    this.setDropdownWidth();
  };

  SelectTrigger.prototype.setDropdownWidth = function setDropdownWidth() {
    var width = _reactDom2["default"].findDOMNode(this).offsetWidth;
    if (width !== this.state.dropdownWidth) {
      this.setState({ dropdownWidth: width });
    }
  };

  SelectTrigger.prototype.getPopupEleRefs = function getPopupEleRefs() {
    return this.popupEle;
  };

  SelectTrigger.prototype.getPopupDOMNode = function getPopupDOMNode() {
    return this.trigger.getPopupDomNode();
  };

  SelectTrigger.prototype.getDropdownTransitionName = function getDropdownTransitionName() {
    var props = this.props;
    var transitionName = props.transitionName;
    if (!transitionName && props.animation) {
      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
    }
    return transitionName;
  };

  SelectTrigger.prototype.getDropdownPrefixCls = function getDropdownPrefixCls() {
    return this.props.prefixCls + '-dropdown';
  };

  SelectTrigger.prototype.filterSelectedTreeNode = function filterSelectedTreeNode(valueArr, child) {
    if (valueArr.indexOf(child.props.value) > -1) {
      return true;
    }
    return false;
  };

  SelectTrigger.prototype.processSelectedTreeNode = function processSelectedTreeNode(treeNodes) {
    var _this2 = this;

    // 筛选已经选中的treeNode并重组
    var filterPoss = [];
    var _props = this.props,
        value = _props.value,
        treeCheckStrictly = _props.treeCheckStrictly;

    var valueArr = value.map(function (item) {
      return item.value;
    });
    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {
      if (_this2.filterSelectedTreeNode(valueArr, child)) {
        filterPoss.push(pos);
      }
    });

    var processedPoss = [];
    // Include the filtered nodes's ancestral nodes when treeCheckStrictly is false
    // or only use selected nodes when treeCheckStrictly is true
    // 在treeCheckStrictly为false的时候加入processedPoss包括其祖先节点, 否则只使用选中的节点
    if (treeCheckStrictly) {
      processedPoss = filterPoss;
    } else {
      filterPoss.forEach(function (pos) {
        var arr = pos.split('-');
        arr.reduce(function (pre, cur) {
          var res = pre + '-' + cur;
          if (processedPoss.indexOf(res) < 0) {
            processedPoss.push(res);
          }
          return res;
        });
      });
    }

    // 再筛选一遍将node都push进去
    var filterNodesPositions = [];
    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {
      if (processedPoss.indexOf(pos) > -1) {
        var renderNode = { node: child, pos: pos, isAll: false };
        // 如果有children就是全选的
        if (filterPoss.indexOf(pos) > -1 && child.props.children) {
          // 如果 treeCheckStrictly 为true, 就不展示子节点了, 也不需要显示"全选"这个文案了.
          if (!treeCheckStrictly) {
            renderNode.isAll = true;
          }
        }
        filterNodesPositions.push(renderNode);
      }
    });

    var hierarchyNodes = void 0;
    // 阶层 讲平层转换为阶级数组. flatToHierarchy会把具有层级关系的节点进行合并,去掉被包含的节点.
    // 但是在treeCheckStrictly为true的时候就不能去掉被包含的节点啦
    if (treeCheckStrictly) {
      hierarchyNodes = filterNodesPositions;
    } else {
      hierarchyNodes = (0, _utils.flatToHierarchy)(filterNodesPositions, true);
    }

    var recursive = function recursive(children) {
      return children.map(function (child) {
        if (child.children) {
          return _react2["default"].cloneElement(child.node, { isAll: child.isAll }, recursive(child.children));
        }
        // 单一节点 本身就包括children
        return _react2["default"].cloneElement(child.node, { isAll: child.isAll });
      });
    };

    return recursive(hierarchyNodes);
  };

  SelectTrigger.prototype.processTreeNode = function processTreeNode(treeNodes) {
    var _this3 = this;

    var filterPoss = [];
    this._expandedKeys = [];
    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {
      if (_this3.filterTreeNode(_this3.props.inputValue, child)) {
        filterPoss.push(pos);
        _this3._expandedKeys.push(child.key);
      }
    });

    // Include the filtered nodes's ancestral nodes.
    var processedPoss = [];
    filterPoss.forEach(function (pos) {
      var arr = pos.split('-');
      arr.reduce(function (pre, cur) {
        var res = pre + '-' + cur;
        if (processedPoss.indexOf(res) < 0) {
          processedPoss.push(res);
        }
        return res;
      });
    });
    var filterNodesPositions = [];
    (0, _util.loopAllChildren)(treeNodes, function (child, index, pos) {
      if (processedPoss.indexOf(pos) > -1) {
        filterNodesPositions.push({ node: child, pos: pos });
      }
    });

    var hierarchyNodes = (0, _utils.flatToHierarchy)(filterNodesPositions);

    var recursive = function recursive(children) {
      return children.map(function (child) {
        if (child.children) {
          return _react2["default"].cloneElement(child.node, {}, recursive(child.children));
        }
        return child.node;
      });
    };
    return recursive(hierarchyNodes);
  };

  SelectTrigger.prototype.renderRightTree = function renderRightTree(newTreeNodes, keys) {
    var props = this.props;


    var trProps = {
      prefixCls: props.prefixCls + '-rightTreeNode',
      treeNodeLabelProp: props.treeNodeLabelProp,
      isMultiple: props.multiple || props.tags || props.treeCheckable,
      removeSelected: props.removeSelected,
      locale: props.locale,
      onSelect: this.onSelect,
      keys: keys,
      treeCheckStrictly: props.treeCheckStrictly,
      dropdownWidth: this.state.dropdownWidth
    };

    var recursive = function recursive(children, level) {
      return (
        // Note: if use `React.Children.map`, the node's key will be modified.
        (0, _toArray2["default"])(children).map(function handler(child) {
          // eslint-disable-line
          if (child && child.props.children && !props.treeCheckStrictly) {
            // null or String has no Prop
            return _react2["default"].createElement(
              _RightTreeNode2["default"],
              _extends({}, trProps, child.props, {
                pos: child.key,
                level: level,
                isLeft: false,
                key: child.key
              }),
              recursive(child.props.children, level + 1)
            );
          }
          return _react2["default"].createElement(_RightTreeNode2["default"], _extends({}, trProps, child.props, {
            pos: child.key,
            level: level,
            isLeft: true,
            key: child.key
          }));
        })
      );
    };

    return _react2["default"].createElement(
      'div',
      {
        className: '' + trProps.prefixCls,
        style: { height: (props.dropdownStyle.maxHeight ? props.dropdownStyle.maxHeight - 62 : 250) + 'px' }
      },
      recursive(newTreeNodes, 1)
    );
  };

  SelectTrigger.prototype.renderRightDropdown = function renderRightDropdown(rightTreeNodes, keys) {
    var _props2 = this.props,
        resultsPanelAllClearBtn = _props2.resultsPanelAllClearBtn,
        resultsPanelTitle = _props2.resultsPanelTitle,
        resultsPanelTitleStyle = _props2.resultsPanelTitleStyle,
        value = _props2.value,
        locale = _props2.locale;


    var resultsPanelPrefixCls = this.getDropdownPrefixCls() + '-right';

    var renderRightDropdownTitle = null;

    if (resultsPanelTitle) {
      renderRightDropdownTitle = _react2["default"].createElement(
        'p',
        { className: resultsPanelPrefixCls + '-title', style: resultsPanelTitleStyle },
        resultsPanelTitle
      );
    }
    var num = value.length || 0;

    var noContent = _react2["default"].createElement(
      'div',
      {
        className: resultsPanelPrefixCls + '-noContent'
      },
      _i18n2["default"][locale].pleaseSelectFromLeft
    );
    var clear = _react2["default"].createElement(
      'span',
      {
        key: 'rightDropdownAllclear',
        className: resultsPanelPrefixCls + '-allClear',
        onClick: this.onResultsPanelAllClear
      },
      _i18n2["default"][locale].clear
    );

    return _react2["default"].createElement(
      'div',
      { className: '' + resultsPanelPrefixCls },
      _react2["default"].createElement(
        'div',
        { style: { padding: '16px' } },
        _react2["default"].createElement(
          'div',
          null,
          _react2["default"].createElement(
            'span',
            { className: resultsPanelPrefixCls + '-selected' },
            _react2["default"].createElement(
              'span',
              { className: resultsPanelPrefixCls + '-selected-title' },
              _i18n2["default"][locale].alreadyChoosed
            ),
            _react2["default"].createElement(
              'span',
              { className: resultsPanelPrefixCls + '-selected-number' },
              '\uFF08',
              num,
              '\uFF09'
            )
          ),
          resultsPanelAllClearBtn && num ? clear : null
        ),
        renderRightDropdownTitle
      ),
      num === 0 ? noContent : this.renderRightTree(rightTreeNodes, keys)
    );
  };

  SelectTrigger.prototype.renderTree = function renderTree(keys, halfCheckedKeys, newTreeNodes, multiple) {
    var props = this.props;

    var trProps = {
      multiple: multiple,
      prefixCls: props.prefixCls + '-tree',
      showIcon: props.treeIcon,
      showLine: props.treeLine,
      defaultExpandAll: props.treeDefaultExpandAll,
      defaultExpandedKeys: props.treeDefaultExpandedKeys,
      filterTreeNode: this.highlightTreeNode
    };

    if (props.treeCheckable) {
      trProps.selectable = false;
      trProps.checkable = props.treeCheckable;
      trProps.onCheck = props.onSelect;
      trProps.checkStrictly = props.treeCheckStrictly;
      if (props.inputValue) {
        // enable checkStrictly when search tree.
        trProps.checkStrictly = true;
      } else {
        trProps._treeNodesStates = props._treeNodesStates;
      }
      if (trProps.treeCheckStrictly && halfCheckedKeys.length) {
        trProps.checkedKeys = { checked: keys, halfChecked: halfCheckedKeys };
      } else {
        trProps.checkedKeys = keys;
      }
    } else {
      trProps.selectedKeys = keys;
      trProps.onSelect = props.onSelect;
    }

    // expand keys
    if (!trProps.defaultExpandAll && !trProps.defaultExpandedKeys && !props.loadData) {
      trProps.expandedKeys = keys;
    }
    trProps.autoExpandParent = true;
    trProps.onExpand = this.onExpand;
    if (this._expandedKeys && this._expandedKeys.length) {
      trProps.expandedKeys = this._expandedKeys;
    }
    if (this.state.fireOnExpand) {
      trProps.expandedKeys = this.state._expandedKeys;
      trProps.autoExpandParent = false;
    }

    // async loadData
    if (props.loadData) {
      trProps.loadData = props.loadData;
    }

    return _react2["default"].createElement(
      _rcTree2["default"],
      _extends({ ref: (0, _util.saveRef)(this, 'popupEle') }, trProps),
      newTreeNodes
    );
  };

  SelectTrigger.prototype.render = function render() {
    var _popupClassName;

    var props = this.props;
    var multiple = props.multiple;
    var dropdownPrefixCls = this.getDropdownPrefixCls();
    var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, props.dropdownClassName, !!props.dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
    var visible = props.visible;
    var search = multiple || props.combobox || !props.showSearch ? null : _react2["default"].createElement(
      'span',
      { className: dropdownPrefixCls + '-search' },
      props.inputElement
    );

    var recursive = function recursive(children) {
      // Note: if use `React.Children.map`, the node's key will be modified.
      return (0, _toArray2["default"])(children).map(function handler(child) {
        // eslint-disable-line
        if (!child) {
          return null;
        }
        if (child && child.props.children) {
          // null or String has no Prop
          return _react2["default"].createElement(
            _rcTree.TreeNode,
            _extends({}, child.props, { key: child.key }),
            recursive(child.props.children)
          );
        }
        return _react2["default"].createElement(_rcTree.TreeNode, _extends({}, child.props, { key: child.key }));
      });
    };
    // const s = Date.now();
    var treeNodes = void 0;
    if (props._cachetreeData && this.treeNodes) {
      treeNodes = this.treeNodes;
    } else {
      treeNodes = recursive(props.treeData || props.treeNodes);
      this.treeNodes = treeNodes;
    }
    // console.log(Date.now()-s);

    if (props.inputValue) {
      treeNodes = this.processTreeNode(treeNodes);
    }

    var rightTreeNodes = props.filterResultsPanel ? this.processSelectedTreeNode(treeNodes) : this.processSelectedTreeNode(this.treeNodes);

    var keys = [];
    var halfCheckedKeys = [];
    (0, _util.loopAllChildren)(treeNodes, function (child) {
      if (props.value.some(function (item) {
        return item.value === (0, _util.getValuePropValue)(child);
      })) {
        keys.push(child.key);
      }
      if (props.halfCheckedValues && props.halfCheckedValues.some(function (item) {
        return item.value === (0, _util.getValuePropValue)(child);
      })) {
        halfCheckedKeys.push(child.key);
      }
    });

    var notFoundContent = void 0;
    if (!treeNodes.length) {
      if (props.notFoundContent) {
        notFoundContent = _react2["default"].createElement(
          'span',
          { className: props.prefixCls + '-not-found' },
          props.notFoundContent
        );
      } else if (!search) {
        visible = false;
      }
    }
    // when prop multiple is true,show right dropdown
    var popupElement = _react2["default"].createElement(
      'div',
      {
        style: { height: (props.dropdownStyle.maxHeight || 312) + 'px' }
      },
      _react2["default"].createElement(
        'div',
        {
          className: dropdownPrefixCls + '-left',
          style: multiple ? {} : {
            width: '100%'
          }
        },
        search,
        notFoundContent || this.renderTree(keys, halfCheckedKeys, treeNodes, multiple)
      ),
      multiple && this.renderRightDropdown(rightTreeNodes, keys)
    );

    var popupStyle = {};
    popupStyle['width'] = props.dropdownMatchSelectWidth || !multiple ? this.state.dropdownWidth + 'px' : '350px';

    popupStyle = _extends({}, popupStyle, props.dropdownStyle);
    return _react2["default"].createElement(
      _rcTrigger2["default"],
      {
        action: props.disabled ? [] : ['click'],
        ref: (0, _util.saveRef)(this, 'trigger'),
        popupPlacement: 'bottomLeft',
        builtinPlacements: BUILT_IN_PLACEMENTS,
        popupAlign: props.dropdownPopupAlign,
        prefixCls: dropdownPrefixCls,
        popupTransitionName: this.getDropdownTransitionName(),
        onPopupVisibleChange: props.onDropdownVisibleChange,
        popup: popupElement,
        popupVisible: visible,
        getPopupContainer: props.getPopupContainer,
        popupClassName: (0, _classnames2["default"])(popupClassName),
        popupStyle: popupStyle
      },
      this.props.children
    );
  };

  return SelectTrigger;
}(_react.Component);

SelectTrigger.propTypes = {
  treeCheckStrictly: _propTypes2["default"].bool,
  dropdownMatchSelectWidth: _propTypes2["default"].bool,
  dropdownPopupAlign: _propTypes2["default"].object,
  visible: _propTypes2["default"].bool,
  filterTreeNode: _propTypes2["default"].any,
  treeNodes: _propTypes2["default"].any,
  inputValue: _propTypes2["default"].string,
  prefixCls: _propTypes2["default"].string,
  popupClassName: _propTypes2["default"].string,
  children: _propTypes2["default"].any,
  removeSelected: _propTypes2["default"].func,
  value: _propTypes2["default"].array,
  locale: _propTypes2["default"].string,
  onAllClear: _propTypes2["default"].func,
  resultsPanelAllClearBtn: _propTypes2["default"].bool,
  resultsPanelTitle: _propTypes2["default"].any,
  resultsPanelTitleStyle: _propTypes2["default"].object
};
exports["default"] = SelectTrigger;
module.exports = exports['default'];