'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreSelectFormField = require('uxcore-select-form-field');

var _uxcoreSelectFormField2 = _interopRequireDefault(_uxcoreSelectFormField);

var _uxcoreSelect = require('uxcore-select2');

var _uxcoreSelect2 = _interopRequireDefault(_uxcoreSelect);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Option = _uxcoreSelect2["default"].Option;

var selectOptions = ['onSelect', 'onDeselect', 'getPopupContainer', 'filterOption', 'allowClear', 'searchPlaceholder', 'tags', 'disabled', 'showSearch', 'placeholder', 'optionLabelProp', 'maxTagTextLength', 'dropdownMatchSelectWidth', 'dropdownClassName', 'notFoundContent'];

var SearchFormField = function (_SelectFormField) {
  _inherits(SearchFormField, _SelectFormField);

  function SearchFormField(props) {
    _classCallCheck(this, SearchFormField);

    var _this = _possibleConstructorReturn(this, _SelectFormField.call(this, props));

    _this.handleIconClick = _this.handleIconClick.bind(_this);
    return _this;
  }
  /* eslint-disable class-methods-use-this */


  SearchFormField.prototype.addSpecificClass = function addSpecificClass() {
    return 'kuma-search-uxform-field';
  };
  /* eslint-enable class-methods-use-this */

  SearchFormField.prototype._getFieldSize = function _getFieldSize() {
    return this.props.size || this.props.jsxsize || 'large';
  };

  SearchFormField.prototype._processAdvanced = function _processAdvanced() {
    var me = this;
    var advancedOptions = me.props.advancedOptions;

    return advancedOptions.map(function (item) {
      return _react2["default"].createElement(
        Option,
        { key: item.value, title: item.text },
        item.text
      );
    });
  };

  SearchFormField.prototype.processClassOptions = function processClassOptions() {
    var me = this;
    var classOptions = me.props.classOptions;

    return classOptions.map(function (item) {
      return _react2["default"].createElement(
        Option,
        { key: item.value, title: item.text },
        item.text
      );
    });
  };

  SearchFormField.prototype.handleChange = function handleChange(value) {
    var me = this;
    var stateValue = (0, _cloneDeep2["default"])(me.state.value) || {};
    stateValue.main = value;
    me.handleDataChange(stateValue);
  };

  SearchFormField.prototype.handleClassChange = function handleClassChange(value) {
    var me = this;
    var stateValue = (0, _cloneDeep2["default"])(me.state.value) || {};
    stateValue["class"] = value;
    me.handleDataChange(stateValue);
  };

  SearchFormField.prototype.handleAdvancedChange = function handleAdvancedChange(value) {
    var me = this;
    var stateValue = (0, _cloneDeep2["default"])(me.state.value) || {};
    stateValue.advanced = value;
    me.handleDataChange(stateValue);
  };

  SearchFormField.prototype.handleIconClick = function handleIconClick(e) {
    this.props.onIconClick(e, this.state.value);
  };

  SearchFormField.prototype.renderField = function renderField() {
    var me = this;
    var arr = [];
    var mode = me.props.jsxmode || me.props.mode;
    var value = me.state.value;

    if (mode === _uxcoreConst2["default"].MODE.VIEW) {
      return value ? value["class"] ? value["class"] + '-' + value.main : value.main : me.props.viewModePlaceholder || '--';
    }
    var hasClass = me.props.classOptions instanceof Array && me.props.classOptions.length > 0;
    var hasAdvance = me.props.advancedOptions instanceof Array && me.props.advancedOptions.length > 0;
    var options = {
      ref: 'el',
      className: (0, _classnames7["default"])({
        'has-class': hasClass,
        'has-advance': hasAdvance,
        'kuma-uxform-main-search': true
      }),
      dropdownClassName: (0, _classnames7["default"])('kuma-uxform-main-search-dropdown', _defineProperty({}, me.props.dropdownClassName, !!me.props.dropdownClassName)),
      optionFilterProp: me.props.optionFilterProp,
      dropdownMatchSelectWidth: false,
      combobox: me.props.combobox,
      onChange: me.handleChange.bind(me),
      onSearch: me.handleSearch.bind(me),
      key: 'search',
      size: this._getFieldSize()
    };

    selectOptions.forEach(function (item) {
      if (item in me.props) {
        options[item] = me.props[item];
      }
    });

    if (Object.keys(me.props.jsxdata).length > 0) {
      options.optionFilterProp = 'title';
    }

    // only jsxfetchUrl mode need pass label, for the options always change.
    // when mounted, state.label is undefined, which cause defalutValue cannot be used.
    if (!!me.props.jsxfetchUrl && !!me.state.label && me.state.label.length !== 0) {
      options.label = me.state.label || [];
    }

    if (!me.props.combobox || me.state.fromReset) {
      options.value = me.state.value.main || [];
    }

    if (me.props.jsxfetchUrl) {
      options.filterOption = false;
    }
    if (!me.props.tidy && hasClass) {
      arr.push(me.renderClassOptions());
    }
    arr.push(_react2["default"].createElement(
      _uxcoreSelect2["default"],
      options,
      me._generateOptionsFromData()
    ));

    if (!me.props.tidy && hasAdvance) {
      arr.push(me.renderAdvancedOptions());
    }
    arr.push(_react2["default"].createElement(
      'span',
      {
        className: (0, _classnames7["default"])({
          'kuma-search-uxform-field-icon': true,
          'tidy-pattern': me.props.tidy
        }),
        key: 'icon',
        onClick: me.handleIconClick
      },
      _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: 'sousuo' })
    ));
    return arr;
  };

  SearchFormField.prototype.renderClassOptions = function renderClassOptions() {
    var me = this;

    var _me$props$classConfig = me.props.classConfig,
        className = _me$props$classConfig.className,
        dropdownClassName = _me$props$classConfig.dropdownClassName,
        otherOptions = _objectWithoutProperties(_me$props$classConfig, ['className', 'dropdownClassName']);

    var options = (0, _objectAssign2["default"])({}, {
      showSearch: false,
      key: 'class',
      dropdownAlign: {
        offset: [0, 0]
      },
      dropdownClassName: (0, _classnames7["default"])(_defineProperty({
        'kuma-uxform-class-dropdown': true
      }, dropdownClassName, !!dropdownClassName)),
      className: (0, _classnames7["default"])(_defineProperty({
        'kuma-uxform-class-search': true
      }, className, !!className)),
      transitionName: '',
      size: this._getFieldSize()
    }, otherOptions, {
      onChange: me.handleClassChange.bind(me)
    });
    return _react2["default"].createElement(
      _uxcoreSelect2["default"],
      options,
      me.processClassOptions()
    );
  };

  SearchFormField.prototype.renderAdvancedOptions = function renderAdvancedOptions() {
    var me = this;

    var _me$props$advancedCon = me.props.advancedConfig,
        className = _me$props$advancedCon.className,
        dropdownClassName = _me$props$advancedCon.dropdownClassName,
        otherOptions = _objectWithoutProperties(_me$props$advancedCon, ['className', 'dropdownClassName']);

    var options = (0, _objectAssign2["default"])({}, {
      showSearch: false,
      key: 'advanced',
      className: (0, _classnames7["default"])(_defineProperty({
        'kuma-uxform-advanced-search': true
      }, className, !!className)),
      dropdownClassName: (0, _classnames7["default"])(_defineProperty({
        'kuma-uxform-advanced-dropdown': true
      }, dropdownClassName, !!dropdownClassName)),
      dropdownAlign: {
        offset: [0, 0]
      },
      transitionName: '',
      size: this._getFieldSize()
    }, otherOptions, {
      onChange: me.handleAdvancedChange.bind(me)
    });
    return _react2["default"].createElement(
      _uxcoreSelect2["default"],
      options,
      me._processAdvanced()
    );
  };

  return SearchFormField;
}(_uxcoreSelectFormField2["default"]);

SearchFormField.Option = Option;
SearchFormField.displayName = 'SearchFormField';
SearchFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreSelectFormField2["default"].propTypes, {
  advancedOptions: _propTypes2["default"].array,
  advancedConfig: _propTypes2["default"].object,
  classOptions: _propTypes2["default"].array,
  classConfig: _propTypes2["default"].object,
  tidy: _propTypes2["default"].bool,
  onIconClick: _propTypes2["default"].func
});
SearchFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreSelectFormField2["default"].defaultProps, {
  jsxshowLabel: false,
  combobox: true,
  showSearch: false,
  advancedConfig: {},
  classConfig: {},
  tidy: false,
  onIconClick: function onIconClick() {}
});

exports["default"] = SearchFormField;
module.exports = exports['default'];