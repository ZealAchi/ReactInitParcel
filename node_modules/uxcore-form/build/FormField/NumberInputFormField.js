'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uxcoreInputFormField = require('uxcore-input-form-field');

var _uxcoreInputFormField2 = _interopRequireDefault(_uxcoreInputFormField);

var _uxcoreFormatter = require('uxcore-formatter');

var _uxcoreFormatter2 = _interopRequireDefault(_uxcoreFormatter);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var trim = function trim(str) {
  return str.replace(/(^\s+|\s+$)/g, '');
};

var NumberInputFormField = function (_InputFormField) {
  _inherits(NumberInputFormField, _InputFormField);

  function NumberInputFormField() {
    _classCallCheck(this, NumberInputFormField);

    return _possibleConstructorReturn(this, _InputFormField.apply(this, arguments));
  }

  NumberInputFormField.prototype.handleChange = function handleChange(e) {
    var me = this;
    var autoTrim = me.props.autoTrim;

    var value = e.currentTarget.value;
    value = value.replace(/[^\d.-]/g, '');

    if (autoTrim) {
      me.clearTimer();
      me.timer = setTimeout(function () {
        value = trim(value);
        me.handleDataChange(me.deFormatValue(me.formatValue(me.deFormatValue(value))));
      }, 500);
    }
    me.handleDataChange(me.deFormatValue(me.formatValue(me.deFormatValue(value))));
  };

  NumberInputFormField.prototype.handleBlur = function handleBlur(e) {
    _InputFormField.prototype.handleBlur.call(this, e);
    var formatOnBlur = this.props.formatOnBlur;

    if (formatOnBlur) {
      var value = e.currentTarget.value;
      var formatedVale = this.deFormatValue(this.formatValueOnBlur(this.deFormatValue(value)));
      this.handleDataChange(formatedVale);
    }
  };

  NumberInputFormField.prototype.formatValueOnBlur = function formatValueOnBlur(value) {
    if (value === undefined || value === null || value === '') return '';
    var me = this;
    var newValue = '' + value;
    if (me.props.jsxtype === 'money') {
      return _uxcoreFormatter2["default"].money(newValue, me.props.delimiter, me.props.fixedNum);
    }if (me.props.jsxtype === 'cnmobile') {
      return _uxcoreFormatter2["default"].cnmobile(newValue, me.props.delimiter);
    }if (me.props.jsxtype === 'card') {
      return _uxcoreFormatter2["default"].card(newValue, me.props.delimiter);
    }
    return newValue;
  };

  NumberInputFormField.prototype.formatValue = function formatValue(value) {
    if (value === undefined || value === null || value === '') return '';
    var me = this;
    var newValue = '' + value;
    if (me.props.jsxtype === 'money') {
      if (newValue.match(/\.(\d+)/) && newValue.match(/\.(\d+)/)[1].length > me.props.fixedNum) {
        return _uxcoreFormatter2["default"].money(newValue, me.props.delimiter, me.props.fixedNum);
      }
      return _uxcoreFormatter2["default"].money(newValue, me.props.delimiter);
    }if (me.props.jsxtype === 'cnmobile') {
      return _uxcoreFormatter2["default"].cnmobile(newValue, me.props.delimiter);
    }if (me.props.jsxtype === 'card') {
      return _uxcoreFormatter2["default"].card(newValue, me.props.delimiter);
    }
    return newValue;
  };

  NumberInputFormField.prototype.deFormatValue = function deFormatValue(value) {
    var _props = this.props,
        jsxtype = _props.jsxtype,
        delimiter = _props.delimiter;

    if (jsxtype === 'money' || jsxtype === 'cnmobile' || jsxtype === 'card') {
      value = value.replace(jsxtype !== 'money' ? /[^\d+]/gi : /[^(\d+|\.+)]/gi, delimiter);
      return value.split(delimiter).join('');
    }
    return value;
  };

  /* eslint-disable class-methods-use-this */


  NumberInputFormField.prototype.addSpecificClass = function addSpecificClass() {
    return 'kuma-number-input-uxform-field';
  };
  /* eslint-disable class-methods-use-this */


  return NumberInputFormField;
}(_uxcoreInputFormField2["default"]);

NumberInputFormField.displayName = 'NumberInputFormField';
NumberInputFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreInputFormField2["default"].propTypes, {
  jsxtype: _propTypes2["default"].string,
  delimiter: _propTypes2["default"].string,
  fixedNum: _propTypes2["default"].number,
  formatOnBlur: _propTypes2["default"].bool
});
NumberInputFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreInputFormField2["default"].defaultProps, {
  jsxtype: '',
  delimiter: ' ',
  formatOnBlur: false
});

exports["default"] = NumberInputFormField;
module.exports = exports['default'];