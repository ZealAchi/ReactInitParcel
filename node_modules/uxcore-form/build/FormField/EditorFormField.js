'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreTinymce = require('uxcore-tinymce');

var _uxcoreTinymce2 = _interopRequireDefault(_uxcoreTinymce);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreRichText = require('uxcore-rich-text');

var _uxcoreRichText2 = _interopRequireDefault(_uxcoreRichText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var EditorFormField = function (_FormField) {
  _inherits(EditorFormField, _FormField);

  function EditorFormField(props) {
    _classCallCheck(this, EditorFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleKeyup = _this.handleKeyup.bind(_this);
    return _this;
  }

  EditorFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState, snapshot) {
    _FormField.prototype.componentDidUpdate.call(this, prevProps, prevState, snapshot);
    var me = this;
    var prevMode = prevProps.jsxmode || prevProps.mode;
    var mode = me.props.jsxmode || me.props.mode;
    if (prevMode === _uxcoreConst2["default"].MODE.VIEW && mode === _uxcoreConst2["default"].MODE.EDIT) {
      me.tinymce.resetValue(me.state.value === undefined || me.state.value === null ? '' : me.state.value);
    }
  };

  EditorFormField.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  EditorFormField.prototype.handleChange = function handleChange(e, editor) {
    var me = this;
    me.handleDataChange(editor.getContent());
  };

  EditorFormField.prototype.handleKeyup = function handleKeyup(e, editor) {
    var me = this;
    me.handleDataChange(editor.getContent());
  };

  EditorFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-editor-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  EditorFormField.prototype.setContent = function setContent(content) {
    this.tinymce.resetValue(content);
  };

  EditorFormField.prototype.renderField = function renderField() {
    var me = this;
    var mode = me.props.jsxmode || me.props.mode;
    if (me.state.fromReset && mode === _uxcoreConst2["default"].MODE.EDIT && me.tinymce) {
      me.tinymce.resetValue(me.state.value || me.props.jsxcontent);
    }
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      return _react2["default"].createElement(_uxcoreTinymce2["default"], {
        ref: me.saveRef('tinymce'),
        placeholder: me.props.placeholder,
        config: me.props.jsxconfig,
        content: me.state.value || '',
        onChange: me.handleChange,
        onKeyup: me.handleKeyup
      });
    }
    // return <span key="text" dangerouslySetInnerHTML={{ __html: me.state.value }} />;
    return _react2["default"].createElement(_uxcoreRichText2["default"], { content: me.state.value });
  };

  return EditorFormField;
}(_uxcoreFormField2["default"]);

EditorFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes);
EditorFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  jsxconfig: {},
  jsxcontent: ''
});
EditorFormField.displayName = 'EditorFormField';

exports["default"] = EditorFormField;
module.exports = exports['default'];