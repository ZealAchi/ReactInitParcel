'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _uxcoreCheckboxGroup = require('uxcore-checkbox-group');

var _uxcoreCheckboxGroup2 = _interopRequireDefault(_uxcoreCheckboxGroup);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Item = _uxcoreCheckboxGroup2["default"].Item;

var CheckboxGroupFormField = function (_FormField) {
  _inherits(CheckboxGroupFormField, _FormField);

  function CheckboxGroupFormField(props) {
    _classCallCheck(this, CheckboxGroupFormField);

    var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    return _this;
  }

  CheckboxGroupFormField.prototype.handleChange = function handleChange(value) {
    var me = this;
    me.handleDataChange(value);
  };

  CheckboxGroupFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-checkbox-group-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  CheckboxGroupFormField.prototype.renderField = function renderField() {
    var me = this;
    var mode = me.props.jsxmode || me.props.mode;
    var splitter = ', \xA0';
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      return _react2["default"].createElement(
        _uxcoreCheckboxGroup2["default"],
        {
          disabled: !!me.props.jsxdisabled,
          onChange: me.handleChange,
          value: me.state.value || []
        },
        me.props.children
      );
    } else if (me.state.value instanceof Array) {
      var children = me.props.children instanceof Array ? me.props.children : [me.props.children];
      var textArr = children.filter(function (child) {
        return me.state.value.indexOf(child.props.value) !== -1;
      }).map(function (item) {
        return item.props.text;
      });
      if (textArr.length === 0) {
        textArr = me.state.value;
      }
      return _react2["default"].createElement(
        'span',
        null,
        textArr.join(splitter) || me.props.viewModePlaceholder || '--'
      );
    }
    return null;
  };

  return CheckboxGroupFormField;
}(_uxcoreFormField2["default"]);

CheckboxGroupFormField.Item = Item;
CheckboxGroupFormField.propTypes = _uxcoreFormField2["default"].propTypes;
CheckboxGroupFormField.defaultProps = _uxcoreFormField2["default"].defaultProps;
CheckboxGroupFormField.displayName = 'CheckboxGroupFormField';

exports["default"] = CheckboxGroupFormField;
module.exports = exports['default'];