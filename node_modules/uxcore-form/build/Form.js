'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreFormRow = require('uxcore-form-row');

var _uxcoreFormRow2 = _interopRequireDefault(_uxcoreFormRow);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _lie = require('lie');

var _lie2 = _interopRequireDefault(_lie);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Validators = require('./Validators');

var _Validators2 = _interopRequireDefault(_Validators);

var _KeyCode = require('./KeyCode');

var _KeyCode2 = _interopRequireDefault(_KeyCode);

var _FormRowTitle = require('./FormRowTitle');

var _FormRowTitle2 = _interopRequireDefault(_FormRowTitle);

var _FormCard = require('./FormCard');

var _FormCard2 = _interopRequireDefault(_FormCard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Form Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2014-2015, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.fields = {};
    _this.errors = {};
    _this.data = {};
    _this.state = {};
    _this.attachFormField = _this.attachFormField.bind(_this);
    _this.detachFormField = _this.detachFormField.bind(_this);
    _this.handleDataChange = _this.handleDataChange.bind(_this);
    _this.getValues = _this.getValues.bind(_this);
    _this.resetValues = _this.resetValues.bind(_this);
    return _this;
  }

  Form.prototype.getValues = function getValues(force) {
    var me = this;
    var asyncValidate = me.props.asyncValidate;

    if (!asyncValidate) {
      var flag = me.doValidate(force);
      return {
        values: (0, _cloneDeep2["default"])(me.data),
        pass: flag
      };
    }
    return new _lie2["default"](function (resolve) {
      me.doValidate(force).then(function (pass) {
        resolve({
          values: (0, _cloneDeep2["default"])(me.data),
          pass: pass
        });
      });
    });
  };

  /*
   * set Form values manually
   */

  Form.prototype.setValues = function setValues(data) {
    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return;
    var me = this;
    var savedData = me.data;
    var keys = Object.keys(data);
    for (var i = 0; i < keys.length; i++) {
      if (!(0, _deepEqual2["default"])(data[keys[i]], savedData[keys[i]])) {
        // see resetValues() to get the param meaning.
        if (me.fields[keys[i]]) {
          me.fields[keys[i]].handleDataChange(data[keys[i]] === undefined ? null : data[keys[i]], true, true);
        }
      }
    }
  };

  Form.prototype.resetValues = function resetValues() {
    var me = this;
    var keys = Object.keys(me.fields);
    var data = me.props.jsxvalues || me.props.passedData || {};
    for (var i = 0; i < keys.length; i++) {
      // see uxcore-form-field for details
      // the first true means fromReset and don't do validate
      // the second true means slience and don't trigger form onChange
      if (me.fields[keys[i]]) {
        me.fields[keys[i]].handleDataChange(data[keys[i]] === undefined ? null : data[keys[i]], true, true);
      }
    }
  };

  Form.prototype.handleDataChange = function handleDataChange(field, fieldData, silence) {
    var me = this;
    me.data[field.props.jsxname] = fieldData.value;
    if (!silence) {
      me.props.jsxonChange((0, _cloneDeep2["default"])(me.data), field.props.jsxname, fieldData.pass);
    }
  };

  Form.prototype.attachFormField = function attachFormField(field) {
    var name = field.getName();
    if (!name) {
      console.warn('Each field needs a name to identify itself');
    } else {
      this.fields[name] = field;
    }
  };

  Form.prototype.detachFormField = function detachFormField(field) {
    var name = field.getName();
    delete this.fields[name];
    delete this.data[name];
  };

  Form.prototype.doValidate = function doValidate(force, always) {
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    var me = this;
    var pass = true;
    var keys = Object.keys(me.fields);
    var asyncValidate = me.props.asyncValidate;

    var errorArray = [];
    if (!asyncValidate) {
      for (var i = 0; i < keys.length; i++) {
        if (me.fields[keys[i]].getProps().jsxshow) {
          var itemPass = me.fields[keys[i]].doValidate(force, always);
          me.errors[keys[i]] = !itemPass;
          errorArray.push({ key: keys[i], error: !itemPass });
          if (!itemPass) {
            pass = false;
          }
        }
      }
      if (!pass) {
        onError(errorArray);
      }
      return pass;
    }
    return new _lie2["default"](function (resolve) {
      var promises = [];
      for (var _i = 0; _i < keys.length; _i++) {
        if (me.fields[keys[_i]].getProps().jsxshow) {
          promises.push(me.fields[keys[_i]].doValidate(force, always));
        }
      }
      _lie2["default"].all(promises).then(function (result) {
        keys.forEach(function (key, index) {
          me.errors[key] = result[index];
          errorArray.push({ key: key, error: result[index] });
        });
        var failItems = result.filter(function (item) {
          return item === false;
        });
        if (failItems.length) {
          pass = false;
        }
        if (!pass) {
          onError(errorArray);
        }
        resolve(pass);
      });
    });
  };

  Form.prototype.doValidateAndScroll = function doValidateAndScroll(force, always) {
    var _this2 = this;

    return this.doValidate(force, always, function (errorArray) {
      var firstErrorItem = void 0;
      for (var i = 0; i < errorArray.length; i += 1) {
        var item = errorArray[i];
        if (item.error) {
          firstErrorItem = item.key;
          break;
        }
      }
      if (firstErrorItem && _this2.fields[firstErrorItem]) {
        var errorField = _this2.fields[firstErrorItem];
        var errorFieldNode = errorField.getDom();
        console.log(errorFieldNode);
        // https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView
        // compatible ability is over IE8.
        errorFieldNode.scrollIntoView();
      }
    });
  };

  Form.prototype.isDirty = function isDirty() {
    var me = this;
    var asyncValidate = me.props.asyncValidate;

    if (!asyncValidate) {
      return !me.doValidate();
    }
    return new _lie2["default"](function (resolve) {
      me.doValidate().then(function (pass) {
        resolve(!pass);
      });
    });
  };

  /*
   * 统一数据流，所有的 props，通过 Form -> FormRow -> FormField 向下传递，如果有的
   * 子元素是 FormField，则自动在他的外面包一层 FormRow。
   * @param {React Elements Array} children this.props.children
   */

  Form.prototype.processChild = function processChild() {
    var children = this.props.children;

    var length = _react2["default"].Children.count(children);
    var elements = [];
    if (length === 0) {
      console.warn('FORM: You must pass children to the form component');
      return false;
    }

    _react2["default"].Children.forEach(children, function (child) {
      // 如果是自己添加的 DOM 直接抛弃
      if (child && typeof child.type === 'function') {
        var displayName = child.type.displayName;

        if (displayName === 'EngineNode') {
          displayName = child.props._componentName;
        }
        if (/FormField/.test(displayName)) {
          elements.push(_react2["default"].createElement(
            _uxcoreFormRow2["default"],
            null,
            child
          ));
        } else if (/FormRow/.test(displayName) || /FormCard/.test(displayName)) {
          elements.push(child);
        }
      }
    });

    return elements;
  };

  Form.prototype.render = function render() {
    var _classnames;

    var me = this;
    var elements = me.processChild();

    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {}, _defineProperty(_classnames, me.props.prefixCls, true), _defineProperty(_classnames, me.props.className, !!me.props.className), _defineProperty(_classnames, 'kuma-uxform-edit-mode', me.props.jsxmode === _uxcoreConst2["default"].MODE.EDIT), _defineProperty(_classnames, 'kuma-uxform-view-mode', me.props.jsxmode === _uxcoreConst2["default"].MODE.VIEW), _classnames))
      },
      !!elements && elements.map(function (child, index) {
        return _react2["default"].cloneElement(child, {
          mode: me.props.jsxmode,
          instantValidate: me.props.instantValidate,
          asyncValidate: me.props.asyncValidate,
          verticalAlign: me.props.verticalAlign,
          autoAdjustSpacing: me.props.autoAdjustSpacing,
          size: me.props.size,
          data: (0, _cloneDeep2["default"])(me.props.jsxvalues || me.props.passedData || {}),
          key: child.key || index,
          attachFormField: me.attachFormField,
          detachFormField: me.detachFormField,
          handleDataChange: me.handleDataChange,
          getValues: me.getValues,
          resetValues: me.resetValues,
          formPrefixCls: me.props.prefixCls
        });
      })
    );
  };

  return Form;
}(_react2["default"].Component);

// 以 Form 的插件的形式给出


Form.FormRow = _uxcoreFormRow2["default"];
Form.FormRowTitle = _FormRowTitle2["default"];
Form.FormCard = _FormCard2["default"];

// Form.MentionFormField = MentionFormField;
Form.Constants = _uxcoreConst2["default"];
Form.Validators = _Validators2["default"];
Form.KeyCode = _KeyCode2["default"];

Form.defaultProps = {
  prefixCls: 'kuma-uxform',
  jsxmode: _uxcoreConst2["default"].MODE.EDIT,
  instantValidate: true,
  asyncValidate: false,
  jsxonChange: function jsxonChange() {},
  autoAdjustSpacing: false,
  className: '',
  children: undefined,
  jsxvalues: undefined
};

// http://facebook.github.io/react/docs/reusable-components.html
Form.propTypes = {
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  jsxmode: _propTypes2["default"].string,
  jsxvalues: _propTypes2["default"].object,
  asyncValidate: _propTypes2["default"].bool,
  instantValidate: _propTypes2["default"].bool,
  jsxonChange: _propTypes2["default"].func,
  children: _propTypes2["default"].node,
  autoAdjustSpacing: _propTypes2["default"].bool
};

Form.displayName = 'Form';

exports["default"] = Form;
module.exports = exports['default'];