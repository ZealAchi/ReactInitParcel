'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _autosize = require('autosize');

var _autosize2 = _interopRequireDefault(_autosize);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _uxcoreUtils = require('uxcore-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * TextareaFormField Component for uxcore
                                                                                                                                                                                                                   * @author eternalsky
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                   * All rights reserved.
                                                                                                                                                                                                                   */

var trim = function trim(str) {
  return str.replace(/(^\s+|\s+$)/g, '');
};

var FormCount = function FormCount(props) {
  var _classnames2;

  return _react2["default"].createElement(
    'div',
    {
      className: (0, _classnames4["default"])('kuma-uxform-textarea-count', _defineProperty({}, props.prefixCls + '-has-error', parseInt(props.length, 10) > parseInt(props.total, 10)))
    },
    _react2["default"].createElement(
      'span',
      {
        className: (0, _classnames4["default"])((_classnames2 = {}, _defineProperty(_classnames2, props.prefixCls + '-actual', true), _defineProperty(_classnames2, props.prefixCls + '-overflow', parseInt(props.length, 10) > parseInt(props.total, 10)), _classnames2))
      },
      props.length
    ),
    _react2["default"].createElement(
      'span',
      { className: props.prefixCls + '-slash' },
      '/'
    ),
    _react2["default"].createElement(
      'span',
      { className: props.prefixCls + '-max' },
      props.total
    )
  );
};

FormCount.displayName = 'FormCount';
FormCount.propTypes = {
  prefixCls: _propTypes2["default"].string,
  length: _propTypes2["default"].number,
  total: _propTypes2["default"].number
};

FormCount.defaultProps = {
  prefixCls: 'kuma-uxform-count'
};

var TextAreaFormField = function (_FormField) {
  _inherits(TextAreaFormField, _FormField);

  function TextAreaFormField() {
    _classCallCheck(this, TextAreaFormField);

    return _possibleConstructorReturn(this, _FormField.apply(this, arguments));
  }

  TextAreaFormField.prototype.componentDidMount = function componentDidMount() {
    _FormField.prototype.componentDidMount.call(this);
    if (this.props.autosize) {
      (0, _autosize2["default"])(this.root);
    }
  };

  TextAreaFormField.prototype.componentWillUnmount = function componentWillUnmount() {
    var me = this;
    if (!me.props.standalone) {
      this.props.detachFormField(this);
    }
    if (me.props.autosize) {
      _autosize2["default"].destroy(me.root);
    }
  };

  TextAreaFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    _FormField.prototype.componentDidUpdate.call(this, prevProps, prevState);
    var me = this;
    var mode = me.props.jsxmode || me.props.mode;
    var prevMode = prevProps.jsxmode || prevProps.mode;
    if (me.props.autosize) {
      if (prevProps.value !== me.props.value || prevState.value !== me.state.value) {
        _autosize2["default"].update(me.root);
      }
      if (prevMode === _uxcoreConst2["default"].MODE.VIEW && mode === _uxcoreConst2["default"].MODE.EDIT) {
        (0, _autosize2["default"])(me.root);
      } else if (prevMode === _uxcoreConst2["default"].MODE.EDIT && mode === _uxcoreConst2["default"].MODE.VIEW) {
        _autosize2["default"].destroy(me.root);
      }
    }
  };

  TextAreaFormField.prototype.saveRef = function saveRef(refName) {
    var me = this;
    return function (c) {
      me[refName] = c;
    };
  };

  TextAreaFormField.prototype.handleChange = function handleChange(e) {
    var me = this;
    var autoTrim = me.props.autoTrim;

    var value = e.currentTarget.value;
    if (autoTrim) {
      value = trim(value);
    }
    me.handleDataChange(value);
  };

  TextAreaFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;
    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-textarea-uxform-field';
    }
    return me.props.jsxprefixCls;
  };

  TextAreaFormField.prototype.handleFocus = function handleFocus(e) {
    this.props.onFocus(e);
  };

  TextAreaFormField.prototype.handleBlur = function handleBlur(e) {
    var me = this;
    var pass = true;
    if (me.props.validateOnBlur) {
      pass = me.doValidate();
    }
    me.props.onBlur(e, pass);
  };

  TextAreaFormField.prototype.handleKeyDown = function handleKeyDown(e) {
    var me = this;
    me.props.onKeyDown(e);
  };

  TextAreaFormField.prototype.getCount = function getCount() {
    var me = this;
    var children = me.props.children;
    var element = void 0;
    _react2["default"].Children.map(children, function (child) {
      if (child && typeof child.type === 'function' && child.type.displayName === 'FormCount') {
        element = child;
      }
    });
    if (element) {
      var mixed = element.props.mixed;
      var value = me.state.value;
      var len = value ? TextAreaFormField.getStringLen(value, mixed) : 0;
      return _react2["default"].cloneElement(element, {
        length: len,
        key: 'count'
      });
    }
    return null;
  };

  TextAreaFormField.getStringLen = function getStringLen(string, mixed) {
    var len = string.length;
    if (!mixed) {
      return len;
    }
    var reLen = 0;
    for (var i = 0; i < len; i++) {
      reLen += string.charCodeAt(i) <= 128 ? 1 : 2;
    }
    return Math.ceil(reLen / 2);
  };

  TextAreaFormField.prototype.renderField = function renderField() {
    var me = this;
    var mode = me.props.jsxmode || me.props.mode;
    var count = me.getCount();
    var IEver = (0, _uxcoreUtils.getIEVer)();
    var placeholder = IEver >= 10 && me.props.IECompatible ? '' : me.props.jsxplaceholder;
    var maxHeight = me.props.maxHeight;
    var style = maxHeight ? {
      maxHeight: maxHeight
    } : null;
    var rest = {};
    if (me.props.maxLength) {
      rest.maxLength = me.props.maxLength;
    }
    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      return _react2["default"].createElement(
        'div',
        {
          className: (0, _classnames4["default"])({
            'has-count': !!count
          })
        },
        _react2["default"].createElement('textarea', _extends({}, rest, {
          disabled: me.props.jsxdisabled,
          placeholder: placeholder,
          className: 'kuma-textarea',
          style: style,
          ref: me.saveRef('root'),
          value: me.state.value || '',
          onChange: me.handleChange.bind(me),
          onFocus: me.handleFocus.bind(me),
          onBlur: me.handleBlur.bind(me),
          onKeyDown: me.handleKeyDown.bind(me),
          autoComplete: me.props.autoComplete ? 'on' : 'off'
        })),
        count
      );
    }
    return _react2["default"].createElement(
      'span',
      {
        style: {
          whiteSpace: 'pre-wrap',
          overflowWrap: 'break-word'
        },
        className: 'view-mode'
      },
      me.state.value || '--'
    );
  };

  return TextAreaFormField;
}(_uxcoreFormField2["default"]);

TextAreaFormField.displayName = 'TextAreaFormField';
TextAreaFormField.TextAreaCount = FormCount;

TextAreaFormField.propTypes = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].propTypes, {
  onBlur: _propTypes2["default"].func,
  onFocus: _propTypes2["default"].func,
  onKeyDown: _propTypes2["default"].func,
  validateOnBlur: _propTypes2["default"].bool,
  autoTrim: _propTypes2["default"].bool,
  autosize: _propTypes2["default"].bool,
  IECompatible: _propTypes2["default"].bool,
  autoComplete: _propTypes2["default"].bool,
  maxHeight: _propTypes2["default"].string,
  maxLength: _propTypes2["default"].number
});

TextAreaFormField.defaultProps = (0, _objectAssign2["default"])({}, _uxcoreFormField2["default"].defaultProps, {
  onBlur: function onBlur() {},
  onFocus: function onFocus() {},
  onKeyDown: function onKeyDown() {},
  validateOnBlur: false,
  autosize: true,
  IECompatible: true,
  autoComplete: true,
  maxHeight: ''
});

exports["default"] = TextAreaFormField;
module.exports = exports['default'];