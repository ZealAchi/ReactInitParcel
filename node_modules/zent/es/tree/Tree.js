import { __assign, __extends, __spreadArrays } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classnames from 'classnames';
import AnimateHeight from '../utils/component/AnimateHeight';
import Checkbox from '../checkbox';
import Loading from './components/Loading';
import createStateByProps from './utils/createStateByProps';
import correctMark from './utils/correctMark';
import correctExpand from './utils/correctExpand';
var Tree = (function (_super) {
    __extends(Tree, _super);
    function Tree(props) {
        var _this = _super.call(this, props) || this;
        _this.state = __assign({ prevProps: props, loadingNode: [] }, createStateByProps(props));
        return _this;
    }
    Tree.getDerivedStateFromProps = function (nextProps, state) {
        var prevProps = state.prevProps;
        if (nextProps === prevProps) {
            return null;
        }
        if (nextProps.data !== prevProps.data ||
            nextProps.renderKey !== prevProps.renderKey ||
            nextProps.expandAll !== prevProps.expandAll ||
            nextProps.loadMore !== prevProps.loadMore) {
            var formatData = createStateByProps(nextProps);
            var expandNode = formatData.expandNode;
            expandNode = correctExpand(state, formatData);
            return __assign(__assign({ prevProps: nextProps }, formatData), { expandNode: expandNode });
        }
        if (nextProps.checkable) {
            var newState = {};
            if (prevProps.disabledCheckedKeys !== nextProps.disabledCheckedKeys) {
                newState.disabledNode = correctMark(nextProps.disabledCheckedKeys, state.rootInfoMap);
            }
            if (prevProps.checkedKeys !== nextProps.checkedKeys) {
                newState.checkedNode = correctMark(nextProps.checkedKeys, state.rootInfoMap, newState.disabledNode || state.disabledNode);
                newState.checkedNode = newState.checkedNode.filter(function (id) {
                    return (state.disabledNode.indexOf(id) === -1 ||
                        state.checkedNode.indexOf(id) > -1);
                });
            }
            return __assign(__assign({}, newState), { prevProps: nextProps });
        }
        return {
            prevProps: nextProps,
        };
    };
    Tree.prototype.handleExpandClick = function (root, e) {
        var _this = this;
        var id = this.state.renderKey.id;
        var _a = this.props, loadMore = _a.loadMore, foldable = _a.foldable;
        if (!foldable) {
            return;
        }
        var loadingNode = this.state.loadingNode;
        var isSwitcher = e.currentTarget.classList[0] === 'switcher';
        if (loadMore) {
            if (!root.children || root.children.length === 0) {
                e.persist();
                var nextLoadingNode_1 = loadingNode.concat(root[id]);
                this.setState({ loadingNode: nextLoadingNode_1 });
                loadMore(root)
                    .then(function () {
                    _this.setState({
                        loadingNode: nextLoadingNode_1.filter(function (x) { return x !== root[id]; }),
                    });
                    _this.handleExpand(root, isSwitcher);
                })
                    .catch(function () {
                    _this.setState({
                        loadingNode: nextLoadingNode_1.filter(function (x) { return x !== root[id]; }),
                    });
                });
                return;
            }
        }
        this.handleExpand(root, isSwitcher);
    };
    Tree.prototype.handleExpand = function (root, isSwitcher) {
        var _a = this.props, onExpand = _a.onExpand, autoExpandOnSelect = _a.autoExpandOnSelect;
        var expandNode = this.state.expandNode;
        if (!isSwitcher && !autoExpandOnSelect) {
            return;
        }
        var id = this.state.renderKey.id;
        var activeId = root[id];
        var newExpandNode = expandNode.slice();
        var isClose = true;
        if (expandNode.indexOf(activeId) > -1) {
            newExpandNode = expandNode.filter(function (expandId) { return expandId !== activeId; });
        }
        else {
            isClose = false;
            newExpandNode.push(activeId);
        }
        this.setState({
            expandNode: newExpandNode,
        });
        if (onExpand) {
            onExpand(root, {
                isExpanded: !isClose,
            });
        }
    };
    Tree.prototype.handleCheckboxClick = function (root) {
        var onCheck = this.props.onCheck;
        var _a = this.state, checkedNode = _a.checkedNode, disabledNode = _a.disabledNode, rootInfoMap = _a.rootInfoMap, renderKey = _a.renderKey;
        var rootId = root[renderKey.id];
        if (checkedNode.indexOf(rootId) > -1) {
            checkedNode = checkedNode.filter(function (id) {
                if (id === rootId) {
                    return false;
                }
                if (disabledNode.indexOf(id) > -1) {
                    return true;
                }
                if (rootInfoMap[id].includes.indexOf(rootId) > -1) {
                    return false;
                }
                if (rootInfoMap[rootId].includes.indexOf(id) > -1) {
                    return false;
                }
                return true;
            });
        }
        else {
            checkedNode = correctMark(__spreadArrays([rootId], checkedNode), rootInfoMap, disabledNode);
        }
        var helperInfo = {
            currentRoot: root,
            disabled: disabledNode.map(function (id) { return rootInfoMap[id].root; }),
            all: [],
            top: [],
            bottom: [],
        };
        checkedNode.forEach(function (id) {
            helperInfo.all.push(rootInfoMap[id].root);
            if (!rootInfoMap[id].parentId ||
                checkedNode.indexOf(rootInfoMap[rootInfoMap[id].parentId].id) === -1) {
                helperInfo.top.push(rootInfoMap[id].root);
            }
            if (rootInfoMap[id].includes.length === 1 ||
                rootInfoMap[id].includes.every(function (child) { return checkedNode.indexOf(child) === -1; })) {
                helperInfo.bottom.push(rootInfoMap[id].root);
            }
        });
        onCheck && onCheck(checkedNode, helperInfo);
    };
    Tree.prototype.renderSwitcher = function (root) {
        var _this = this;
        return (React.createElement("i", { className: "switcher", onClick: function (e) {
                _this.handleExpandClick(root, e);
            }, "data-zv": '7.4.3' }));
    };
    Tree.prototype.renderContent = function (root, isExpanded) {
        var _this = this;
        var _a = this.state, rootInfoMap = _a.rootInfoMap, _b = _a.renderKey, id = _b.id, title = _b.title;
        var _c = this.props, render = _c.render, onSelect = _c.onSelect;
        return (React.createElement("span", { className: "content", onClick: function (e) {
                onSelect && onSelect(root, e.currentTarget);
                if (rootInfoMap[root[id]].isParent) {
                    _this.handleExpandClick(root, e);
                }
            }, "data-zv": '7.4.3' }, render ? render(root, isExpanded) : root[title]));
    };
    Tree.prototype.renderCheckbox = function (root) {
        var checkable = this.props.checkable;
        var _a = this.state, checkedNode = _a.checkedNode, disabledNode = _a.disabledNode, rootInfoMap = _a.rootInfoMap, renderKey = _a.renderKey;
        if (!checkable) {
            return null;
        }
        var rootId = root[renderKey.id];
        var checked = checkedNode.indexOf(rootId) > -1;
        var countChild = rootInfoMap[rootId].includes.filter(function (id) { return disabledNode.indexOf(id) === -1; });
        var halfChecked = !!(!checked &&
            countChild.length &&
            countChild.some(function (id) { return checkedNode.indexOf(id) > -1; }));
        return (React.createElement(Checkbox, { onChange: this.handleCheckboxClick.bind(this, root), checked: checked, disabled: disabledNode.indexOf(rootId) > -1, indeterminate: halfChecked, width: root[renderKey.title] }));
    };
    Tree.prototype.renderOperations = function (root, isExpanded) {
        var id = this.state.renderKey.id;
        var opts = this.props.operations;
        if (opts) {
            var optNodes = opts.map(function (opt) {
                var shouldRender = opt.shouldRender || (function () { return true; });
                return (shouldRender(root) && (React.createElement("span", { key: opt.name + "-" + root[id], onClick: opt.action.bind(null, root, isExpanded), className: "opt", "data-zv": '7.4.3' },
                    typeof opt.icon === 'string' ? (React.createElement("i", { className: opt.icon, "data-zv": '7.4.3' })) : (opt.icon),
                    ' ',
                    opt.name)));
            });
            return React.createElement("div", { className: "operation", "data-zv": '7.4.3' }, optNodes);
        }
        return null;
    };
    Tree.prototype.renderTreeNodes = function (roots) {
        var _this = this;
        var _a = this.state, expandNode = _a.expandNode, loadingNode = _a.loadingNode, rootInfoMap = _a.rootInfoMap, _b = _a.renderKey, id = _b.id, children = _b.children;
        var prefix = this.props.prefix;
        if (roots && roots.length > 0) {
            return roots.map(function (root) {
                var rootId = root[id];
                var isShowChildren = expandNode.indexOf(rootId) > -1;
                var barClassName = classnames(prefix + "-tree-bar", {
                    off: !isShowChildren,
                });
                return (React.createElement("li", { key: rootId, "data-zv": '7.4.3' },
                    React.createElement("div", { className: barClassName, "data-zv": '7.4.3' },
                        rootInfoMap[rootId].isParent ? _this.renderSwitcher(root) : null,
                        React.createElement("div", { className: "zent-tree-node", "data-zv": '7.4.3' },
                            _this.renderCheckbox(root),
                            loadingNode.indexOf(rootId) > -1 ? React.createElement(Loading, null) : null,
                            _this.renderContent(root, isShowChildren),
                            _this.renderOperations(root, isShowChildren))),
                    root[children] && root[children].length > 0 && (React.createElement(AnimateHeight, { appear: true, duration: 200, height: isShowChildren ? 'auto' : 0 },
                        React.createElement("ul", { key: "ul-" + rootId, className: prefix + "-tree-child", "data-zv": '7.4.3' }, _this.renderTreeNodes(root[children]))))));
            });
        }
        return null;
    };
    Tree.prototype.render = function () {
        var _a;
        var _b = this.props, commonStyle = _b.commonStyle, prefix = _b.prefix, size = _b.size;
        var tree = this.state.tree;
        var classNames = classnames(prefix + "-tree", (_a = {},
            _a[prefix + "-tree-" + size] = size !== 'medium',
            _a));
        return (React.createElement("ul", { className: classNames, style: commonStyle, "data-zv": '7.4.3' }, this.renderTreeNodes(tree)));
    };
    Tree.defaultProps = {
        autoExpandOnSelect: true,
        dataType: 'tree',
        foldable: true,
        checkable: false,
        size: 'medium',
        prefix: 'zent',
    };
    return Tree;
}(Component));
export { Tree };
export default Tree;
