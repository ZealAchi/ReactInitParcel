import { __assign, __rest } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import getWidth from '../utils/getWidth';
import GroupContext from './GroupContext';
import { DisabledContext } from '../disabled';
import CheckboxGroup from './Group';
function getDisabled(disabledCtx, groupCtx, props) {
    if (typeof props.disabled === 'boolean') {
        return props.disabled;
    }
    if (groupCtx) {
        return groupCtx.disabled;
    }
    return disabledCtx.value;
}
function getReadOnly(groupCtx, props) {
    if (typeof props.readOnly === 'boolean') {
        return props.readOnly;
    }
    if (groupCtx) {
        return groupCtx.readOnly;
    }
    return false;
}
export function Checkbox(props) {
    var disabledCtx = React.useContext(DisabledContext);
    var groupCtx = React.useContext(GroupContext);
    var propsRef = React.useRef(props);
    propsRef.current = props;
    var ctxOnChange = groupCtx && groupCtx.onChange;
    var onChange = React.useCallback(function (evt) {
        var _a = propsRef.current, value = _a.value, onChange = _a.onChange;
        if (ctxOnChange) {
            ctxOnChange(value);
            return;
        }
        else if (onChange) {
            var e = Object.create(evt);
            e.target = __assign(__assign({}, propsRef.current), { type: 'checkbox', checked: evt.target.checked });
            onChange(e);
        }
    }, [ctxOnChange]);
    var _3 = props.checked, className = props.className, style = props.style, _1 = props.disabled, _2 = props.readOnly, children = props.children, indeterminate = props.indeterminate, width = props.width, value = props.value, labelStyle = props.labelStyle, others = __rest(props, ["checked", "className", "style", "disabled", "readOnly", "children", "indeterminate", "width", "value", "labelStyle"]);
    var readOnly = getReadOnly(groupCtx, props);
    var disabled = getDisabled(disabledCtx, groupCtx, props);
    var checked;
    if (groupCtx) {
        var value_1 = groupCtx.value, isValueEqual_1 = groupCtx.isValueEqual;
        checked = value_1.findIndex(function (it) { return isValueEqual_1(it, props.value); }) !== -1;
    }
    else {
        checked = !!props.checked;
    }
    return (React.createElement("label", { className: cx('zent-checkbox-wrap', className, {
            'zent-checkbox-checked': !!checked,
            'zent-checkbox-disabled': disabled || readOnly,
            'zent-checkbox-indeterminate': indeterminate,
        }), style: __assign({}, getWidth(width)), "data-zv": '7.4.3' },
        React.createElement("span", { className: "zent-checkbox", "data-zv": '7.4.3' },
            React.createElement("span", { className: "zent-checkbox-inner", "data-zv": '7.4.3' }),
            React.createElement("input", __assign({}, others, { type: "checkbox", checked: checked && !indeterminate, disabled: disabled, readOnly: readOnly, onChange: onChange, "data-zv": '7.4.3' }))),
        children !== undefined &&
            children !== null &&
            children !== true &&
            children !== false ? (React.createElement("div", { className: "zent-checkbox-label", style: labelStyle, "data-zv": '7.4.3' }, children)) : null));
}
Checkbox.Group = CheckboxGroup;
export default Checkbox;
