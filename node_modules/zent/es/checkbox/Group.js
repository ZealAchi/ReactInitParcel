import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classNames from 'classnames';
import memoize from '../utils/memorize-one';
import GroupContext from './GroupContext';
import { DisabledContext } from '../disabled';
var GroupContextProvider = GroupContext.Provider;
var CheckboxGroup = (function (_super) {
    __extends(CheckboxGroup, _super);
    function CheckboxGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getGroupContext = memoize(function (maybeValue, disabled, readOnly, isValueEqual) {
            var value;
            if (Array.isArray(maybeValue)) {
                value = maybeValue;
            }
            else {
                value = [];
            }
            return {
                value: value,
                disabled: disabled,
                readOnly: readOnly,
                isValueEqual: isValueEqual,
                onChange: _this.onCheckboxChange,
            };
        });
        _this.onCheckboxChange = function (child) {
            var _a = _this.props, isValueEqual = _a.isValueEqual, onChange = _a.onChange, prevValue = _a.value;
            if (!onChange) {
                return;
            }
            var value = prevValue ? prevValue.slice() : [];
            var index = value.findIndex(function (it) { return isValueEqual(it, child); });
            if (index !== -1) {
                value.splice(index, 1);
            }
            else {
                value.push(child);
            }
            onChange(value);
        };
        return _this;
    }
    CheckboxGroup.prototype.render = function () {
        var _a;
        var _b = this.props, className = _b.className, prefix = _b.prefix, style = _b.style, children = _b.children, value = _b.value, _c = _b.disabled, disabled = _c === void 0 ? this.context.value : _c, _d = _b.readOnly, readOnly = _d === void 0 ? false : _d, isValueEqual = _b.isValueEqual;
        var classString = classNames((_a = {},
            _a[prefix + "-checkbox-group"] = true,
            _a), className);
        return (React.createElement(GroupContextProvider, { value: this.getGroupContext(value, disabled, readOnly, isValueEqual) },
            React.createElement("div", { className: classString, style: style, "data-zv": '7.4.3' }, children)));
    };
    CheckboxGroup.defaultProps = {
        prefix: 'zent',
        isValueEqual: Object.is,
        value: [],
    };
    CheckboxGroup.contextType = DisabledContext;
    return CheckboxGroup;
}(Component));
export { CheckboxGroup };
export default CheckboxGroup;
