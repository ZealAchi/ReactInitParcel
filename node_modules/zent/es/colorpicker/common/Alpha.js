import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component, createRef } from 'react';
import reactCSS from '../helpers/reactcss';
import * as alpha from '../helpers/alpha';
import Checkboard from './Checkboard';
var Alpha = (function (_super) {
    __extends(Alpha, _super);
    function Alpha() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containerRef = createRef();
        _this.handleChange = function (e, skip) {
            var change = alpha.calculateChange(e, skip, _this.props, _this.containerRef.current);
            change && _this.props.onChange(change, e);
        };
        _this.handleMouseDown = function (e) {
            _this.handleChange(e, true);
            window.addEventListener('mousemove', _this.handleChange);
            window.addEventListener('mouseup', _this.handleMouseUp);
        };
        _this.handleMouseUp = function () {
            _this.unbindEventListeners();
        };
        _this.unbindEventListeners = function () {
            window.removeEventListener('mousemove', _this.handleChange);
            window.removeEventListener('mouseup', _this.handleMouseUp);
        };
        return _this;
    }
    Alpha.prototype.componentWillUnmount = function () {
        this.unbindEventListeners();
    };
    Alpha.prototype.render = function () {
        var rgb = this.props.rgb;
        var styles = reactCSS({
            default: {
                alpha: {
                    absolute: '0px 0px 0px 0px',
                    borderRadius: this.props.radius,
                },
                checkboard: {
                    absolute: '0px 0px 0px 0px',
                    overflow: 'hidden',
                },
                gradient: {
                    absolute: '0px 0px 0px 0px',
                    background: "linear-gradient(to right, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
                    boxShadow: this.props.shadow,
                    borderRadius: this.props.radius,
                },
                container: {
                    position: 'relative',
                    height: '100%',
                    margin: '0 3px',
                },
                pointer: {
                    position: 'absolute',
                    left: rgb.a * 100 + "%",
                },
                slider: {
                    width: '4px',
                    borderRadius: '1px',
                    height: '8px',
                    boxShadow: '0 0 2px rgba(0, 0, 0, .6)',
                    background: '#fff',
                    marginTop: '1px',
                    transform: 'translateX(-2px)',
                },
            },
            vertical: {
                gradient: {
                    background: "linear-gradient(to bottom, rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 0) 0%,\n           rgba(" + rgb.r + "," + rgb.g + "," + rgb.b + ", 1) 100%)",
                },
                pointer: {
                    left: 0,
                    top: rgb.a * 100 + "%",
                },
            },
            overwrite: __assign({}, this.props.style),
        }, {
            vertical: this.props.direction === 'vertical',
            overwrite: true,
        });
        return (React.createElement("div", { style: styles.alpha, "data-zv": '7.4.3' },
            React.createElement("div", { style: styles.checkboard, "data-zv": '7.4.3' },
                React.createElement(Checkboard, { renderers: this.props.renderers })),
            React.createElement("div", { style: styles.gradient, "data-zv": '7.4.3' }),
            React.createElement("div", { className: "alpha-bar", style: styles.container, ref: this.containerRef, onMouseDown: this.handleMouseDown, onTouchMove: this.handleChange, onTouchStart: this.handleChange, "data-zv": '7.4.3' },
                React.createElement("div", { style: styles.pointer, "data-zv": '7.4.3' }, this.props.pointer ? (React.createElement(this.props.pointer, __assign({}, this.props))) : (React.createElement("div", { style: styles.slider, "data-zv": '7.4.3' }))))));
    };
    return Alpha;
}(Component));
export { Alpha };
export default Alpha;
