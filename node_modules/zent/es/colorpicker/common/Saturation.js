import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component, createRef } from 'react';
import throttle from '../../utils/throttle';
import reactCSS from '../helpers/reactcss';
import * as saturation from '../helpers/saturation';
var Saturation = (function (_super) {
    __extends(Saturation, _super);
    function Saturation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containerRef = createRef();
        _this.throttle = throttle(function (fn, data, e) {
            fn(data, e);
        }, 50);
        _this.handleChange = function (e, skip) {
            _this.throttle(_this.props.onChange, saturation.calculateChange(e, skip, _this.props, _this.containerRef.current), e);
        };
        _this.handleMouseDown = function (e) {
            _this.handleChange(e, true);
            window.addEventListener('mousemove', _this.handleChange);
            window.addEventListener('mouseup', _this.handleMouseUp);
        };
        _this.handleMouseUp = function () {
            _this.unbindEventListeners();
        };
        return _this;
    }
    Saturation.prototype.componentWillUnmount = function () {
        this.unbindEventListeners();
    };
    Saturation.prototype.unbindEventListeners = function () {
        window.removeEventListener('mousemove', this.handleChange);
        window.removeEventListener('mouseup', this.handleMouseUp);
    };
    Saturation.prototype.render = function () {
        var _a = this.props.style || {}, color = _a.color, white = _a.white, black = _a.black, pointer = _a.pointer, circle = _a.circle;
        var styles = reactCSS({
            default: {
                color: {
                    absolute: '0px 0px 0px 0px',
                    background: "hsl(" + this.props.hsl.h + ",100%, 50%)",
                    borderRadius: this.props.radius,
                },
                white: {
                    absolute: '0px 0px 0px 0px',
                    background: 'linear-gradient(to right, #fff, rgba(255,255,255,0))',
                },
                black: {
                    absolute: '0px 0px 0px 0px',
                    background: 'linear-gradient(to top, #000, rgba(0,0,0,0))',
                    boxShadow: this.props.shadow,
                },
                pointer: {
                    position: 'absolute',
                    top: -(this.props.hsv.v * 100) + 100 + "%",
                    left: this.props.hsv.s * 100 + "%",
                    cursor: 'default',
                },
                circle: {
                    width: '4px',
                    height: '4px',
                    boxShadow: "0 0 0 1.5px #fff, inset 0 0 1px 1px rgba(0,0,0,.3),\n            0 0 1px 2px rgba(0,0,0,.4)",
                    borderRadius: '50%',
                    cursor: 'hand',
                    transform: 'translate(-2px, -2px)',
                },
            },
            custom: {
                color: color,
                white: white,
                black: black,
                pointer: pointer,
                circle: circle,
            },
        }, { custom: !!this.props.style });
        return (React.createElement("div", { style: styles.color, ref: this.containerRef, onMouseDown: this.handleMouseDown, onTouchMove: this.handleChange, onTouchStart: this.handleChange, "data-zv": '7.4.3' },
            React.createElement("div", { style: styles.white, "data-zv": '7.4.3' },
                React.createElement("div", { style: styles.black, "data-zv": '7.4.3' }),
                React.createElement("div", { style: styles.pointer, "data-zv": '7.4.3' }, this.props.pointer ? (React.createElement(this.props.pointer, __assign({}, this.props))) : (React.createElement("div", { style: styles.circle, "data-zv": '7.4.3' }))))));
    };
    return Saturation;
}(Component));
export default Saturation;
