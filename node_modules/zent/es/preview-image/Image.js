import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import debounce from '../utils/debounce';
import { I18nReceiver as Receiver } from '../i18n';
import Portal from '../portal';
import Icon from '../icon';
var Image = (function (_super) {
    __extends(Image, _super);
    function Image() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            imageIndex: _this.props.index || 0,
            imageStyle: {},
            rotateIndex: 0,
            scaleTag: false,
        };
        _this.onMaskClick = function (e) {
            if (e.target === e.currentTarget) {
                _this.props.onClose();
            }
        };
        _this.onClose = function () {
            _this.props.onClose();
        };
        _this.handlePreviousAction = function () {
            var imagesNum = _this.props.images.length;
            var imageIndex = _this.state.imageIndex;
            imageIndex = (imageIndex - 1 + imagesNum) % imagesNum;
            _this.setState({
                imageIndex: imageIndex,
                imageStyle: {
                    transform: 'rotate(0deg)',
                },
                rotateIndex: 0,
                scaleTag: false,
            });
        };
        _this.handleNextAction = function () {
            var imagesNum = _this.props.images.length;
            var imageIndex = _this.state.imageIndex;
            imageIndex = (imageIndex + 1) % imagesNum;
            _this.setState({
                imageIndex: imageIndex,
                imageStyle: {
                    transform: 'rotate(0deg)',
                },
                rotateIndex: 0,
                scaleTag: false,
            });
        };
        _this.handleRotate = function () {
            var scaleTag = _this.state.scaleTag;
            var scaleRatio = _this.props.scaleRatio;
            if (scaleRatio < 1) {
                throw new Error("Invalid prop `scaleRatio` in previewImage, it should be greater than 1.");
            }
            var rotateIndex = _this.state.rotateIndex;
            var deg = 90 + rotateIndex * 90;
            rotateIndex++;
            var transformStyle = scaleTag
                ? "rotate(" + deg + "deg) scale(" + scaleRatio + ")"
                : "rotate(" + deg + "deg) scale(1)";
            _this.setState({
                imageStyle: {
                    transform: transformStyle,
                    transitionDuration: '0.5s',
                },
                rotateIndex: rotateIndex,
            });
        };
        _this.handleScale = function () {
            var _a = _this.state, rotateIndex = _a.rotateIndex, scaleTag = _a.scaleTag;
            var scaleRatio = _this.props.scaleRatio;
            if (scaleRatio < 1) {
                throw new Error("Invalid prop `scaleRatio` in previewImage, it should be greater than 1.");
            }
            var deg = rotateIndex * 90;
            var transformStyle = scaleTag
                ? "rotate(" + deg + "deg) scale(1)"
                : "rotate(" + deg + "deg) scale(" + scaleRatio + ")";
            _this.setState({
                imageStyle: {
                    transform: transformStyle,
                    transitionDuration: '0.5s',
                },
                scaleTag: !scaleTag,
            });
        };
        return _this;
    }
    Image.prototype.render = function () {
        var _this = this;
        var _a = this.props, images = _a.images, prefix = _a.prefix, showRotateBtn = _a.showRotateBtn, className = _a.className;
        var _b = this.state, scaleTag = _b.scaleTag, imageIndex = _b.imageIndex, imageStyle = _b.imageStyle;
        var imageClassName = cx(prefix + "-show-image", {
            'image-is-zooming': scaleTag,
        });
        return (React.createElement(Portal, { visible: true, onClose: this.onClose, className: cx(prefix + "-image-p-anchor", className), closeOnESC: true, blockPageScroll: true },
            React.createElement("div", { className: prefix + "-image-p-backdrop", "data-zv": '7.4.3' },
                React.createElement("div", { className: prefix + "-image-p-wrap", "data-zv": '7.4.3' },
                    React.createElement("div", { className: prefix + "-image-p-close", onClick: this.onClose, "data-zv": '7.4.3' },
                        React.createElement(Icon, { type: "close" })),
                    React.createElement(Receiver, { componentName: "PreviewImage" }, function (i18n) { return (React.createElement("div", { className: prefix + "-image-p-body", onClick: _this.onMaskClick, "data-zv": '7.4.3' }, images.map(function (image, index) {
                        if (index === imageIndex) {
                            return (React.createElement("img", { className: imageClassName, onClick: _this.handleScale, style: imageStyle, src: image, key: index, alt: i18n.alt, "data-zv": '7.4.3' }));
                        }
                        return null;
                    }))); }),
                    React.createElement(Receiver, { componentName: "PreviewImage" }, function (i18n) {
                        var needPager = images.length > 1;
                        var footerCxs = cx(prefix + "-image-p-footer", {
                            'show-rotate-btn': showRotateBtn,
                            'image-p-footer-paging': needPager,
                        });
                        var rotateCxs = cx(prefix + "-image-p-action", {
                            'rotate-action': !needPager,
                        });
                        return (React.createElement("div", { className: footerCxs, "data-zv": '7.4.3' },
                            needPager && (React.createElement("span", { className: prefix + "-image-p-action", onClick: _this.handlePreviousAction, "data-zv": '7.4.3' }, i18n.prev)),
                            showRotateBtn && (React.createElement("span", { className: rotateCxs, onClick: debounce(_this.handleRotate, 200), "data-zv": '7.4.3' }, i18n.rotate)),
                            needPager && (React.createElement("span", { className: prefix + "-image-p-action", onClick: _this.handleNextAction, "data-zv": '7.4.3' }, i18n.next))));
                    })))));
    };
    Image.defaultProps = {
        className: '',
        prefix: 'zent',
        showRotateBtn: true,
        images: [],
        index: 0,
        scaleRatio: 1.5,
    };
    return Image;
}(Component));
export default Image;
