import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Popover from '../popover';
import { TimelineDot } from './Dot';
var TimelineItemOptionalPop = function (_a) {
    var children = _a.children, tip = _a.tip, display = _a.display, prefix = _a.prefix, position = _a.position, popoverRef = _a.popoverRef;
    if (tip) {
        return (React.createElement(Popover, { ref: popoverRef, className: prefix + "-timeline-tip", wrapperClassName: prefix + "-timeline-item-wrapper", display: display, position: position, cushion: 20 },
            React.createElement(Popover.Trigger.Hover, null, children),
            React.createElement(Popover.Content, null, tip)));
    }
    return children;
};
var TimelineItem = (function (_super) {
    __extends(TimelineItem, _super);
    function TimelineItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.popover = null;
        _this.mousePosition = {
            x: 0,
            y: 0,
        };
        _this.onMouseMove = function (e) {
            _this.mousePosition.x = e.clientX;
            _this.mousePosition.y = e.clientY;
            _this.popover && _this.popover.adjustPosition();
        };
        _this.position = Popover.Position.create(function (anchorBoundingBox, containerBoundingBox, contentDimension) {
            var x = anchorBoundingBox.left;
            var middle = (anchorBoundingBox.top + anchorBoundingBox.bottom) / 2;
            var y = middle - contentDimension.height / 2;
            return {
                getCSSStyle: function () {
                    if (_this.props.type === 'horizontal') {
                        return {
                            position: 'absolute',
                            left: Math.round(_this.mousePosition.x) + "px",
                            top: Math.round(y - 40) + "px",
                        };
                    }
                    return {
                        position: 'absolute',
                        left: Math.round(x + 20) + "px",
                        top: Math.round(_this.mousePosition.y) + "px",
                    };
                },
                name: 'timeline-tip-position',
            };
        });
        _this.popoverRef = function (el) { return (_this.popover = el); };
        return _this;
    }
    TimelineItem.prototype.render = function () {
        var _a;
        var _b = this.props, size = _b.size, _c = _b.showLabel, showLabel = _c === void 0 ? true : _c, _d = _b.showDot, showDot = _d === void 0 ? true : _d, color = _b.color, label = _b.label, tip = _b.tip, className = _b.className, style = _b.style, type = _b.type, prefix = _b.prefix, lineColor = _b.lineColor, dotColor = _b.dotColor;
        var display = type === 'vertical' ? 'inline-block' : 'block';
        var key = type === 'vertical' ? 'height' : 'width';
        return (React.createElement("li", { className: cx(prefix + "-timeline-item", className), style: style, onMouseMove: this.onMouseMove, "data-zv": '7.4.3' },
            React.createElement(TimelineItemOptionalPop, { display: display, tip: tip, prefix: prefix, position: this.position, popoverRef: this.popoverRef },
                React.createElement("div", { className: prefix + "-timeline-item-hover", "data-zv": '7.4.3' },
                    React.createElement("div", { className: prefix + "-timeline-item-line", style: (_a = {},
                            _a[key] = size,
                            _a.backgroundColor = color || lineColor,
                            _a), "data-zv": '7.4.3' }, showDot && React.createElement(TimelineDot, { color: color || dotColor })))),
            showLabel && (React.createElement("label", { className: prefix + "-timeline-item-label", "data-zv": '7.4.3' }, label))));
    };
    TimelineItem.defaultProps = {
        prefix: 'zent',
        showLabel: true,
        showDot: true,
        lineColor: '#f2f3f5',
        dotColor: '#155BD4',
    };
    return TimelineItem;
}(PureComponent));
export { TimelineItem };
