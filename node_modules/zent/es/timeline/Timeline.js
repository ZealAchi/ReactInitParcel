import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import { isElement } from 'react-is';
import { TimelineItem } from './Item';
import { TimelineLegend } from './Dot';
function normalize(timeline, size) {
    return timeline.map(function (item, index) {
        if (typeof item === 'string') {
            return {
                key: item,
                label: item,
            };
        }
        var id = item.id, percent = item.percent, others = __rest(item, ["id", "percent"]);
        return __assign({ key: id || index, size: percent && percent * size }, others);
    });
}
var Timeline = (function (_super) {
    __extends(Timeline, _super);
    function Timeline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Timeline.prototype.renderChildren = function () {
        var _a = this.props, children = _a.children, timeline = _a.timeline, type = _a.type, size = _a.size;
        if (timeline && timeline.length) {
            return normalize(timeline, size).reduce(function (ret, item) {
                ret.push(React.createElement(TimelineItem, __assign({}, item, { type: type })));
                return ret;
            }, []);
        }
        return React.Children.map(children, function (child) {
            if (!isElement(child)) {
                return null;
            }
            return React.cloneElement(child, {
                type: type,
            });
        });
    };
    Timeline.prototype.render = function () {
        var _a, _b;
        var _c = this.props, size = _c.size, prefix = _c.prefix, type = _c.type, className = _c.className;
        var key = type === 'horizontal' ? 'width' : 'height';
        var style = __assign(__assign({}, this.props.style), (_a = {}, _a[key] = size, _a));
        return (React.createElement("ul", { className: cx(prefix + "-timeline", prefix + "-timeline-" + type, (_b = {},
                _b[prefix + "-timeline-dynamic"] = Boolean(size),
                _b), className), style: style, "data-zv": '7.4.3' }, this.renderChildren()));
    };
    Timeline.defaultProps = {
        prefix: 'zent',
        type: 'horizontal',
        size: '100%',
        style: {},
    };
    Timeline.Item = TimelineItem;
    Timeline.Legend = TimelineLegend;
    return Timeline;
}(PureComponent));
export { Timeline };
export default Timeline;
