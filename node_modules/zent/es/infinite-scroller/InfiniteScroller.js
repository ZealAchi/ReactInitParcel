import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import BlockLoading from '../loading/BlockLoading';
var InfiniteScroller = (function (_super) {
    __extends(InfiniteScroller, _super);
    function InfiniteScroller() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scroller = null;
        _this.state = {
            isLoading: false,
        };
        _this.stopLoading = function () {
            _this.setState({ isLoading: false });
        };
        _this.calculateTopPosition = function (el) {
            if (!el) {
                return 0;
            }
            return el.offsetTop + _this.calculateTopPosition(el.offsetParent);
        };
        _this.getWindowScrollTop = function () {
            return window.pageYOffset !== undefined
                ? window.pageYOffset
                : (document.documentElement ||
                    document.body.parentNode ||
                    document.body).scrollTop;
        };
        _this.isScrollAtBottom = function () {
            var _a = _this.props, offset = _a.offset, useWindow = _a.useWindow;
            var offsetDistance;
            if (useWindow) {
                var windowScrollTop = _this.getWindowScrollTop();
                offsetDistance =
                    _this.calculateTopPosition(_this.scroller) +
                        _this.scroller.offsetHeight -
                        windowScrollTop -
                        window.innerHeight;
            }
            else {
                var _b = _this.scroller, scrollHeight = _b.scrollHeight, clientHeight = _b.clientHeight, scrollTop = _b.scrollTop;
                offsetDistance = scrollHeight - clientHeight - scrollTop;
            }
            return offsetDistance <= offset;
        };
        _this.handleScroll = function () {
            var _a = _this.props, hasMore = _a.hasMore, loadMore = _a.loadMore;
            var isLoading = _this.state.isLoading;
            if (!hasMore || !_this.isScrollAtBottom() || isLoading) {
                return;
            }
            _this.setState({
                isLoading: true,
            });
            if (loadMore.length > 0) {
                loadMore(_this.stopLoading);
            }
            else {
                loadMore()
                    .then(_this.stopLoading)
                    .catch(_this.stopLoading);
            }
        };
        _this.addScrollListener = function () {
            var _a = _this.props, useWindow = _a.useWindow, useCapture = _a.useCapture;
            var scrollEl = window;
            if (!useWindow) {
                scrollEl = _this.scroller;
            }
            scrollEl.addEventListener('scroll', _this.handleScroll, useCapture);
            scrollEl.addEventListener('resize', _this.handleScroll, useCapture);
        };
        _this.removeScrollListener = function () {
            var _a = _this.props, useWindow = _a.useWindow, useCapture = _a.useCapture;
            var scrollEl = window;
            if (!useWindow) {
                scrollEl = _this.scroller;
            }
            scrollEl.removeEventListener('scroll', _this.handleScroll, useCapture);
            scrollEl.removeEventListener('resize', _this.handleScroll, useCapture);
        };
        return _this;
    }
    InfiniteScroller.prototype.componentDidMount = function () {
        var _a = this.props, loadMore = _a.loadMore, initialLoad = _a.initialLoad;
        this.addScrollListener();
        if (initialLoad && loadMore) {
            loadMore();
        }
    };
    InfiniteScroller.prototype.componentWillUnmount = function () {
        this.removeScrollListener();
    };
    InfiniteScroller.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, prefix = _b.prefix, className = _b.className, children = _b.children, hasMore = _b.hasMore, loader = _b.loader, useWindow = _b.useWindow;
        var isLoading = this.state.isLoading;
        var classString = cx(prefix + "-infinite-scroller", className, (_a = {},
            _a[prefix + "-infinite-scroller-y"] = !useWindow,
            _a));
        return (React.createElement("div", { ref: function (scroller) { return (_this.scroller = scroller); }, className: classString, "data-zv": '7.4.3' },
            children,
            hasMore && isLoading && loader));
    };
    InfiniteScroller.defaultProps = {
        prefix: 'zent',
        hasMore: true,
        offset: 20,
        initialLoad: true,
        useWindow: true,
        useCapture: false,
        loader: React.createElement(BlockLoading, { height: 60, loading: true, icon: "circle" }),
    };
    return InfiniteScroller;
}(Component));
export { InfiniteScroller };
export default InfiniteScroller;
