import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import capitalize from '../utils/capitalize';
import Button from '../button';
import Popover from '../popover';
import Menu from '../menu';
import Icon from '../icon';
import { DisabledContext } from '../disabled';
var MenuItem = Menu.MenuItem;
var SplitButton = (function (_super) {
    __extends(SplitButton, _super);
    function SplitButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isShowDropdown: false,
        };
        _this.toggleDropdown = function (isShow) {
            _this.setState({ isShowDropdown: isShow });
        };
        _this.handleSelect = function (e, key) {
            _this.props.onSelect && _this.props.onSelect(key);
            _this.toggleDropdown(false);
        };
        return _this;
    }
    SplitButton.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, type = _b.type, size = _b.size, _c = _b.disabled, disabled = _c === void 0 ? this.context.value : _c, loading = _b.loading, dropdownTrigger = _b.dropdownTrigger, dropdownData = _b.dropdownData, dropdownValue = _b.dropdownValue, dropdownText = _b.dropdownText, dropdownPosition = _b.dropdownPosition, className = _b.className, prefix = _b.prefix, children = _b.children, onClick = _b.onClick;
        var classString = cx(prefix + "-split-button", className);
        var trigger = capitalize(dropdownTrigger);
        var Trigger = disabled || loading
            ? Popover.Trigger.Base
            : Popover.Trigger[trigger];
        var position = dropdownPosition
            .split('-')
            .map(function (s) { return capitalize(s); })
            .join('');
        return (React.createElement("div", { className: classString, "data-zv": '7.4.3' },
            React.createElement(Button, { className: prefix + "-split-button__main", type: type, size: size, onClick: onClick, disabled: disabled, loading: loading }, children),
            React.createElement(Popover, { wrapperClassName: cx(prefix + "-split-button__dropdown-wrapper"), visible: this.state.isShowDropdown, onVisibleChange: function (isShow) { return _this.toggleDropdown(isShow); }, position: Popover.Position[position], display: "inline", cushion: 5 },
                React.createElement(Trigger, null,
                    React.createElement(Button, { className: cx(prefix + "-split-button__dropdown", (_a = {},
                            _a[prefix + "-split-button__dropdown-disabled"] = loading,
                            _a)), type: type, size: size, disabled: disabled },
                        React.createElement(Icon, { className: prefix + "-split-button__dropdown-icon", type: "caret-down" }))),
                React.createElement(Popover.Content, null,
                    React.createElement(Menu, { onClick: this.handleSelect }, dropdownData.map(function (item) {
                        return (React.createElement(MenuItem, { key: "" + item[dropdownValue] }, item[dropdownText]));
                    }))))));
    };
    SplitButton.defaultProps = {
        type: 'default',
        size: 'medium',
        dropdownTrigger: 'click',
        dropdownData: [],
        dropdownValue: 'value',
        dropdownText: 'text',
        dropdownPosition: 'auto-bottom-left',
        prefix: 'zent',
    };
    SplitButton.contextType = DisabledContext;
    return SplitButton;
}(Component));
export { SplitButton };
export default SplitButton;
