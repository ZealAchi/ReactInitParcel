import { __assign, __awaiter, __extends, __generator, __rest } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import { FormProvider, useField, useFieldArray, useFieldSet, field, set, array, form, FieldValue, FieldSetValue, useFieldArrayValue, ValidateOption, createAsyncValidator, isAsyncValidator, } from 'formulr';
import memorize from '../utils/memorize-one';
import { FormContext } from './context';
import { useForm } from './ZentForm';
import scroll from '../utils/scroll';
import { CombineErrors } from './CombineErrors';
import { ValidateOccasion, TouchWhen } from './shared';
export { isViewDrivenProps, ValidateOccasion, } from './shared';
function makeContext(disabled, children) {
    return {
        disabled: disabled,
        children: children,
    };
}
var Form = (function (_super) {
    __extends(Form, _super);
    function Form() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.formRef = React.createRef();
        _this.children = [];
        _this.getContext = memorize(makeContext);
        _this.subscription = null;
        _this.onSubmit = function (e) {
            e.preventDefault();
            _this.props.form.submit(e);
        };
        _this.onKeyDown = function (e) {
            var _a = _this.props, onKeyDown = _a.onKeyDown, _b = _a.disableEnterSubmit, disableEnterSubmit = _b === void 0 ? true : _b;
            if (disableEnterSubmit &&
                e.key === 'Enter' &&
                e.target.tagName === 'INPUT') {
                e.preventDefault();
            }
            onKeyDown && onKeyDown(e);
        };
        _this.submitListener = function (e) {
            _this.submit(e);
        };
        return _this;
    }
    Form.prototype.submit = function (e) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, onSubmit, form, onSubmitFail, onSubmitSuccess, scrollToError, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, onSubmit = _a.onSubmit, form = _a.form, onSubmitFail = _a.onSubmitFail, onSubmitSuccess = _a.onSubmitSuccess, scrollToError = _a.scrollToError;
                        if (!onSubmit) {
                            return [2];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4, form.validate(ValidateOption.IncludeAsync |
                                ValidateOption.IncludeChildrenRecursively |
                                ValidateOption.IncludeUntouched)];
                    case 2:
                        _b.sent();
                        if (!form.isValid()) {
                            scrollToError && this.scrollToFirstError();
                            return [2];
                        }
                        return [4, onSubmit(form, e)];
                    case 3:
                        _b.sent();
                        onSubmitSuccess && onSubmitSuccess();
                        form.submitSuccess();
                        return [3, 5];
                    case 4:
                        error_1 = _b.sent();
                        onSubmitFail && onSubmitFail(error_1);
                        form.submitError(error_1);
                        return [3, 5];
                    case 5: return [2];
                }
            });
        });
    };
    Form.prototype.scrollToFirstError = function () {
        for (var i = 0; i < this.children.length; i += 1) {
            var child = this.children[i];
            var el = child.getDOMNode();
            if (!el) {
                continue;
            }
            var elementBound = el.getBoundingClientRect();
            var y = elementBound.top + window.pageYOffset;
            var x = elementBound.left + window.pageXOffset;
            scroll(document.body, x, y);
        }
    };
    Form.prototype.listenEvents = function () {
        var form = this.props.form;
        this.subscription = form.submit$.subscribe(this.submitListener);
    };
    Form.prototype.removeEventListeners = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    Form.prototype.componentDidMount = function () {
        this.listenEvents();
    };
    Form.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.form !== this.props.form) {
            this.removeEventListeners();
            this.listenEvents();
        }
    };
    Form.prototype.componentWillUnmount = function () {
        this.removeEventListeners();
    };
    Form.prototype.render = function () {
        var _a = this.props, children = _a.children, _b = _a.layout, layout = _b === void 0 ? 'vertical' : _b, className = _a.className, form = _a.form, onSubmit = _a.onSubmit, _c = _a.disabled, disabled = _c === void 0 ? false : _c, scrollToError = _a.scrollToError, props = __rest(_a, ["children", "layout", "className", "form", "onSubmit", "disabled", "scrollToError"]);
        var ctx = this.getContext(disabled, this.children);
        return (React.createElement(FormContext.Provider, { value: ctx },
            React.createElement(FormProvider, { value: form.ctx },
                React.createElement("form", __assign({ ref: this.formRef }, props, { className: cx({
                        'zent-form-vertical': layout === 'vertical',
                        'zent-form-horizontal': layout === 'horizontal',
                    }, className), onSubmit: this.onSubmit, onKeyDown: this.onKeyDown, "data-zv": '7.4.3' }), children))));
    };
    Form.displayName = 'ZentForm';
    Form.CombineErrors = CombineErrors;
    Form.useForm = useForm;
    Form.useField = useField;
    Form.useFieldArray = useFieldArray;
    Form.useFieldSet = useFieldSet;
    Form.field = field;
    Form.set = set;
    Form.array = array;
    Form.form = form;
    Form.FieldValue = FieldValue;
    Form.FieldSetValue = FieldSetValue;
    Form.useFieldArrayValue = useFieldArrayValue;
    Form.ValidateOption = ValidateOption;
    Form.createAsyncValidator = createAsyncValidator;
    Form.isAsyncValidator = isAsyncValidator;
    Form.ValidateOccasion = ValidateOccasion;
    Form.TouchWhen = TouchWhen;
    return Form;
}(React.Component));
export { Form };
