import { __assign, __spreadArrays } from "tslib";
import * as React from 'react';
import { Validators, useField, } from 'formulr';
import { ValidateOccasion, defaultRenderError, asFormChild, } from '../shared';
import Select from '../../select';
import { FormNotice } from '../Notice';
import { FormDescription } from '../Description';
import { FormControl } from '../Control';
import { defaultGetValidateOption } from '../Field';
export var FormSelectField = function (props) {
    var model;
    if (props.name) {
        var _a = props, name_1 = _a.name, defaultValue = _a.defaultValue, destroyOnUnmount = _a.destroyOnUnmount;
        var validators = props.validators || [];
        if (props.required &&
            !validators.some(function (it) {
                return it.$$id ===
                    Validators.SYMBOL_REQUIRED;
            })) {
            validators = [
                Validators.required(props.required),
            ].concat(validators);
        }
        model = useField(name_1, defaultValue, validators);
        model.destroyOnUnmount = Boolean(destroyOnUnmount);
    }
    else {
        model = useField(props.model);
    }
    var propsRef = React.useRef(props);
    propsRef.current = props;
    var className = props.className, style = props.style, label = props.label, required = props.required, before = props.before, after = props.after, notice = props.notice, helpDesc = props.helpDesc, withoutError = props.withoutError, _b = props.renderError, renderError = _b === void 0 ? defaultRenderError : _b, _c = props.validateOccasion, validateOccasion = _c === void 0 ? ValidateOccasion.Default : _c, _d = props.getValidateOption, getValidateOption = _d === void 0 ? defaultGetValidateOption : _d;
    var anchorRef = React.useRef(null);
    asFormChild(model, anchorRef);
    var onChange = React.useCallback(function (e) {
        if (propsRef.current.props.tags) {
            var value = model.value || [];
            if (!value.includes(e.target.value)) {
                model.value = __spreadArrays(value, [e.target.value]);
            }
        }
        else {
            model.value = e.target.value;
        }
        if (validateOccasion & ValidateOccasion.Change) {
            model.validate(getValidateOption('change'));
        }
        model.isTouched = true;
    }, [model]);
    return (React.createElement(FormControl, { ref: anchorRef, className: className, style: style, label: label, required: !!required, invalid: !!model.error },
        React.createElement("div", { className: "zent-form-control-content-inner", "data-zv": '7.4.3' },
            before,
            React.createElement(Select, __assign({}, props.props, { onChange: onChange, value: model.value })),
            after),
        !!notice && React.createElement(FormNotice, null, notice),
        !!helpDesc && React.createElement(FormDescription, null, helpDesc),
        withoutError ? null : renderError(model.error)));
};
