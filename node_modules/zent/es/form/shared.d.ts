import * as React from 'react';
import { FieldModel, IValidators, IMaybeError, BasicModel, ValidateOption } from 'formulr';
import { ReactNode, RefObject } from 'react';
import { Omit, Optional } from 'utility-types';
import { IFormControlProps } from './Control';
import { DatePickers } from '../datetimepicker/common/types';
export interface IRenderError<T> {
    (error: IMaybeError<T>): ReactNode;
}
export interface IFormFieldViewDrivenProps<T> {
    name: string;
    defaultValue: T | (() => T);
    validators?: IValidators<T>;
    destroyOnUnmount?: boolean;
}
export interface IFormFieldModelDrivenProps<T> {
    model: FieldModel<T>;
}
export declare type IFormFieldModelProps<T> = IFormFieldViewDrivenProps<T> | IFormFieldModelDrivenProps<T>;
export declare function isViewDrivenProps<T>(props: IFormFieldModelProps<T>): props is IFormFieldViewDrivenProps<T>;
export declare enum ValidateOccasion {
    None = 0,
    Change = 1,
    Blur = 2,
    Default = 3
}
export declare enum TouchWhen {
    Change = 0,
    Blur = 1
}
export interface IFormFieldPropsBase<Value> extends Omit<IFormControlProps, 'required' | 'invalid'> {
    renderError?: IRenderError<Value>;
    helpDesc?: React.ReactNode;
    notice?: React.ReactNode;
    withoutError?: boolean;
    before?: React.ReactNode;
    after?: React.ReactNode;
    required?: boolean | string;
    validateOccasion?: ValidateOccasion;
    normalize?: (value: Value, prevValue: Value) => Value;
    format?: (value: Value) => Value;
    getValidateOption?: (source: 'blur' | 'change') => ValidateOption | null | undefined;
    modelRef?: React.RefObject<FieldModel<Value>>;
    touchWhen?: TouchWhen;
}
export declare type IFormFieldProps<Value> = IFormFieldPropsBase<Value> & IFormFieldModelProps<Value> & {
    children(props: IFormFieldChildProps<Value>): React.ReactNode;
};
export declare type IFormComponentProps<Value, Props, OmitKeys extends keyof IFormFieldPropsBase<Value> = never> = (Omit<IFormFieldPropsBase<Value>, 'touchWhen' | OmitKeys> & {
    props?: Partial<Props>;
}) & (Optional<IFormFieldViewDrivenProps<Value>, 'defaultValue'> | IFormFieldModelDrivenProps<Value>);
export declare function dateDefaultValueFactory(): DatePickers.Value;
export declare function dateRangeDefaultValueFactory(): DatePickers.RangeValue;
export declare function defaultRenderError<T>(error: IMaybeError<T>): JSX.Element;
export declare function asFormChild<Value>(model: BasicModel<Value>, scrollAnchorRef?: RefObject<Element | null | undefined>): void;
export interface IFormFieldChildProps<Value> {
    value: Value;
    onChange(e: Value): void;
    onBlur: React.FocusEventHandler;
    onCompositionStart: React.CompositionEventHandler;
    onCompositionEnd: React.CompositionEventHandler;
}
