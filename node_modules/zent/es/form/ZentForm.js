import { __assign } from "tslib";
import { useMemo, useReducer } from 'react';
import { ValidateOption, useForm as superUseForm, } from 'formulr';
import { Subject } from 'rxjs';
var initialState = {
    submitting: false,
};
function formReducer(state, action) {
    switch (action.type) {
        case 'SUBMIT_START':
            return __assign(__assign({}, state), { submitting: true });
        case 'SUBMIT_SUCCESS':
        case 'SUBMIT_ERROR':
            return __assign(__assign({}, state), { submitting: false });
        default:
            return state;
    }
}
var ZentForm = (function () {
    function ZentForm(inner, state, dispatch) {
        var _this = this;
        this.inner = inner;
        this.state = state;
        this.dispatch = dispatch;
        this.submit$ = new Subject();
        this.submit = function (e) {
            _this.submit$.next(e);
        };
    }
    Object.defineProperty(ZentForm.prototype, "isSubmitting", {
        get: function () {
            return this.state.submitting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZentForm.prototype, "ctx", {
        get: function () {
            return this.inner.ctx;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ZentForm.prototype, "model", {
        get: function () {
            return this.inner.model;
        },
        enumerable: true,
        configurable: true
    });
    ZentForm.prototype.validate = function (option) {
        if (option === void 0) { option = ValidateOption.Default; }
        return this.inner.model.validate(option);
    };
    ZentForm.prototype.isValid = function () {
        return this.inner.model.valid();
    };
    ZentForm.prototype.isValidating = function () {
        return this.inner.model.isValidating$.getValue();
    };
    ZentForm.prototype.getValue = function () {
        return this.inner.model.getRawValue();
    };
    ZentForm.prototype.initialize = function (value) {
        this.inner.model.initialize(value);
    };
    ZentForm.prototype.patchValue = function (value) {
        this.inner.model.patchValue(value);
    };
    ZentForm.prototype.resetValue = function () {
        this.inner.model.reset();
    };
    ZentForm.prototype.submitStart = function () {
        this.dispatch({
            type: 'SUBMIT_START',
        });
    };
    ZentForm.prototype.submitSuccess = function () {
        this.dispatch({
            type: 'SUBMIT_SUCCESS',
        });
    };
    ZentForm.prototype.submitError = function (error) {
        this.dispatch({
            type: 'SUBMIT_ERROR',
        });
    };
    return ZentForm;
}());
export { ZentForm };
export function useForm(arg) {
    var inner = superUseForm(arg);
    var _a = useReducer(formReducer, initialState), state = _a[0], dispatch = _a[1];
    var form = useMemo(function () { return new ZentForm(inner, state, dispatch); }, [inner]);
    form.state = state;
    return form;
}
