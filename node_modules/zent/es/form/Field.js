import * as React from 'react';
import { useField, Validators, ValidateOption, FieldUtils, } from 'formulr';
import { defaultRenderError, asFormChild, isViewDrivenProps, ValidateOccasion, TouchWhen, } from './shared';
import { FormControl } from './Control';
import { FormNotice } from './Notice';
import { FormDescription } from './Description';
import id from '../utils/identity';
import noop from '../utils/noop';
export function defaultGetValidateOption() {
    return ValidateOption.Default;
}
function withDefaultOption(option) {
    if (option == null) {
        return ValidateOption.Default;
    }
    return option;
}
export function FormField(props) {
    var model;
    if (isViewDrivenProps(props)) {
        var name_1 = props.name, defaultValue = props.defaultValue, destroyOnUnmount = props.destroyOnUnmount;
        var validators = props.validators || [];
        if (props.required &&
            !validators.some(function (it) {
                return it.$$id ===
                    Validators.SYMBOL_REQUIRED;
            })) {
            validators = [
                Validators.required(props.required),
            ].concat(validators);
        }
        model = useField(name_1, defaultValue, validators);
        model.destroyOnUnmount = Boolean(destroyOnUnmount);
    }
    else {
        model = useField(props.model);
    }
    React.useImperativeHandle(props.modelRef, function () { return model; }, [model]);
    var propsRef = React.useRef(props);
    propsRef.current = props;
    var className = props.className, style = props.style, label = props.label, required = props.required, before = props.before, after = props.after, notice = props.notice, helpDesc = props.helpDesc, withoutError = props.withoutError, _a = props.renderError, renderError = _a === void 0 ? defaultRenderError : _a, children = props.children, _b = props.validateOccasion, validateOccasion = _b === void 0 ? ValidateOccasion.Default : _b, _c = props.getValidateOption, getValidateOption = _c === void 0 ? defaultGetValidateOption : _c, _d = props.normalize, normalize = _d === void 0 ? id : _d, _e = props.format, format = _e === void 0 ? id : _e, withoutLabel = props.withoutLabel, _f = props.touchWhen, touchWhen = _f === void 0 ? TouchWhen.Change : _f;
    var anchorRef = React.useRef(null);
    asFormChild(model, anchorRef);
    var normalizer = React.useCallback(function (value) {
        var prevValue = model.value;
        return normalize(value, prevValue);
    }, [model, normalize]);
    var markTouched = React.useCallback(function () { return (model.isTouched = true); }, [
        model,
    ]);
    var onChange = FieldUtils.useMAppend(touchWhen === TouchWhen.Change ? markTouched : noop, FieldUtils.usePipe(normalizer, ValidateOccasion.Change & validateOccasion
        ? FieldUtils.makeChangeHandler(model, withDefaultOption(getValidateOption('change')))
        : React.useCallback(function (value) { return (model.value = value); }, [model])));
    var onBlur = React.useCallback(function () {
        if (touchWhen === TouchWhen.Blur) {
            markTouched();
        }
        if (validateOccasion & ValidateOccasion.Blur) {
            model.validate(getValidateOption('blur'));
        }
    }, [getValidateOption, validateOccasion, touchWhen]);
    var _g = FieldUtils.useCompositionHandler(model), onCompositionStart = _g.onCompositionStart, onCompositionEnd = _g.onCompositionEnd;
    return (React.createElement(FormControl, { ref: anchorRef, className: className, style: style, label: label, required: !!required, invalid: !!model.error, withoutLabel: withoutLabel },
        React.createElement("div", { className: "zent-form-control-content-inner", "data-zv": '7.4.3' },
            before,
            children({
                value: format(model.value),
                onChange: onChange,
                onCompositionStart: onCompositionStart,
                onCompositionEnd: onCompositionEnd,
                onBlur: onBlur,
            }),
            after),
        !!notice && React.createElement(FormNotice, null, notice),
        !!helpDesc && React.createElement(FormDescription, null, helpDesc),
        withoutError ? null : renderError(model.error)));
}
