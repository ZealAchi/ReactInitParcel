import * as React from 'react';
import { BasicModel, IMaybeError, IFormContext } from 'formulr';
export interface ICombineErrorsProps {
    names?: string[];
    models?: Array<BasicModel<any>>;
    children?: (error: IMaybeError<any>) => React.ReactNode;
}
export interface ICombineErrorState {
    error: IMaybeError<any>;
}
export declare class CombineErrors extends React.Component<ICombineErrorsProps, ICombineErrorState> {
    static contextType: React.Context<IFormContext>;
    context: IFormContext;
    private $;
    private $parent;
    state: ICombineErrorState;
    private parentChildrenChange;
    setError: (error: import("formulr").IValidateResult<unknown>) => void;
    subscribe(): void;
    unsubscribe(): void;
    shouldComponentUpdate(nextProps: ICombineErrorsProps, nextState: ICombineErrorState): boolean;
    componentDidMount(): void;
    componentDidUpdate(prevProps: ICombineErrorsProps): void;
    componentWillUnmount(): void;
    render(): {};
}
