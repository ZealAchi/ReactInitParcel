import * as React from 'react';
import { Omit } from 'utility-types';
import { useField, useFieldArray, useFieldSet, field, set, array, form, FieldValue, FieldSetValue, useFieldArrayValue, BasicModel, ValidateOption, createAsyncValidator, isAsyncValidator } from 'formulr';
import { ZentForm, useForm } from './ZentForm';
import { CombineErrors } from './CombineErrors';
import { ValidateOccasion, TouchWhen } from './shared';
export { IRenderError, IFormFieldViewDrivenProps, IFormFieldModelDrivenProps, IFormFieldModelProps, isViewDrivenProps, ValidateOccasion, IFormFieldPropsBase, IFormFieldProps, IFormComponentProps, IFormFieldChildProps, } from './shared';
export interface IFormProps<T extends Record<string, Model>, Model extends BasicModel<unknown>> extends Omit<React.FormHTMLAttributes<HTMLFormElement>, 'onSubmit' | 'dangerouslySetInnerHTML'> {
    layout: 'horizontal' | 'vertical';
    form: ZentForm<T>;
    disabled?: boolean;
    scrollToError?: boolean;
    onSubmit?: (form: ZentForm<T>, e?: React.SyntheticEvent) => void;
    onSubmitFail?: (e: unknown) => void;
    onSubmitSuccess?: () => void;
    disableEnterSubmit?: boolean;
}
export declare class Form<T extends Record<string, Model>, Model extends BasicModel<unknown>> extends React.Component<IFormProps<T, Model>> {
    static displayName: string;
    static CombineErrors: typeof CombineErrors;
    static useForm: typeof useForm;
    static useField: typeof useField;
    static useFieldArray: typeof useFieldArray;
    static useFieldSet: typeof useFieldSet;
    static field: typeof field;
    static set: typeof set;
    static array: typeof array;
    static form: typeof form;
    static FieldValue: typeof FieldValue;
    static FieldSetValue: typeof FieldSetValue;
    static useFieldArrayValue: typeof useFieldArrayValue;
    static ValidateOption: typeof ValidateOption;
    static createAsyncValidator: typeof createAsyncValidator;
    static isAsyncValidator: typeof isAsyncValidator;
    static ValidateOccasion: typeof ValidateOccasion;
    static TouchWhen: typeof TouchWhen;
    readonly formRef: React.RefObject<HTMLFormElement>;
    private readonly children;
    private getContext;
    private subscription;
    private onSubmit;
    private onKeyDown;
    private submit;
    scrollToFirstError(): void;
    private submitListener;
    private listenEvents;
    private removeEventListeners;
    componentDidMount(): void;
    componentDidUpdate(prevProps: IFormProps<T, Model>): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
