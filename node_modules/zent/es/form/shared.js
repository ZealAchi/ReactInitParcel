import * as React from 'react';
import { useRef } from 'react';
import { FormError } from './Error';
import { useFormContext } from './context';
export function isViewDrivenProps(props) {
    return !!props.name;
}
export var ValidateOccasion;
(function (ValidateOccasion) {
    ValidateOccasion[ValidateOccasion["None"] = 0] = "None";
    ValidateOccasion[ValidateOccasion["Change"] = 1] = "Change";
    ValidateOccasion[ValidateOccasion["Blur"] = 2] = "Blur";
    ValidateOccasion[ValidateOccasion["Default"] = 3] = "Default";
})(ValidateOccasion || (ValidateOccasion = {}));
export var TouchWhen;
(function (TouchWhen) {
    TouchWhen[TouchWhen["Change"] = 0] = "Change";
    TouchWhen[TouchWhen["Blur"] = 1] = "Blur";
})(TouchWhen || (TouchWhen = {}));
export function dateDefaultValueFactory() {
    return new Date();
}
export function dateRangeDefaultValueFactory() {
    return [new Date(), new Date()];
}
export function defaultRenderError(error) {
    if (error == null) {
        return null;
    }
    return React.createElement(FormError, null, error.message);
}
export function asFormChild(model, scrollAnchorRef) {
    var ctx = useFormContext();
    var posRef = useRef(ctx.children.length);
    React.useEffect(function () {
        var formChild = {
            valid: function () {
                return model.valid();
            },
            getDOMNode: function () {
                return scrollAnchorRef && scrollAnchorRef.current;
            },
        };
        if (posRef.current < ctx.children.length) {
            ctx.children.splice(posRef.current, 0, formChild);
        }
        else {
            posRef.current = ctx.children.length;
            ctx.children.push(formChild);
        }
        return function () {
            var pos = ctx.children.indexOf(formChild);
            if (pos !== -1) {
                posRef.current = pos;
                ctx.children.splice(pos, 1);
            }
        };
    }, [model, scrollAnchorRef, ctx]);
}
