import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import Decimal from 'big.js';
import Icon from '../icon';
import Input from '../input';
import { InputContext } from '../input/context';
import { DisabledContext } from '../disabled';
import * as Integers from './integer';
import * as Decimals from './decimal';
import { trimLeadingPlus } from './utils';
var is = Object.is;
function getStateFromProps(props) {
    if (props.integer === true) {
        var _a = Integers.normalizeMinMax(props), min = _a.min, max = _a.max;
        var state = __assign({ prevProps: props, min: min,
            max: max }, Integers.normalizeValue(props.value, min, max));
        return state;
    }
    else {
        var _b = Decimals.normalizeMinMax(props), min = _b.min, max = _b.max;
        var state = __assign({ prevProps: props, min: min,
            max: max, delta: Decimals.getDelta(props.decimal) }, Decimals.normalizeValue(props.value, min, max, props.decimal));
        return state;
    }
}
var NumberInput = (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput(props) {
        var _this = _super.call(this, props) || this;
        _this.focused = false;
        _this.inputRef = React.createRef();
        _this.inputContext = {
            renderInner: function (children) { return _this.renderChild(children); },
        };
        _this.onUserInput = function (e) {
            var value = e.target.value;
            if (_this.props.integer === false) {
                var onInput = _this.props.onInput;
                if (Decimals.isPotentialValue(value)) {
                    _this.setState({
                        input: value,
                        value: Decimals.EMPTY_DECIMAL,
                    });
                }
                else if (Decimals.isDecimal(value)) {
                    _this.setState({
                        input: value,
                        value: new Decimal(trimLeadingPlus(value)),
                    });
                    onInput && onInput(value);
                }
            }
            else {
                var onInput = _this.props.onInput;
                if (Integers.isPotentialValue(value)) {
                    _this.setState({
                        input: value,
                        value: null,
                    });
                    onInput && onInput(value);
                }
                else if (Integers.isInteger(value)) {
                    var num = parseInt(value, 10) || 0;
                    _this.setState({
                        input: value,
                        value: num,
                    });
                    onInput && onInput(value);
                }
            }
        };
        _this.onFocus = function (e) {
            _this.focused = true;
            var onFocus = _this.props.onFocus;
            onFocus && onFocus(e);
        };
        _this.onBlur = function (e) {
            _this.focused = false;
            if (_this.props.integer === true) {
                var onChange = _this.props.onChange;
                var _a = _this.state, value = _a.value, min = _a.min, max = _a.max;
                var normalized = Integers.normalizeValue(value, min, max);
                if (onChange) {
                    onChange(normalized.value);
                }
                else {
                    _this.setState(normalized);
                }
                var onBlur = _this.props.onBlur;
                onBlur && onBlur(e);
            }
            else {
                var _b = _this.props, onChange = _b.onChange, decimal = _b.decimal;
                var _c = _this.state, input = _c.input, min = _c.min, max = _c.max;
                var normalized = Decimals.normalizeValue(input, min, max, decimal);
                if (onChange) {
                    onChange(normalized.input);
                }
                else {
                    _this.setState(normalized);
                }
                var onBlur = _this.props.onBlur;
                onBlur && onBlur(e);
            }
        };
        _this.inc = function () {
            _this.step('inc');
        };
        _this.dec = function () {
            _this.step('dec');
        };
        _this.state = getStateFromProps(props);
        return _this;
    }
    NumberInput.prototype.step = function (type) {
        if (this.props.disabled) {
            return;
        }
        if (this.props.integer === true) {
            var _a = this.state, value = _a.value, min = _a.min, max = _a.max;
            var _b = Integers.calculateLimit(value, min, max), canInc = _b.canInc, canDec = _b.canDec;
            if (value === null ||
                (type === 'inc' && !canInc) ||
                (type === 'dec' && !canDec)) {
                return;
            }
            var onChange = this.props.onChange;
            var nextValue = void 0;
            if (type === 'inc') {
                nextValue = value + 1;
            }
            else {
                nextValue = value - 1;
            }
            if (onChange) {
                onChange(nextValue);
            }
            else {
                this.setState({
                    value: nextValue,
                    input: String(nextValue),
                });
            }
        }
        else {
            var _c = this.props, onChange = _c.onChange, decimal = _c.decimal;
            var _d = this.state, value = _d.value, min = _d.min, max = _d.max, delta = _d.delta;
            var _e = Decimals.calculateLimit(value, min, max), canInc = _e.canInc, canDec = _e.canDec;
            if ((type === 'inc' && !canInc) || (type === 'dec' && !canDec)) {
                return;
            }
            var nextValue = void 0;
            if (type === 'inc') {
                nextValue = value.plus(delta);
            }
            else {
                nextValue = value.minus(delta);
            }
            var input = nextValue.toFixed(decimal);
            if (onChange) {
                onChange(input);
            }
            else {
                this.setState({
                    value: nextValue,
                    input: input,
                });
            }
        }
    };
    NumberInput.getDerivedStateFromProps = function (props, prevState) {
        var prevProps = prevState.prevProps;
        if (props === prevProps) {
            return null;
        }
        if (props.integer !== prevProps.integer) {
            return getStateFromProps(props);
        }
        if (props.integer === true) {
            var nextState_1 = __assign(__assign({}, prevState), { prevProps: props });
            if (!is(props.min, prevProps.min) || !is(props.max, prevProps.max)) {
                var _a = Integers.normalizeMinMax(props), min = _a.min, max = _a.max;
                nextState_1.min = min;
                nextState_1.max = max;
            }
            var _b = Integers.normalizeValue(props.value, nextState_1.min, nextState_1.max), value_1 = _b.value, input_1 = _b.input;
            nextState_1.value = value_1;
            nextState_1.input = input_1;
            return nextState_1;
        }
        var nextState = __assign(__assign({}, prevState), { prevProps: props });
        if (!is(props.min, prevProps.min) || !is(props.max, prevProps.max)) {
            var _c = Decimals.normalizeMinMax(props), min = _c.min, max = _c.max;
            nextState.min = min;
            nextState.max = max;
        }
        var _d = Decimals.normalizeValue(props.value, nextState.min, nextState.max, props.decimal), value = _d.value, input = _d.input;
        nextState.value = value;
        nextState.input = input;
        return nextState;
    };
    NumberInput.prototype.checkPropsValue = function () {
        if (this.props.integer === true) {
            if (this.props.value !== this.state.value) {
                var onChange = this.props.onChange;
                onChange && onChange(this.state.value);
            }
        }
        else {
            var _a = this.props, onChange = _a.onChange, decimal = _a.decimal;
            var value = this.state.value;
            if (onChange && this.props.value !== '' && this.state.input !== '') {
                try {
                    if (!new Decimal(this.props.value).eq(value)) {
                        onChange(value.toFixed(decimal));
                    }
                }
                catch (error) {
                    onChange(value.toFixed(decimal));
                }
            }
        }
    };
    NumberInput.prototype.componentDidMount = function () {
        if ('value' in this.props && !this.focused) {
            this.checkPropsValue();
        }
    };
    NumberInput.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps !== this.props && 'value' in this.props && !this.focused) {
            this.checkPropsValue();
        }
    };
    NumberInput.prototype.renderChild = function (children) {
        var _a = this.props, _b = _a.disabled, disabled = _b === void 0 ? this.context.value : _b, readOnly = _a.readOnly, showCounter = _a.showCounter, showStepper = _a.showStepper;
        var limits;
        if (this.props.integer === true) {
            var _c = this.state, min = _c.min, max = _c.max, value = _c.value;
            limits = Integers.calculateLimit(value, min, max);
        }
        else {
            var _d = this.state, value = _d.value, min = _d.min, max = _d.max;
            limits = Decimals.calculateLimit(value, min, max);
        }
        var canDec = limits.canDec, canInc = limits.canInc;
        var addState = disabled || readOnly || !canInc;
        var reduceState = disabled || readOnly || !canDec;
        var upArrowClass = cx({
            'zent-number-input-arrow': true,
            'zent-number-input-arrowup': true,
            'zent-number-input-arrow-disable': addState,
        });
        var downArrowClass = cx({
            'zent-number-input-arrow': true,
            'zent-number-input-arrowdown': true,
            'zent-number-input-arrow-disable': reduceState,
        });
        var reduceCountClass = cx({
            'zent-number-input-count': true,
            'zent-number-input-countreduce': true,
            'zent-number-input-count-disable': reduceState,
        });
        var addCountClass = cx({
            'zent-number-input-count': true,
            'zent-number-input-countadd': true,
            'zent-number-input-count-disable': addState,
        });
        return (React.createElement(React.Fragment, null,
            showCounter && (React.createElement("div", { className: reduceCountClass, onClick: this.dec, "data-zv": '7.4.3' }, "\u2013")),
            children,
            showCounter && (React.createElement("div", { className: addCountClass, onClick: this.inc, "data-zv": '7.4.3' }, "+")),
            showStepper && (React.createElement("div", { className: 'zent-number-input-arrows', "data-zv": '7.4.3' },
                React.createElement("div", { className: upArrowClass, onClick: this.inc, "data-zv": '7.4.3' },
                    React.createElement(Icon, { type: "up" })),
                React.createElement("div", { className: downArrowClass, onClick: this.dec, "data-zv": '7.4.3' },
                    React.createElement(Icon, { type: "down" }))))));
    };
    NumberInput.prototype.render = function () {
        var _a = this.props, integer = _a.integer, className = _a.className, disabled = _a.disabled, readOnly = _a.readOnly, type = _a.type, onChange = _a.onChange, showStepper = _a.showStepper, showCounter = _a.showCounter, min = _a.min, max = _a.max, decimal = _a.decimal, onInput = _a.onInput, inputProps = __rest(_a, ["integer", "className", "disabled", "readOnly", "type", "onChange", "showStepper", "showCounter", "min", "max", "decimal", "onInput"]);
        var input = this.state.input;
        if (showStepper && showCounter) {
            throw new Error('NumberInput: showStepper、 showCounter cannot exist at the same time');
        }
        return (React.createElement(InputContext.Provider, { value: this.inputContext },
            React.createElement(Input, __assign({ ref: this.inputRef, autoComplete: "off" }, inputProps, { readOnly: readOnly, disabled: disabled, className: cx('zent-number-input', className), value: input, onChange: this.onUserInput, onFocus: this.onFocus, onBlur: this.onBlur }))));
    };
    NumberInput.defaultProps = {
        integer: false,
        type: 'number',
        decimal: 0,
        size: 'normal',
    };
    NumberInput.contextType = DisabledContext;
    return NumberInput;
}(React.Component));
export { NumberInput };
export default NumberInput;
