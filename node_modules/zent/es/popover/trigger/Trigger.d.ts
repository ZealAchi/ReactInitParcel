import * as React from 'react';
import { Component } from 'react';
import DOMRef from '../../utils/component/DOMRef';
export interface IPopoverTriggerProps {
    getTriggerNode?: () => HTMLElement;
    getContentNode?: () => HTMLElement;
    open?: () => void;
    close?: () => void;
    contentVisible?: boolean;
    onTriggerRefChange?: (instance: React.ReactInstance, getNodeForTriggerRefChange: (el: HTMLElement) => HTMLElement) => void;
    getNodeForTriggerRefChange?: (el: HTMLElement) => HTMLElement;
    children: React.ReactNode;
    isOutside?: (el: Element, options: {
        contentNode: HTMLElement;
        triggerNode: HTMLElement;
    }) => void;
    isOutsideStacked?: (target: Element) => boolean;
}
export declare class PopoverTrigger<T extends IPopoverTriggerProps = IPopoverTriggerProps> extends Component<T> {
    constructor(props: any);
    isOutsideSelf: (target: any) => boolean | void;
    getTriggerProps(child?: JSX.Element): {};
    triggerEvent(element: any, eventName: any, event: any): void;
    validateChildren(): any;
    onRefChange: (instance: DOMRef) => void;
    render(): JSX.Element;
}
export default PopoverTrigger;
