import { __extends } from "tslib";
import Trigger from './Trigger';
var PopoverClickTrigger = (function (_super) {
    __extends(PopoverClickTrigger, _super);
    function PopoverClickTrigger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClickOutside = function (evt) {
            var contentVisible = _this.props.contentVisible;
            if (!contentVisible) {
                return;
            }
            var target = evt.target;
            if (_this.props.isOutsideStacked(target)) {
                _this.props.close();
            }
        };
        return _this;
    }
    PopoverClickTrigger.prototype.getTriggerProps = function (child) {
        var _this = this;
        return {
            onClick: function (evt) {
                _this.props.open();
                _this.triggerEvent(child, 'onClick', evt);
            },
        };
    };
    PopoverClickTrigger.prototype.bindEventHandler = function (props) {
        var _a = props || this.props, contentVisible = _a.contentVisible, autoClose = _a.autoClose;
        if (autoClose && contentVisible) {
            return window.addEventListener('click', this.onClickOutside, true);
        }
        if (!contentVisible) {
            return window.removeEventListener('click', this.onClickOutside, true);
        }
    };
    PopoverClickTrigger.prototype.componentWillUnmount = function () {
        window.removeEventListener('click', this.onClickOutside, true);
    };
    PopoverClickTrigger.prototype.componentDidMount = function () {
        this.bindEventHandler();
    };
    PopoverClickTrigger.prototype.componentWillReceiveProps = function (nextProps) {
        var contentVisible = nextProps.contentVisible;
        if (contentVisible !== this.props.contentVisible) {
            this.bindEventHandler(nextProps);
        }
    };
    PopoverClickTrigger.defaultProps = {
        autoClose: true,
    };
    return PopoverClickTrigger;
}(Trigger));
export default PopoverClickTrigger;
