import { __extends } from "tslib";
import * as React from 'react';
import { Component, Children } from 'react';
import DOMRef from '../../utils/component/DOMRef';
var PopoverTrigger = (function (_super) {
    __extends(PopoverTrigger, _super);
    function PopoverTrigger(props) {
        var _this = _super.call(this, props) || this;
        _this.isOutsideSelf = function (target) {
            var _a = _this.props, isOutside = _a.isOutside, getContentNode = _a.getContentNode, getTriggerNode = _a.getTriggerNode;
            var box = getContentNode();
            var anchor = getTriggerNode();
            if (isOutside) {
                return isOutside(target, {
                    contentNode: box,
                    triggerNode: anchor,
                });
            }
            if (anchor && anchor.contains(target)) {
                return false;
            }
            if (box && box.contains(target)) {
                return false;
            }
            return true;
        };
        _this.onRefChange = function (instance) {
            var _a = _this.props, onTriggerRefChange = _a.onTriggerRefChange, getNodeForTriggerRefChange = _a.getNodeForTriggerRefChange;
            onTriggerRefChange(instance, getNodeForTriggerRefChange);
        };
        props.injectIsOutsideSelf(_this.isOutsideSelf);
        return _this;
    }
    PopoverTrigger.prototype.getTriggerProps = function (child) {
        return {};
    };
    PopoverTrigger.prototype.triggerEvent = function (element, eventName, event) {
        var handler = element.props[eventName];
        if (handler)
            handler(event);
    };
    PopoverTrigger.prototype.validateChildren = function () {
        var children = this.props.children;
        var count = Children.count(children);
        if (count === 0) {
            throw new Error('Popover trigger requires a child');
        }
        var childrenType = typeof children;
        if ((count === 1 && childrenType === 'string') ||
            childrenType === 'number') {
            return React.createElement("span", { "data-zv": '7.4.3' }, children);
        }
        if (count > 1) {
            throw new Error("Popover trigger requires only one child, but found " + count);
        }
        var child = Children.only(this.props.children);
        if (child.ref && typeof child.ref !== 'function') {
            throw new Error('String ref is not allowed on Popover trigger');
        }
        return child;
    };
    PopoverTrigger.prototype.render = function () {
        var child = this.validateChildren();
        return (React.createElement(DOMRef, { ref: this.onRefChange }, React.cloneElement(child, this.getTriggerProps(child))));
    };
    return PopoverTrigger;
}(Component));
export { PopoverTrigger };
export default PopoverTrigger;
