import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import throttle from '../utils/throttle';
import Portal from '../portal';
import defer from '../utils/defer';
import WindowResizeHandler from '../utils/component/WindowResizeHandler';
import WindowEventHandler from '../utils/component/WindowEventHandler';
import findPositionedParent from '../utils/dom/findPositionedParent';
import { getViewportSize } from '../utils/dom/getViewportSize';
import isEqualPlacement from './placement/isEqual';
import invisiblePlacement from './placement/invisible';
export function isPositionVisible(rect) {
    var viewSize = getViewportSize();
    return !(rect.bottom < 0 || rect.top - viewSize.height > 0);
}
function translateToContainerCoordinates(containerBB, bb) {
    var left = containerBB.left, top = containerBB.top;
    return {
        width: bb.width,
        height: bb.height,
        top: bb.top - top,
        left: bb.left - left,
        bottom: bb.bottom - top,
        right: bb.right - left,
    };
}
var PopoverContent = (function (_super) {
    __extends(PopoverContent, _super);
    function PopoverContent(props) {
        var _this = _super.call(this, props) || this;
        _this.adjustPosition = function () {
            if (!_this.props.visible) {
                return;
            }
            var content = _this.props.getContentNode();
            if (!content) {
                _this.setState({
                    position: invisiblePlacement(_this.props.prefix),
                });
                defer(_this.adjustPosition);
                return;
            }
            var contentBoundingBox = content.getBoundingClientRect();
            var anchor = _this.getAnchor();
            if (!anchor) {
                return;
            }
            var boundingBox = anchor.getBoundingClientRect();
            var parent = _this.getPositionedParent();
            if (!parent) {
                return;
            }
            var parentBoundingBox = parent.getBoundingClientRect();
            var relativeBB = translateToContainerCoordinates(parentBoundingBox, boundingBox);
            var relativeContainerBB = translateToContainerCoordinates(parentBoundingBox, parentBoundingBox);
            var position = _this.props.placement(_this.props.prefix, relativeBB, relativeContainerBB, {
                width: contentBoundingBox.width,
                height: contentBoundingBox.height,
            }, {
                cushion: _this.props.cushion,
                anchor: anchor,
                container: parent,
                anchorBoundingBoxViewport: boundingBox,
                containerBoundingBoxViewport: parentBoundingBox,
            });
            if (!isEqualPlacement(_this.state.position, position)) {
                _this.setState({
                    position: position,
                }, function () {
                    _this.props.onPositionUpdated();
                    if (isPositionVisible(boundingBox) && !_this.positionReady) {
                        _this.positionReady = true;
                        _this.props.onPositionReady();
                    }
                });
            }
        };
        _this.onWindowResize = throttle(function (evt, delta) {
            if (_this.props.visible && (delta.deltaX !== 0 || delta.deltaY !== 0)) {
                _this.adjustPosition();
            }
        }, 16);
        _this.onWindowScroll = throttle(_this.adjustPosition, 16);
        _this.state = {
            position: invisiblePlacement(props.prefix),
        };
        _this.positionReady = false;
        return _this;
    }
    PopoverContent.prototype.getAnchor = function () {
        return this.props.getAnchor();
    };
    PopoverContent.prototype.getPositionedParent = function () {
        if (this.positionedParent !== undefined) {
            return this.positionedParent;
        }
        var containerSelector = this.props.containerSelector;
        var container = document.querySelector(containerSelector);
        var parent = findPositionedParent(container, true);
        this.positionedParent = parent;
        return parent;
    };
    PopoverContent.prototype.componentDidMount = function () {
        var visible = this.props.visible;
        if (visible) {
            this.adjustPosition();
        }
    };
    PopoverContent.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.visible && prevProps.visible !== this.props.visible) {
            this.positionReady = false;
            this.adjustPosition();
        }
    };
    PopoverContent.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, className = _a.className, id = _a.id, visible = _a.visible, children = _a.children, containerSelector = _a.containerSelector;
        var position = this.state.position;
        var cls = cx(className, prefix + "-popover", id, position.toString());
        return (React.createElement(Portal, { visible: visible, selector: containerSelector, className: cls, style: position.getCSSStyle() },
            React.createElement("div", { className: prefix + "-popover-content", "data-zv": '7.4.3' },
                children,
                React.createElement(WindowResizeHandler, { onResize: this.onWindowResize }),
                React.createElement(WindowEventHandler, { eventName: "scroll", callback: this.onWindowScroll, useCapture: true }))));
    };
    return PopoverContent;
}(Component));
export default PopoverContent;
