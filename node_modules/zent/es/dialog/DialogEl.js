import { __extends } from "tslib";
import * as React from 'react';
import { Component, createRef } from 'react';
import cx from 'classnames';
import focusWithoutScroll from '../utils/dom/focusWithoutScroll';
var DialogInnerEl = (function (_super) {
    __extends(DialogInnerEl, _super);
    function DialogInnerEl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dialogEl = null;
        _this.onClickClose = function (e) {
            var onClose = _this.props.onClose;
            if (onClose) {
                onClose(e);
            }
        };
        return _this;
    }
    DialogInnerEl.prototype.componentDidMount = function () {
        this.resetTransformOrigin();
    };
    DialogInnerEl.prototype.componentDidUpdate = function () {
        this.resetTransformOrigin();
    };
    DialogInnerEl.prototype.resetTransformOrigin = function (props) {
        if (props === void 0) { props = this.props; }
        var mousePosition = props.mousePosition;
        if (mousePosition &&
            mousePosition.x >= 0 &&
            mousePosition.y >= 0 &&
            this.dialogEl &&
            this.dialogEl.getBoundingClientRect) {
            var _a = this.dialogEl.getBoundingClientRect(), x = _a.left, y = _a.top;
            var origin_1 = mousePosition.x - x + "px " + (mousePosition.y - y) + "px 0";
            var style_1 = this.dialogEl.style;
            ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
                style_1[prefix + "TransformOrigin"] = origin_1;
            });
            style_1.transformOrigin = origin_1;
        }
    };
    DialogInnerEl.prototype.renderHeader = function () {
        var _a = this.props, prefix = _a.prefix, title = _a.title;
        if (!title) {
            return null;
        }
        title =
            typeof title === 'number' || typeof title === 'string' ? (React.createElement("span", { className: prefix + "-dialog-r-title-text", "data-zv": '7.4.3' }, title)) : (title);
        return (React.createElement("div", { className: prefix + "-dialog-r-header", "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-dialog-r-title", "data-zv": '7.4.3' }, title)));
    };
    DialogInnerEl.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, className = _b.className, prefix = _b.prefix, closeBtn = _b.closeBtn, footer = _b.footer, style = _b.style, children = _b.children;
        var Header = this.renderHeader();
        var closeBtnCls = cx(prefix + "-dialog-r-close", (_a = {},
            _a[prefix + "-dialog-r-has-title"] = !!Header,
            _a));
        var Closer = closeBtn && (React.createElement("button", { type: "button", className: closeBtnCls, onClick: this.onClickClose, "data-zv": '7.4.3' }, "\u00D7"));
        var Footer = footer && (React.createElement("div", { className: prefix + "-dialog-r-footer", "data-zv": '7.4.3' }, footer));
        return (React.createElement("div", { className: prefix + "-dialog-r " + className, style: style, ref: function (el) { return (_this.dialogEl = el); }, "data-zv": '7.4.3' },
            Closer,
            Header,
            React.createElement("div", { className: prefix + "-dialog-r-body", "data-zv": '7.4.3' }, children),
            Footer));
    };
    return DialogInnerEl;
}(Component));
export { DialogInnerEl };
var DialogElWrapper = (function (_super) {
    __extends(DialogElWrapper, _super);
    function DialogElWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rootRef = createRef();
        _this.onMaskClick = function (e) {
            if (e.target === e.currentTarget &&
                _this.props.mask &&
                _this.props.maskClosable) {
                _this.props.onClose(e);
            }
        };
        return _this;
    }
    DialogElWrapper.prototype.componentDidMount = function () {
        var activeElement = document.activeElement;
        var dialogNode = this.rootRef.current;
        if (dialogNode !== activeElement &&
            dialogNode &&
            !dialogNode.contains(activeElement)) {
            focusWithoutScroll(dialogNode);
        }
    };
    DialogElWrapper.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, mask = _a.mask, visible = _a.visible, children = _a.children;
        return (React.createElement("div", { ref: this.rootRef, tabIndex: -1, className: prefix + "-dialog-r-root", "data-zv": '7.4.3' },
            visible && mask && React.createElement("div", { className: prefix + "-dialog-r-backdrop", "data-zv": '7.4.3' }),
            React.createElement("div", { className: prefix + "-dialog-r-wrap", onClick: this.onMaskClick, "data-zv": '7.4.3' }, children)));
    };
    return DialogElWrapper;
}(Component));
export { DialogElWrapper };
