import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import { CSSTransition } from 'react-transition-group';
import Portal from '../portal';
import isBrowser from '../utils/isBrowser';
import { DialogElWrapper, DialogInnerEl } from './DialogEl';
import { openDialog, closeDialog } from './open';
var TIMEOUT = 300;
var mousePosition = null;
if (isBrowser) {
    document.documentElement.addEventListener('click', function (e) {
        mousePosition = {
            x: e.clientX,
            y: e.clientY,
        };
    });
}
var Dialog = (function (_super) {
    __extends(Dialog, _super);
    function Dialog(props) {
        var _this = _super.call(this, props) || this;
        _this.lastMousePosition = null;
        _this.onClose = function (e) {
            var onClose = _this.props.onClose;
            onClose && onClose(e);
        };
        _this.onExited = function () {
            var onClosed = _this.props.onClosed;
            _this.setState({
                exiting: false,
            });
            onClosed && onClosed();
        };
        _this.state = {
            prevOpen: props.visible,
            exiting: false,
        };
        return _this;
    }
    Dialog.getDerivedStateFromProps = function (props, _a) {
        var prevOpen = _a.prevOpen;
        if (props.visible === prevOpen) {
            return null;
        }
        if (props.visible) {
            return {
                prevOpen: props.visible,
                exiting: false,
            };
        }
        return {
            prevOpen: props.visible,
            exiting: true,
        };
    };
    Dialog.prototype.render = function () {
        var _a = this.props, visible = _a.visible, prefix = _a.prefix, closeBtn = _a.closeBtn, style = _a.style, onOpened = _a.onOpened, onClosed = _a.onClosed, mask = _a.mask, maskClosable = _a.maskClosable, children = _a.children, props = __rest(_a, ["visible", "prefix", "closeBtn", "style", "onOpened", "onClosed", "mask", "maskClosable", "children"]);
        var exiting = this.state.exiting;
        var elStyle = __assign(__assign({}, (style.width ? {} : { minWidth: '560px', maxWidth: '75%' })), style);
        if (visible) {
            this.lastMousePosition = this.lastMousePosition || mousePosition;
        }
        else {
            this.lastMousePosition = null;
        }
        return (React.createElement(Portal, { visible: visible || exiting, onClose: this.onClose, className: prefix + "-dialog-r-anchor", closeOnESC: closeBtn, blockPageScroll: true },
            React.createElement(DialogElWrapper, { prefix: prefix, mask: mask, maskClosable: maskClosable, visible: visible, onClose: this.onClose },
                React.createElement(CSSTransition, { appear: true, mountOnEnter: true, unmountOnExit: true, in: visible, timeout: TIMEOUT, classNames: prefix + "-zoom", onEntered: onOpened, onExited: this.onExited },
                    React.createElement(DialogInnerEl, __assign({}, props, { prefix: prefix, style: elStyle, closeBtn: closeBtn, mousePosition: this.lastMousePosition }), children)))));
    };
    Dialog.defaultProps = {
        prefix: 'zent',
        onClose: function () { },
        visible: false,
        className: '',
        style: {},
        title: '',
        closeBtn: true,
        mask: true,
        maskClosable: true,
        footer: null,
    };
    Dialog.openDialog = openDialog;
    Dialog.closeDialog = closeDialog;
    return Dialog;
}(Component));
export { Dialog };
export default Dialog;
