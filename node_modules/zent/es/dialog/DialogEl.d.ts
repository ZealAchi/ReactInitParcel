import * as React from 'react';
import { Component } from 'react';
export interface IMousePosition {
    x: number;
    y: number;
}
export interface IDialogInnerElProps {
    prefix?: string;
    title?: React.ReactNode;
    onClose?: (e: KeyboardEvent | MouseEvent | TouchEvent) => void;
    className?: string;
    closeBtn?: boolean;
    style?: React.CSSProperties;
    footer?: React.ReactNode;
    mousePosition?: IMousePosition | null;
}
export declare class DialogInnerEl extends Component<IDialogInnerElProps> {
    dialogEl: HTMLDivElement | null;
    componentDidMount(): void;
    componentDidUpdate(): void;
    resetTransformOrigin(props?: Readonly<IDialogInnerElProps> & Readonly<{
        children?: React.ReactNode;
    }>): void;
    renderHeader(): JSX.Element;
    onClickClose: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    render(): JSX.Element;
}
export interface IDialogElWrapper {
    prefix?: string;
    mask?: boolean;
    maskClosable?: boolean;
    visible?: boolean;
    onClose(e: MouseEvent | TouchEvent | KeyboardEvent): void;
}
export declare class DialogElWrapper extends Component<IDialogElWrapper> {
    rootRef: React.RefObject<HTMLDivElement>;
    componentDidMount(): void;
    onMaskClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    render(): JSX.Element;
}
