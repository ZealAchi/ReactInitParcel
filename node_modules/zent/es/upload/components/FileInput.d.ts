import { PureComponent } from 'react';
import { II18nLocaleUpload } from '../../i18n';
import { IUploadErrorMessage } from '../Upload';
export interface IUploadLocalFile {
    src: string;
    file: Blob;
    __uid: number;
}
export interface IFileInputProps {
    initIndex: number;
    maxAmount: number;
    silent: boolean;
    maxSize: number;
    type: string;
    auto?: boolean;
    filterFiles: (files: File[]) => File[] | Promise<File[]>;
    onError: () => void;
    onChange?: (files: IUploadLocalFile[]) => void;
    errorMessages?: IUploadErrorMessage;
    i18n: any;
}
export default class FileInput extends PureComponent<IFileInputProps, any> {
    static defaultProps: {
        initIndex: number;
        maxAmount: number;
        silent: boolean;
        maxSize: number;
        type: string;
        filterFiles: (res: any) => any;
        onError: (res: any) => any;
    };
    constructor(props: any);
    onFileChange: (localFiles: any) => void;
    processFiles: (i18n: any) => (evt: any) => void;
    iteratorFiles: (i18n: II18nLocaleUpload) => (files: File[]) => void;
    addFile(file: any, index: any, i18n: any): void;
    autoShowInput: (fileInput: any) => void;
    render(): JSX.Element;
}
