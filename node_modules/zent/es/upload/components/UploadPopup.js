import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import Button from '../../button';
import Input from '../../input';
import Select from '../../select';
import Icon from '../../icon';
import FileInput from './FileInput';
import uploadLocalImage from './UploadLocal';
import UploadImageItem from './UploadImageItem';
import { initSortable, swapArray } from '../utils/sortable';
import { formatFileSize } from '../utils';
import { UID_KEY } from '../constants';
var UploadPopup = (function (_super) {
    __extends(UploadPopup, _super);
    function UploadPopup(props) {
        var _this = _super.call(this, props) || this;
        _this.handleMove = function (fromIndex, toIndex) {
            var localFiles = _this.state.localFiles;
            localFiles = swapArray(localFiles, fromIndex, toIndex);
            _this.setState({
                localFiles: localFiles,
            });
        };
        _this.handleDelete = function (index) {
            var localFiles = _this.state.localFiles;
            localFiles.splice(index, 1);
            _this.setState({
                localFiles: localFiles,
            });
        };
        _this.handleChange = function (files) {
            var localFiles = _this.state.localFiles;
            localFiles = localFiles.concat(files);
            localFiles.sort(function (a, b) { return (a[UID_KEY] > b[UID_KEY] ? 1 : -1); });
            _this.setState({
                localFiles: localFiles,
            });
        };
        _this.onListRefChange = function (list) {
            if (list) {
                _this.sortable = initSortable(list, _this.handleMove);
            }
            else {
                _this.sortable && _this.sortable.destroy();
            }
        };
        _this.state = {
            categoryId: props.options.categoryId,
            networkImage: props.networkImage,
            networkUploading: props.networkUploading,
            localUploading: props.localUploading,
            buttonText: props.i18n.popup.extract,
            localFiles: [],
        };
        _this.networkUrl = '';
        _this.confirmNetworkUrl = _this.confirmNetworkUrl.bind(_this);
        _this.networkUrlChanged = _this.networkUrlChanged.bind(_this);
        _this.uploadLocalImages = _this.uploadLocalImages.bind(_this);
        _this.fileProgressHandler = _this.fileProgressHandler.bind(_this);
        _this.setCategoryId = _this.setCategoryId.bind(_this);
        return _this;
    }
    UploadPopup.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, options = _a.options, className = _a.className;
        var categoryList = options.categoryList;
        return (React.createElement("div", { className: className, "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-container", "data-zv": '7.4.3' },
                categoryList.length > 0 && this.renderUploadGroup(this.props),
                !options.localOnly &&
                    options.type !== 'voice' &&
                    this.renderNetworkRegion(this.props),
                this.renderLocalUploadRegion(this.props)),
            this.renderFooterRegion()));
    };
    UploadPopup.prototype.setCategoryId = function (evt, data) {
        this.setState({ categoryId: data.id });
    };
    UploadPopup.prototype.renderUploadGroup = function (props) {
        var prefix = props.prefix, i18n = props.i18n, categoryList = props.options.categoryList;
        var categoryId = this.state.categoryId;
        return (React.createElement("div", { className: prefix + "-group-region", "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-title", "data-zv": '7.4.3' },
                i18n.popup.group,
                "\uFF1A"),
            React.createElement("div", { className: prefix + "-content", "data-zv": '7.4.3' },
                React.createElement(Select, { width: 300, autoWidth: true, data: categoryList, value: categoryId, optionValue: "id", optionText: "name", onChange: this.setCategoryId.bind(this) }))));
    };
    UploadPopup.prototype.renderNetworkRegion = function (props) {
        var prefix = props.prefix, i18n = props.i18n;
        var _a = this.state, networkImage = _a.networkImage, networkUploading = _a.networkUploading, buttonText = _a.buttonText;
        return (React.createElement("div", { className: prefix + "-network-image-region", "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-title", "data-zv": '7.4.3' },
                i18n.popup.web,
                "\uFF1A"),
            React.createElement("div", { className: prefix + "-content", "data-zv": '7.4.3' },
                React.createElement("div", { className: prefix + "-input-append", "data-zv": '7.4.3' },
                    React.createElement(Input, { type: "text", placeholder: i18n.popup.holder, onChange: this.networkUrlChanged })),
                React.createElement(Button, { type: "primary", outline: true, loading: networkUploading, onClick: this.confirmNetworkUrl }, buttonText),
                React.createElement("div", { className: prefix + "-image-preview", "data-zv": '7.4.3' },
                    React.createElement("img", { src: networkImage.attachment_url, alt: "", "data-zv": '7.4.3' })))));
    };
    UploadPopup.prototype.renderLocalImage = function (item, index) {
        var prefix = this.props.prefix;
        return (React.createElement(UploadImageItem, __assign({ prefix: prefix, key: index }, item, { index: index, onDelete: this.handleDelete })));
    };
    UploadPopup.prototype.renderLocalVoice = function (item, index) {
        var prefix = this.props.prefix;
        return (React.createElement("li", { key: index, className: prefix + "-voice-item", "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-voice-item__icon", "data-zv": '7.4.3' }),
            React.createElement("div", { className: prefix + "-voice-item__name", "data-zv": '7.4.3' }, item.file.name),
            React.createElement("div", { className: prefix + "-voice-item__createtime", "data-zv": '7.4.3' }, formatFileSize(item.file.size)),
            React.createElement("span", { className: prefix + "__close-modal", onClick: this.handleDelete.bind(this, index), "data-zv": '7.4.3' }, "\u00D7"),
            item.progress ? (React.createElement("div", { className: prefix + "-voice-item__progress", "data-zv": '7.4.3' }, item.progress.toFixed(1) + "%")) : ('')));
    };
    UploadPopup.prototype.renderLocalUploadRegion = function (props) {
        var _this = this;
        var prefix = props.prefix, accept = props.accept, options = props.options, i18n = props.i18n;
        var localFiles = this.state.localFiles;
        var lastIndex = 0;
        var filesLength = localFiles.length;
        if (filesLength > 0) {
            lastIndex = localFiles[filesLength - 1][UID_KEY] + 1;
        }
        return (React.createElement("div", { className: prefix + "-local-attachment-region", "data-zv": '7.4.3' },
            React.createElement("div", { className: prefix + "-title", "data-zv": '7.4.3' }, i18n.popup["title_" + options.type] + "\uFF1A"),
            React.createElement("div", { className: prefix + "-content", "data-zv": '7.4.3' },
                filesLength > 0 && (React.createElement("ul", { ref: this.onListRefChange, className: prefix + "__upload-local-" + options.type + "-list", "data-zv": '7.4.3' }, localFiles.map(function (item, index) {
                    return options.type === 'voice'
                        ? _this.renderLocalVoice(item, index)
                        : _this.renderLocalImage(item, index);
                }))),
                !options.maxAmount || localFiles.length < options.maxAmount ? (React.createElement("div", { className: prefix + "-add-local-image-button pull-left", "data-zv": '7.4.3' },
                    React.createElement(Icon, { type: "plus" }),
                    React.createElement(FileInput, __assign({}, props.options, { auto: false, i18n: i18n, accept: accept, initIndex: lastIndex, onChange: this.handleChange })))) : (''),
                React.createElement("div", { className: prefix + "-local-tips c-gray", "data-zv": '7.4.3' }, i18n.popup.type({
                    types: accept.replace(/image\/?|audio\/?/g, '').split(','),
                    size: formatFileSize(options.maxSize),
                })))));
    };
    UploadPopup.prototype.renderFooterRegion = function () {
        var _a = this.state, localUploading = _a.localUploading, localFiles = _a.localFiles;
        var _b = this.props, i18n = _b.i18n, prefix = _b.prefix;
        return (React.createElement("div", { className: prefix + "__footer", "data-zv": '7.4.3' },
            React.createElement(Button, { type: "primary", size: "large", disabled: localFiles.length === 0, loading: localUploading, onClick: this.uploadLocalImages }, i18n.confirm)));
    };
    UploadPopup.prototype.uploadLocalImages = function () {
        var _this = this;
        var _a = this.props, options = _a.options, showUploadPopup = _a.showUploadPopup;
        var _b = this.state, localFiles = _b.localFiles, categoryId = _b.categoryId;
        this.setState({
            localUploading: true,
        });
        uploadLocalImage(options, {
            localFiles: localFiles,
            categoryId: categoryId,
            onProgress: this.fileProgressHandler,
        })
            .then(function () {
            _this.setState({
                localUploading: false,
            });
            showUploadPopup(false);
        })
            .catch(function () {
            _this.setState({
                localUploading: false,
            });
        });
    };
    UploadPopup.prototype.networkUrlChanged = function (evt) {
        this.networkUrl = evt.target.value;
    };
    UploadPopup.prototype.fileProgressHandler = function (progress, index) {
        var localFiles = this.state.localFiles;
        var fileIndex = localFiles.findIndex(function (file) { return file[UID_KEY] === index; });
        if (fileIndex >= 0) {
            localFiles[fileIndex].progress = progress;
        }
        this.setState(localFiles);
    };
    UploadPopup.prototype.confirmNetworkUrl = function () {
        var _this = this;
        var _a = this.props, options = _a.options, showUploadPopup = _a.showUploadPopup, i18n = _a.i18n;
        var categoryId = this.state.categoryId;
        if (!this.networkUrl)
            return false;
        this.setState({
            networkUploading: true,
            buttonText: i18n.popup.extracting,
        });
        return options.onFetch(this.networkUrl, categoryId).then(function () {
            _this.setState({
                networkImage: {},
                networkUploading: false,
                buttonText: i18n.popup.extract,
            });
            showUploadPopup(false);
        }, function () {
            _this.setState({
                networkUploading: false,
                buttonText: i18n.popup.extract,
            });
        });
    };
    UploadPopup.defaultProps = {
        networkImage: {},
        networkUploading: false,
        buttonText: '',
        options: {},
        className: '',
    };
    return UploadPopup;
}(Component));
export default UploadPopup;
