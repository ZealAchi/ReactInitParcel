import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classnames from 'classnames';
import identity from '../utils/identity';
import Dialog from '../dialog';
import { I18nReceiver as Receiver } from '../i18n';
import Icon from '../icon';
import UploadPopup from './components/UploadPopup';
import FileInput from './components/FileInput';
import { DEFAULT_ACCEPT } from './constants';
var promiseNoop = function () { return new Promise(function (resolve) { return resolve([]); }); };
var Upload = (function (_super) {
    __extends(Upload, _super);
    function Upload(props) {
        var _this = _super.call(this, props) || this;
        _this.showUpload = function (visible) {
            if (visible === void 0) { visible = true; }
            var _a = _this.props, localOnly = _a.localOnly, maxAmount = _a.maxAmount;
            if (!_this.isUnmount && (!localOnly || maxAmount !== 1)) {
                _this.setState({
                    visible: visible,
                });
            }
        };
        _this.state = {
            visible: false,
        };
        _this.showUpload = _this.showUpload.bind(_this);
        _this.closePopup = _this.closePopup.bind(_this);
        return _this;
    }
    Upload.prototype.componentDidMount = function () {
        if (this.props.auto) {
            this.showUpload();
        }
        if (this.props.silent) {
            console.warn('silent is deprecated, please use errorMessages to instead.');
        }
    };
    Upload.prototype.componentWillUnmount = function () {
        this.isUnmount = true;
    };
    Upload.prototype.closePopup = function () {
        this.setState({
            visible: false,
        });
    };
    Upload.prototype.render = function () {
        var _this = this;
        var _a = this.props, trigger = _a.trigger, prefix = _a.prefix, className = _a.className, triggerClassName = _a.triggerClassName, tips = _a.tips, children = _a.children, triggerInline = _a.triggerInline, withoutPopup = _a.withoutPopup, uploadOptions = __rest(_a, ["trigger", "prefix", "className", "triggerClassName", "tips", "children", "triggerInline", "withoutPopup"]);
        var visible = this.state.visible;
        var Node = trigger;
        if (className === prefix + "-upload") {
            className = '';
        }
        var dialogClassName = classnames([prefix + "-upload", className]);
        className = classnames([
            dialogClassName,
            {
                inline: triggerInline,
            },
        ]);
        var accept = uploadOptions.accept || DEFAULT_ACCEPT[uploadOptions.type];
        return (React.createElement(Receiver, { componentName: "Upload" }, function (i18n) {
            return withoutPopup ? (React.createElement(UploadPopup, { prefix: prefix + "-upload", options: uploadOptions, accept: accept, className: className, i18n: i18n, showUploadPopup: _this.showUpload })) : (React.createElement(React.Fragment, null,
                React.createElement("div", { className: className, "data-zv": '7.4.3' },
                    React.createElement("span", { className: triggerClassName, onClick: _this.showUpload.bind(_this, true), "data-zv": '7.4.3' },
                        children || (Node && React.createElement(Node, null)) || React.createElement(Icon, { type: "plus" }),
                        uploadOptions.localOnly && uploadOptions.maxAmount === 1 && (React.createElement(FileInput, __assign({}, uploadOptions, { i18n: i18n })))),
                    React.createElement(Dialog, { title: i18n["title_" + _this.props.type], visible: visible, className: dialogClassName, onClose: _this.closePopup },
                        React.createElement(UploadPopup, { prefix: prefix + "-upload", options: uploadOptions, accept: accept, className: className, i18n: i18n, showUploadPopup: _this.showUpload }))),
                React.createElement("p", { className: prefix + "-upload-tips", "data-zv": '7.4.3' }, tips)));
        }));
    };
    Upload.FileInput = FileInput;
    Upload.defaultProps = {
        prefix: 'zent',
        className: 'zent-upload',
        triggerClassName: 'zent-upload-trigger',
        maxSize: 1 * 1024 * 1024,
        maxAmount: 0,
        tips: '',
        localOnly: false,
        auto: false,
        type: 'image',
        filterFiles: identity,
        onFetch: promiseNoop,
        onUpload: promiseNoop,
        categoryList: [],
        categoryId: '',
        triggerInline: false,
        silent: false,
        withoutPopup: false,
        errorMessages: {},
    };
    return Upload;
}(Component));
export { Upload };
export default Upload;
