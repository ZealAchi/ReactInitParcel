import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import Icon from '../icon';
var NO_STYLE = {};
var HIDDEN_STYLE = {
    opacity: 0,
};
var Avatar = (function (_super) {
    __extends(Avatar, _super);
    function Avatar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.textNodeRef = React.createRef();
        _this.avatarNodeRef = React.createRef();
        _this.state = {
            textScale: 1,
            textReady: false,
        };
        return _this;
    }
    Avatar.prototype.render = function () {
        var _a;
        var _b = this.props, prefix = _b.prefix, size = _b.size, shape = _b.shape, src = _b.src, icon = _b.icon, children = _b.children, bordered = _b.bordered, style = _b.style, className = _b.className;
        var useImage = !!src;
        var useString = !!children;
        var cls = cx(prefix + "-avatar", className, (_a = {},
            _a[prefix + "-avatar--size-large"] = size === 'large',
            _a[prefix + "-avatar--size-default"] = size === 'default',
            _a[prefix + "-avatar--size-small"] = size === 'small',
            _a[prefix + "-avatar--shape-circle"] = shape === 'circle',
            _a[prefix + "-avatar--shape-square"] = shape === 'square',
            _a[prefix + "-avatar--type-icon"] = !!icon,
            _a[prefix + "-avatar--type-image"] = useImage,
            _a[prefix + "-avatar--type-string"] = useString,
            _a[prefix + "-avatar--bordered"] = bordered,
            _a));
        if (useImage) {
            return (React.createElement("span", { style: style, className: cls, "data-zv": '7.4.3' },
                React.createElement("img", { className: prefix + "-avatar-image", src: src, alt: "avatar", "data-zv": '7.4.3' })));
        }
        if (icon) {
            return (React.createElement("span", { style: style, className: cls, "data-zv": '7.4.3' },
                React.createElement(Icon, { type: icon })));
        }
        var _c = this.state, textScale = _c.textScale, textReady = _c.textReady;
        var textNode = this.textNodeRef.current;
        var textStyle = NO_STYLE;
        if (!textReady || !textNode) {
            textStyle = HIDDEN_STYLE;
        }
        else if (textScale === 1) {
            textStyle = NO_STYLE;
        }
        else {
            var textTransformString = "scale(" + textScale + ")";
            textStyle = {
                msTransform: textTransformString,
                WebkitTransform: textTransformString,
                MozTransform: textTransformString,
                transform: textTransformString,
                position: 'absolute',
                display: 'inline-block',
                left: "calc(50% - " + Math.floor(textNode.offsetWidth / 2) + "px)",
            };
        }
        var avatarStyle = typeof size === 'number'
            ? __assign({ width: size + "px", height: size + "px", lineHeight: size + "px" }, style) : style;
        return (React.createElement("span", { style: avatarStyle, className: cls, ref: this.avatarNodeRef, "data-zv": '7.4.3' },
            React.createElement("span", { className: prefix + "-avatar-string", style: textStyle, ref: this.textNodeRef, "data-zv": '7.4.3' }, children)));
    };
    Avatar.prototype.componentDidMount = function () {
        this.updateTextScale();
    };
    Avatar.getDerivedStateFromProps = function (_a, _b) {
        var children = _a.children;
        var prevChildren = _b.prevChildren;
        if (children !== prevChildren) {
            return {
                textReady: false,
                prevChildren: children,
            };
        }
        return null;
    };
    Avatar.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.children !== this.props.children) {
            this.updateTextScale();
        }
    };
    Avatar.prototype.updateTextScale = function () {
        var children = this.props.children;
        if (children) {
            var scale = fitText(this.avatarNodeRef.current, this.textNodeRef.current);
            this.setState({
                textScale: scale,
                textReady: true,
            });
        }
    };
    Avatar.defaultProps = {
        shape: 'circle',
        size: 'default',
        bordered: false,
        prefix: 'zent',
    };
    return Avatar;
}(Component));
export { Avatar };
function fitText(containerNode, textNode) {
    if (!containerNode || !textNode) {
        return 1;
    }
    var containerWidth = containerNode.getBoundingClientRect().width;
    var textWidth = textNode.offsetWidth;
    var visualWidth = containerWidth - 6;
    if (visualWidth > textWidth) {
        return 1;
    }
    return visualWidth / textWidth;
}
export default Avatar;
