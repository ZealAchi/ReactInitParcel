import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import ConfigContext from './ConfigContext';
import BreakPointHub from './BreakPointHub';
import LayoutBreakpointContext from './BreakPointContext';
import { BREAKPOINTS, getValueForBreakpoint } from './screen-breakpoints';
var LayoutGrid = (function (_super) {
    __extends(LayoutGrid, _super);
    function LayoutGrid() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            breakpoints: {},
        };
        _this.onBreakpointChange = function (name, matched) {
            _this.setState(function (prevState) {
                var _a;
                var breakpoints = prevState.breakpoints;
                return {
                    breakpoints: __assign(__assign({}, breakpoints), (_a = {}, _a[name] = matched, _a)),
                };
            });
        };
        return _this;
    }
    LayoutGrid.prototype.render = function () {
        var _this = this;
        var _a = this.props, className = _a.className, style = _a.style, others = __rest(_a, ["className", "style"]);
        var breakpoints = this.state.breakpoints;
        return (React.createElement(ConfigContext.Consumer, null, function (config) {
            var rowGutter = getValueForBreakpoint(breakpoints, config.rowGutter);
            var layoutStyles = style;
            if (rowGutter > 0) {
                var height = -(rowGutter / 2);
                layoutStyles = __assign(__assign({}, layoutStyles), { marginTop: height, marginBottom: height });
            }
            return (React.createElement("div", __assign({}, others, { className: cx('zent-layout-grid', className), style: layoutStyles, "data-zv": '7.4.3' }),
                React.createElement(LayoutBreakpointContext.Provider, { value: breakpoints }, _this.props.children),
                React.createElement(BreakPointHub, { breakpoints: BREAKPOINTS, onChange: _this.onBreakpointChange })));
        }));
    };
    return LayoutGrid;
}(Component));
export { LayoutGrid };
export default LayoutGrid;
