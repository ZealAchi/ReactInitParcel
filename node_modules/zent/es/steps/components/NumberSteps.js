import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classNames from 'classnames';
import { isElement } from 'react-is';
var NumberSteps = (function (_super) {
    __extends(NumberSteps, _super);
    function NumberSteps() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberSteps.prototype.render = function () {
        var props = this.props;
        var className = props.className, prefix = props.prefix, children = props.children, current = props.current, status = props.status, direction = props.direction, sequence = props.sequence;
        var lastIndex = React.Children.count(children) - 1;
        var classString = classNames(className, prefix + "-steps", prefix + "-steps__" + direction);
        return (React.createElement("div", { className: classString, "data-zv": '7.4.3' }, React.Children.map(children, function (item, index) {
            var np = {
                sequence: sequence,
                stepNumber: (index + 1).toString(),
                stepLast: index === lastIndex,
                isCurrentStep: index === current - 1,
                isLastFinishStep: status === 'error' && index === current - 2,
                prefix: prefix,
                status: 'wait',
            };
            if (!isElement(item)) {
                return null;
            }
            if (!item.props.status) {
                if (index === current - 1) {
                    np.status = status;
                }
                else if (index < current - 1) {
                    np.status = 'finish';
                }
                else {
                    np.status = 'wait';
                }
            }
            return React.cloneElement(item, np);
        })));
    };
    return NumberSteps;
}(Component));
export default NumberSteps;
