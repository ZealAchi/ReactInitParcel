import * as React from 'react';
import { Component } from 'react';
import ErrorBoundaryFallbackComponent from './Fallback';
import withErrorBoundary from './withErrorBoundary';
export interface IOnErrorCallback {
    (error: Error, componentStack: string): void;
}
export interface IErrorBoundaryFallbackComponentProps {
    error: Error;
    componentStack: string;
}
export interface IErrorBoundaryProps {
    onError?: IOnErrorCallback;
    FallbackComponent?: React.ComponentType<IErrorBoundaryFallbackComponentProps>;
}
export declare class ErrorBoundary extends Component<IErrorBoundaryProps> {
    static defaultProps: {
        FallbackComponent: typeof ErrorBoundaryFallbackComponent;
    };
    static withErrorBoundary: typeof withErrorBoundary;
    static catchError: ({ FallbackComponent, onError, }?: import("./catchError").ICatchErrorOption) => (BaseComponent: any) => (props: any) => JSX.Element;
    state: {
        error: any;
        info: any;
    };
    componentDidCatch(error: any, info: any): void;
    render(): {};
}
export default ErrorBoundary;
