import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import debounce from '../utils/debounce';
import identity from '../utils/identity';
import Pop from '../pop';
import WindowResizeHandler from '../utils/component/WindowResizeHandler';
var ClampLines = (function (_super) {
    __extends(ClampLines, _super);
    function ClampLines(props) {
        var _this = _super.call(this, props) || this;
        _this.handleResize = debounce(function () {
            _this.setState({ noClamp: false });
            _this.clampLines();
        }, _this.props.delay);
        _this.element = null;
        _this.innerElement = null;
        _this.original = props.text;
        _this.lineHeight = 0;
        _this.state = {
            noClamp: false,
            text: '.',
            original: props.text,
        };
        return _this;
    }
    ClampLines.getDerivedStateFromProps = function (props, state) {
        var text = props.text;
        if (state.original !== text) {
            return {
                original: text,
                noClamp: false,
            };
        }
        return null;
    };
    ClampLines.prototype.componentDidUpdate = function (prevProps) {
        var text = prevProps.text;
        if (text && text !== this.state.original) {
            this.clampLines();
        }
    };
    ClampLines.prototype.componentDidMount = function () {
        var text = this.props.text;
        if (text && !this.ssr) {
            this.lineHeight = this.element.clientHeight + 1;
            this.clampLines();
        }
    };
    ClampLines.prototype.clampLines = function () {
        var original = this.state.original;
        var maxHeight = this.lineHeight * this.props.lines + 1;
        var start = 0;
        var middle = 0;
        var end = original.length;
        this.maxHeight = maxHeight;
        if (!this.innerElement) {
            return;
        }
        this.setState({ text: '' });
        while (start <= end) {
            middle = Math.floor((start + end) / 2);
            this.innerElement.textContent =
                original.slice(0, middle) + this.getEllipsis();
            if (middle === original.length) {
                this.setState({
                    text: original,
                    noClamp: true,
                });
                return;
            }
            if (this.element.clientHeight <= maxHeight) {
                start = middle + 1;
            }
            else {
                end = middle - 1;
            }
        }
        this.innerElement.textContent =
            original.slice(0, middle - 1) + this.getEllipsis();
        this.setState({
            text: original.slice(0, middle - 1) + this.getEllipsis(),
        });
    };
    ClampLines.prototype.getEllipsis = function () {
        return !this.state.noClamp ? this.props.ellipsis : '';
    };
    ClampLines.prototype.renderResizable = function () {
        var _this = this;
        if (this.props.resizable) {
            return React.createElement(WindowResizeHandler, { onResize: function () { return _this.handleResize(); } });
        }
        return null;
    };
    ClampLines.prototype.renderClampedText = function () {
        var _a;
        var _this = this;
        var _b = this.props, className = _b.className, prefix = _b.prefix;
        var classString = cx((_a = {},
            _a[className] = className,
            _a[prefix + "-clamp-lines"] = true,
            _a));
        return (React.createElement("div", { className: classString, style: { maxHeight: this.maxHeight, overflowY: 'hidden' }, "data-zv": '7.4.3' },
            React.createElement("div", { ref: function (e) { return (_this.element = e); }, "data-zv": '7.4.3' },
                React.createElement("span", { ref: function (e) { return (_this.innerElement = e); }, "data-zv": '7.4.3' }, this.state.text),
                this.props.extra),
            this.renderResizable()));
    };
    ClampLines.prototype.render = function () {
        var _a = this.props, text = _a.text, className = _a.className, showPop = _a.showPop, popWidth = _a.popWidth, trigger = _a.trigger, renderPop = _a.renderPop;
        if (!text) {
            return null;
        }
        if (this.state.noClamp) {
            return (React.createElement("div", { className: className, "data-zv": '7.4.3' },
                text,
                this.renderResizable()));
        }
        if (showPop) {
            return (React.createElement(Pop, { trigger: trigger, content: React.createElement("div", { style: { maxWidth: popWidth }, "data-zv": '7.4.3' }, renderPop(text)) }, this.renderClampedText()));
        }
        return this.renderClampedText();
    };
    ClampLines.defaultProps = {
        className: '',
        prefix: 'zent',
        lines: 2,
        delay: 300,
        ellipsis: '...',
        showPop: true,
        popWidth: 250,
        trigger: 'hover',
        renderPop: identity,
        resizable: false,
        extra: null,
    };
    return ClampLines;
}(Component));
export { ClampLines };
export default ClampLines;
