import * as React from 'react';
import { Component } from 'react';
import identity from '../utils/identity';
export interface IClampLinesProps {
    text: string;
    lines?: number;
    delay?: number;
    ellipsis?: string;
    showPop?: boolean;
    popWidth?: number;
    trigger?: 'click' | 'hover' | 'focus';
    renderPop?: (text: string) => React.ReactNode;
    resizable?: boolean;
    extra?: React.ReactNode;
    className?: string;
    prefix?: string;
}
export interface IClampLinesState {
    noClamp: boolean;
    text: string;
    original: string;
}
export declare class ClampLines extends Component<IClampLinesProps, IClampLinesState> {
    static defaultProps: {
        className: string;
        prefix: string;
        lines: number;
        delay: number;
        ellipsis: string;
        showPop: boolean;
        popWidth: number;
        trigger: string;
        renderPop: typeof identity;
        resizable: boolean;
        extra: any;
    };
    element: HTMLDivElement;
    innerElement: HTMLSpanElement;
    original: string;
    lineHeight: number;
    maxHeight: number;
    ssr: boolean;
    constructor(props: any);
    static getDerivedStateFromProps(props: any, state: any): {
        original: any;
        noClamp: boolean;
    };
    componentDidUpdate(prevProps: any): void;
    componentDidMount(): void;
    handleResize: (() => void) & import("../utils/types").ICancelable;
    clampLines(): void;
    getEllipsis(): string;
    renderResizable(): JSX.Element;
    renderClampedText(): JSX.Element;
    render(): JSX.Element;
}
export default ClampLines;
