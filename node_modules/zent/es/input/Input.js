import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import classNames from 'classnames';
import { InputCore } from './InputCore';
import { TextArea } from './TextArea';
import { InputContext } from './context';
import { DisabledContext } from '../disabled';
var Input = (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.elementRef = React.createRef();
        _this.state = {
            hasFocus: false,
        };
        _this.onKeyDown = function (e) {
            var _a = _this.props, onKeyDown = _a.onKeyDown, onPressEnter = _a.onPressEnter;
            if (onPressEnter && e.key === 'Enter') {
                onPressEnter(e);
            }
            onKeyDown && onKeyDown(e);
        };
        _this.onFocus = function (evt) {
            _this.setState({
                hasFocus: true,
            });
            var onFocus = _this.props.onFocus;
            onFocus && onFocus(evt);
        };
        _this.onBlur = function (evt) {
            _this.setState({
                hasFocus: false,
            });
            var onBlur = _this.props.onBlur;
            onBlur && onBlur(evt);
        };
        _this.clearInput = function (evt) {
            var onChange = _this.props.onChange;
            var e = Object.create(evt);
            e.target = __assign(__assign({}, _this.props), { value: '' });
            e.fromClearButton = true;
            onChange && onChange(e);
        };
        _this.renderInput = function (disableContext) {
            return _this.renderImpl(disableContext);
        };
        return _this;
    }
    Object.defineProperty(Input.prototype, "input", {
        get: function () {
            return this.elementRef.current;
        },
        enumerable: true,
        configurable: true
    });
    Input.prototype.focus = function () {
        var el = this.elementRef.current;
        el && el.focus();
    };
    Input.prototype.select = function (selectionStart, selectionEnd) {
        var el = this.elementRef.current;
        if (!el) {
            return;
        }
        if (typeof selectionStart === 'number' &&
            typeof selectionEnd === 'number') {
            el.setSelectionRange(selectionStart, selectionEnd);
        }
        else {
            el.select();
        }
    };
    Input.prototype.componentDidMount = function () {
        var _a = this.props, autoFocus = _a.autoFocus, autoSelect = _a.autoSelect, initSelectionStart = _a.initSelectionStart, initSelectionEnd = _a.initSelectionEnd;
        var el = this.elementRef.current;
        if (autoFocus) {
            el && el.focus();
        }
        if (autoSelect) {
            this.select(initSelectionStart, initSelectionEnd);
        }
    };
    Input.prototype.renderImpl = function (disableCtx) {
        var props = this.props;
        var type = props.type, className = props.className, width = props.width, size = props.size, _a = props.disabled, disabled = _a === void 0 ? disableCtx.value : _a, readOnly = props.readOnly, style = props.style;
        var hasFocus = this.state.hasFocus;
        var isTextarea = type.toLowerCase() === 'textarea';
        var editable = !(disabled || readOnly);
        var renderInner = this.context.renderInner;
        var wrapperStyle = __assign(__assign({}, style), { width: width });
        var wrapClass = classNames('zent-input-wrapper', "zent-input--size-" + size, {
            'zent-input-wrapper__not-editable': !editable,
            'zent-textarea-wrapper': isTextarea,
            'zent-input-addons': !isTextarea &&
                (props.addonAfter ||
                    props.addonBefore),
            'zent-input--has-focus': hasFocus,
            'zent-input-wrapper-inline': props.inline,
        }, className);
        var children;
        if (props.type === 'textarea') {
            children = (React.createElement(TextArea, __assign({}, props, { ref: this.elementRef, onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));
        }
        else {
            children = (React.createElement(InputCore, __assign({}, props, { ref: this.elementRef, onClear: this.clearInput, onKeyDown: this.onKeyDown, onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));
        }
        return (React.createElement("div", { className: wrapClass, style: wrapperStyle, "data-zv": '7.4.3' }, renderInner ? renderInner(children) : children));
    };
    Input.prototype.render = function () {
        return (React.createElement(DisabledContext.Consumer, null, this.renderInput));
    };
    Input.contextType = InputContext;
    Input.displayName = 'ZentInput';
    Input.defaultProps = {
        type: 'text',
        size: 'normal',
    };
    return Input;
}(Component));
export { Input };
export default Input;
