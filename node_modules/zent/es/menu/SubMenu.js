import { __assign, __extends } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import Icon from '../icon';
import AnimateHeight from '../utils/component/AnimateHeight';
import CommonMenu from './CommonMenu';
import SubPopupMenu from './SubPopupMenu';
import { getExtraStyle } from './utils';
var SubMenu = (function (_super) {
    __extends(SubMenu, _super);
    function SubMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            subMenuVisible: false,
        };
        _this.getEventHanders = function (disabled, isInline) {
            var eventHanders = {};
            if (!disabled && !isInline) {
                eventHanders = {
                    onMouseEnter: _this.onMouseEnter,
                    onMouseLeave: _this.onMouseLeave,
                };
            }
            return eventHanders;
        };
        _this.handleClick = function (e, index) {
            var _a = _this.props, onClick = _a.onClick, isInline = _a.isInline;
            !isInline && _this.setState({ subMenuVisible: false });
            onClick(e, index);
        };
        _this.titleClickHandler = function (e) {
            var _a = _this.props, isInline = _a.isInline, specKey = _a.specKey, toggleExpand = _a.toggleExpand;
            _this.props.onSubMenuClick(specKey);
            if (isInline) {
                toggleExpand(specKey);
            }
            e.stopPropagation();
        };
        _this.onMouseEnter = function () {
            if (_this.leaveTimer) {
                clearTimeout(_this.leaveTimer);
            }
            _this.enterTimer = setTimeout(function () {
                _this.setState({ subMenuVisible: true });
            }, 200);
        };
        _this.onMouseLeave = function () {
            if (_this.enterTimer) {
                clearTimeout(_this.enterTimer);
            }
            _this.leaveTimer = setTimeout(function () {
                _this.setState({ subMenuVisible: false });
            }, 200);
        };
        _this.renderInlineChild = function (component, index) {
            var _a = _this.props, depth = _a.depth, isInline = _a.isInline, inlineIndent = _a.inlineIndent, selectedKey = _a.selectedKey, expandKeys = _a.expandKeys, handleSelect = _a.handleSelect, toggleExpand = _a.toggleExpand, specKey = _a.specKey;
            return _this.renderCommonMenuItem(component, index, specKey, {
                depth: depth + 1,
                isInline: isInline,
                inlineIndent: inlineIndent,
                selectedKey: selectedKey,
                expandKeys: expandKeys,
                handleSelect: handleSelect,
                toggleExpand: toggleExpand,
                onSubMenuClick: _this.props.onSubMenuClick,
            });
        };
        return _this;
    }
    SubMenu.prototype.renderContent = function () {
        var _a = this.props, prefix = _a.prefix, children = _a.children, specKey = _a.specKey, overlayClassName = _a.overlayClassName, isInline = _a.isInline, expandKeys = _a.expandKeys;
        var isExpand = expandKeys && expandKeys.indexOf(specKey) !== -1;
        if (!isInline) {
            return (React.createElement(SubPopupMenu, { prefix: prefix, visible: this.state.subMenuVisible, onClick: this.handleClick, specKey: specKey, overlayCx: overlayClassName, onSubMenuClick: this.props.onSubMenuClick }, children));
        }
        return (React.createElement(AnimateHeight, { duration: 200, height: isExpand ? 'auto' : 0 },
            React.createElement("ul", { className: prefix + "-menu__inner", "data-zv": '7.4.3' }, React.Children.map(children, this.renderInlineChild))));
    };
    SubMenu.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props, prefix = _d.prefix, className = _d.className, disabled = _d.disabled, title = _d.title, isInline = _d.isInline, depth = _d.depth, inlineIndent = _d.inlineIndent, expandKeys = _d.expandKeys, specKey = _d.specKey;
        var isExpand = expandKeys && expandKeys.indexOf(specKey) !== -1;
        var eventHanders = this.getEventHanders(disabled, isInline);
        var styleObj = getExtraStyle({ isInline: isInline, depth: depth, inlineIndent: inlineIndent });
        var cls = cx(className, (_a = {},
            _a[prefix + "-menu-item"] = !isInline,
            _a[prefix + "-menu-item-disabled"] = disabled,
            _a[prefix + "-submenu"] = !isInline,
            _a[prefix + "-menu__inline-submenu"] = isInline,
            _a[prefix + "-menu__inline-item-disabled"] = disabled && isInline,
            _a));
        return (React.createElement("li", __assign({ className: cls }, eventHanders, { "data-zv": '7.4.3' }),
            React.createElement("div", { className: cx((_b = {},
                    _b[prefix + "-submenu-title"] = !isInline,
                    _b[prefix + "-menu__inline-submenu-title"] = isInline,
                    _b[prefix + "-submenu-disabled"] = disabled,
                    _b)), style: styleObj, onClick: this.titleClickHandler, "data-zv": '7.4.3' },
                title,
                !disabled && (React.createElement(Icon, { className: cx(prefix + "-submenu-title-operate-icon", (_c = {},
                        _c[prefix + "-menu__inline-submenu-icon--expand"] = isInline && isExpand,
                        _c)), type: "right" }))),
            !disabled && this.renderContent()));
    };
    SubMenu.defaultProps = {
        className: '',
        prefix: 'zent',
    };
    return SubMenu;
}(CommonMenu));
export default SubMenu;
