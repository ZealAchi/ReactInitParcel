export var NOT_FOUND = function () { };
export function read(namespace, key) {
    var ns = readNamespace(namespace);
    if (ns !== NOT_FOUND && ns && ns.hasOwnProperty(key)) {
        return ns[key];
    }
    return NOT_FOUND;
}
export function write(namespace, key, value) {
    var _a;
    var ns = readNamespace(namespace);
    var isRemove = value === undefined;
    if (ns === NOT_FOUND) {
        ns = {};
    }
    if (isRemove) {
        delete ns[key];
    }
    else {
        ns[key] = value;
    }
    if (writeNamespace(namespace, ns)) {
        return true;
    }
    ns = (_a = {}, _a[key] = value, _a);
    return writeNamespace(namespace, ns);
}
export function remove(namespace, key) {
    return write(namespace, key, undefined);
}
function readNamespace(namespace) {
    var ns = localStorage.getItem(namespace);
    if (!ns) {
        return NOT_FOUND;
    }
    try {
        return JSON.parse(ns);
    }
    catch (ex) {
        return NOT_FOUND;
    }
}
function writeNamespace(namespace, value) {
    try {
        if (Object.keys(value).length === 0) {
            localStorage.removeItem(namespace);
        }
        else {
            var ns = JSON.stringify(value);
            localStorage.setItem(namespace, ns);
        }
    }
    catch (ex) {
        return false;
    }
    return true;
}
