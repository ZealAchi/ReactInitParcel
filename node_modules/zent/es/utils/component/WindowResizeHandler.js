import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import getViewportSize from '../dom/getViewportSize';
import WindowEventHandler from './WindowEventHandler';
var WindowResizeHandler = (function (_super) {
    __extends(WindowResizeHandler, _super);
    function WindowResizeHandler() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._prevViewportSize = null;
        _this.onResize = function (evt) {
            var viewportSize = getViewportSize();
            if (!_this._prevViewportSize) {
                _this._prevViewportSize = viewportSize;
            }
            var prevViewportSize = _this._prevViewportSize;
            var delta = {
                deltaX: viewportSize.width - prevViewportSize.width,
                deltaY: viewportSize.height - prevViewportSize.height,
            };
            if (delta.deltaX === 0 && delta.deltaY === 0) {
                return;
            }
            _this.props.onResize(evt, delta);
            _this._prevViewportSize = viewportSize;
        };
        return _this;
    }
    WindowResizeHandler.prototype.componentDidMount = function () {
        this._prevViewportSize = getViewportSize();
    };
    WindowResizeHandler.prototype.render = function () {
        return React.createElement(WindowEventHandler, { eventName: "resize", callback: this.onResize });
    };
    return WindowResizeHandler;
}(Component));
export default WindowResizeHandler;
