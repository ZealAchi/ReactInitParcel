import { __assign, __extends } from "tslib";
import * as React from 'react';
import nextFrame from '../nextFrame';
function applyHeight(el, height) {
    if (typeof height === 'number') {
        el.style.height = height + "px";
    }
    else {
        el.style.height = height;
    }
}
var AnimationHeight = (function (_super) {
    __extends(AnimationHeight, _super);
    function AnimationHeight() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ref = React.createRef();
        _this.timer = null;
        return _this;
    }
    AnimationHeight.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, appear = _a.appear, height = _a.height, duration = _a.duration;
        var el = this.ref.current;
        if (appear && height === 'auto') {
            el.style.height = '0px';
            nextFrame(function () {
                if (_this.props.height === height) {
                    el.style.height = el.scrollHeight + "px";
                    _this.timer = window.setTimeout(function () {
                        _this.timer = null;
                        if (_this.props.height === height) {
                            el.style.height = 'auto';
                        }
                    }, duration);
                }
            });
        }
        else {
            applyHeight(el, height);
        }
    };
    AnimationHeight.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        var _a = this.props, height = _a.height, duration = _a.duration;
        if (prevProps.height === height) {
            return;
        }
        if (this.timer !== null) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var el = this.ref.current;
        if (prevProps.height === 'auto') {
            el.style.height = el.scrollHeight + "px";
            nextFrame(function () {
                if (_this.props.height === height) {
                    applyHeight(el, height);
                }
            });
        }
        else if (height === 'auto') {
            el.style.height = el.scrollHeight + "px";
            this.timer = window.setTimeout(function () {
                _this.timer = null;
                el.style.height = 'auto';
            }, duration);
        }
        else {
            applyHeight(el, height);
        }
    };
    AnimationHeight.prototype.render = function () {
        var _a = this.props, duration = _a.duration, className = _a.className, style = _a.style, easing = _a.easing, overflow = _a.overflow, children = _a.children;
        return (React.createElement("div", { ref: this.ref, className: className, style: __assign(__assign({}, style), { transition: "height " + duration + "ms " + easing, overflow: overflow }), "data-zv": '7.4.3' }, children));
    };
    AnimationHeight.defaultProps = {
        duration: 200,
        easing: 'ease',
        overflow: 'hidden',
    };
    return AnimationHeight;
}(React.Component));
export default AnimationHeight;
