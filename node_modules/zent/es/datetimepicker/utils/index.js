import { __spreadArrays } from "tslib";
import startOfDay from 'date-fns/startOfDay';
import startOfMonth from 'date-fns/startOfMonth';
import endOfDay from 'date-fns/endOfDay';
import formatBase from '../../utils/date/formatDate';
import parseBase from '../../utils/date/parseDate';
import { getLocale } from '../../i18n/time-locale';
import { CURRENT_MONTH, ONEDAY, TIME_BEGIN } from '../constants';
export var padLeft = function (val) {
    return val < 10 ? "0" + val : val;
};
export var getMonthStr = function (val) {
    return val.getFullYear() + "-" + padLeft(val.getMonth() + 1);
};
export var getDateStr = function (val) {
    return val.getFullYear() + "-" + padLeft(val.getMonth() + 1) + "-" + val.getDate();
};
export var isSameDate = function (val, cmp) {
    return (val.getFullYear() === cmp.getFullYear() &&
        val.getMonth() === cmp.getMonth() &&
        val.getDate() === cmp.getDate());
};
export var isCurrentMonth = function (val) {
    return val.getMonth() === CURRENT_MONTH;
};
export var isBeforeMonth = function (val, cpr) {
    if (val.getFullYear() < cpr.getFullYear()) {
        return true;
    }
    return (val.getFullYear() === cpr.getFullYear() && val.getMonth() < cpr.getMonth());
};
export var isAfterMonth = function (val, cpr) {
    if (val.getFullYear() > cpr.getFullYear()) {
        return true;
    }
    return (val.getFullYear() === cpr.getFullYear() && val.getMonth() > cpr.getMonth());
};
export var goDays = function (val, diff) {
    return new Date(val.getTime() + diff * ONEDAY);
};
export var goMonths = function (val, diff) {
    var cp = new Date(val);
    return new Date(cp.getFullYear(), cp.getMonth() + diff, 1);
};
export var goYears = function (val, diff) {
    var cp = new Date(val);
    return new Date(cp.setFullYear(cp.getFullYear() + diff));
};
export var setSameDate = function (val, target) {
    val.setFullYear(target.getFullYear());
    val.setMonth(target.getMonth());
    val.setDate(target.getDate());
    return val;
};
export function formatDate(date, format, locale) {
    if (locale === void 0) { locale = getLocale(); }
    return formatBase(date, format, locale);
}
export function parseDate(dateStr, format, locale) {
    if (locale === void 0) { locale = getLocale(); }
    return parseBase(dateStr, format, locale);
}
export function monthStart(date) {
    if (date === void 0) { date = new Date(); }
    return startOfMonth(date);
}
export function dayStart(date) {
    if (date === void 0) { date = new Date(); }
    return startOfDay(date);
}
export function dayEnd(date) {
    if (date === void 0) { date = new Date(); }
    return endOfDay(date);
}
export function setTime(date, time) {
    var _a;
    if (time === void 0) { time = TIME_BEGIN; }
    var timeArr;
    if (time instanceof Date) {
        timeArr = [time.getHours(), time.getMinutes(), time.getSeconds()];
    }
    else {
        timeArr = time.split(':');
    }
    var dateTimeArr = __spreadArrays([
        date.getFullYear(),
        date.getMonth(),
        date.getDate()
    ], timeArr);
    return new ((_a = Date).bind.apply(_a, __spreadArrays([void 0], dateTimeArr)))();
}
export var commonFns = {
    goDays: goDays,
    goMonths: goMonths,
    goYears: goYears,
    setTime: setTime,
    dayStart: dayStart,
    dayEnd: dayEnd,
    parseDate: parseDate,
    formatDate: formatDate,
};
