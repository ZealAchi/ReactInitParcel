import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classNames from 'classnames';
import isWithinInterval from 'date-fns/isWithinInterval';
import { goDays, isSameDate, isBeforeMonth, isAfterMonth, formatDate, } from '../utils';
import { CURRENT } from '../constants';
import PanelCell from '../common/PanelCell';
var ROW = 6;
var COL = 7;
var DatePanelBody = (function (_super) {
    __extends(DatePanelBody, _super);
    function DatePanelBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePanelBody.prototype.isSelected = function (val) {
        var _a = this.props, selected = _a.selected, disableSelectedHighlight = _a.disableSelectedHighlight;
        if (!selected || disableSelectedHighlight)
            return false;
        if (Array.isArray(selected)) {
            return selected.some(function (item) { return isSameDate(val, item); });
        }
        return isSameDate(val, selected);
    };
    DatePanelBody.prototype.isInSelect = function (val) {
        var _a = this.props, selected = _a.selected, disableSelectedHighlight = _a.disableSelectedHighlight;
        if (Array.isArray(selected) && selected[0] && selected[1]) {
            var start = selected[0], end = selected[1];
            var inRange = val > start && val < end;
            if (disableSelectedHighlight) {
                return inRange || isSameDate(val, start) || isSameDate(val, end);
            }
            return inRange && !isSameDate(val, end);
        }
        return false;
    };
    DatePanelBody.prototype.isInRange = function (val) {
        var range = this.props.range;
        if (Array.isArray(range) && range[0] && range[1]) {
            return isWithinInterval(val, { start: range[0], end: range[1] });
        }
        return false;
    };
    DatePanelBody.prototype.getDays = function () {
        var _a = this.props, actived = _a.actived, disabledDate = _a.disabledDate;
        var days = [];
        var copy = new Date(actived.getFullYear(), actived.getMonth(), actived.getDate(), actived.getHours(), actived.getMinutes(), actived.getSeconds());
        var firstDay = new Date(copy.setDate(1));
        var diff = firstDay.getDay();
        var index = 0;
        for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
            days[rowIndex] = [];
            for (var colIndex = 0; colIndex < COL; colIndex++) {
                var val = goDays(firstDay, index - diff);
                var isBefore = isBeforeMonth(val, actived);
                var isAfter = isAfterMonth(val, actived);
                var isCurrent = isSameDate(val, CURRENT);
                var isDisabled = disabledDate(val);
                var isSelected = this.isSelected(val);
                var isInSelect = this.isInSelect(val);
                var isInRange = this.isInRange(val);
                var className = classNames({
                    'panel__cell date-panel__cell': true,
                    'panel__cell--different': isBefore || isAfter,
                    'panel__cell--current': !isDisabled && isCurrent,
                    'panel__cell--disabled': isDisabled,
                    'panel__cell--selected': isSelected,
                    'panel__cell--in-range': isInRange,
                    'panel__cell--in-selected': isInSelect,
                });
                days[rowIndex][colIndex] = {
                    text: val.getDate(),
                    value: val,
                    title: formatDate(val, 'YYYY-MM-DD'),
                    isDisabled: isDisabled,
                    className: className,
                };
                index++;
            }
        }
        return days;
    };
    DatePanelBody.prototype.render = function () {
        var _a = this.props, onSelect = _a.onSelect, onHover = _a.onHover, i18n = _a.i18n;
        var days = this.getDays();
        return (React.createElement("div", { className: "date-table panel-table", "data-zv": '7.4.3' },
            React.createElement("ul", { className: "panel-table__row panel-table__head", "data-zv": '7.4.3' }, i18n.panel.dayNames.map(function (item, i) { return (React.createElement("li", { key: i, "data-zv": '7.4.3' }, item)); })),
            React.createElement(PanelCell, { onSelect: onSelect, onHover: onHover, cells: days })));
    };
    return DatePanelBody;
}(PureComponent));
export default DatePanelBody;
