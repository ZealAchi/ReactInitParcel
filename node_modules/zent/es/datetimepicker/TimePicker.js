import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import HourPanel from './time/HourPanel';
import MinutePanel from './time/MinutePanel';
import SecondPanel from './time/SecondPanel';
import PanelFooter from './common/PanelFooter';
import { formatDate, parseDate, dayStart, padLeft } from './utils';
import { timeFnMap, noop, popPositionMap, commonProps } from './constants';
import Icon from '../icon';
var DEFAULT_FORMAT = 'HH:mm:ss';
var DEFAULT_FORMAT_WITHOUT_SECOND = 'HH:mm';
var TIME_KEY;
(function (TIME_KEY) {
    TIME_KEY["HOUR"] = "hour";
    TIME_KEY["MINUTE"] = "minute";
    TIME_KEY["SECOND"] = "second";
})(TIME_KEY || (TIME_KEY = {}));
function getFormat(props) {
    var format = props.format, showSecond = props.showSecond;
    var defaultFormat = showSecond
        ? DEFAULT_FORMAT
        : DEFAULT_FORMAT_WITHOUT_SECOND;
    return format === DEFAULT_FORMAT ? defaultFormat : format;
}
var disabledMap = {
    hour: 'disabledHour',
    minute: 'disabledMinute',
    second: 'disabledSecond',
};
function extractStateFromProps(props) {
    var value = props.value;
    var parsedDate;
    if (value) {
        parsedDate = parseDate(value, getFormat(props));
        if (!parsedDate) {
            console.warn('time and format mismatch');
        }
    }
    else {
        parsedDate = dayStart();
    }
    return {
        value: parsedDate,
        isPanelOpen: false,
        prevProps: props,
    };
}
var TimePicker = (function (_super) {
    __extends(TimePicker, _super);
    function TimePicker(props) {
        var _this = _super.call(this, props) || this;
        _this.retType = 'string';
        _this.onChangeTime = function (val, type) {
            var fn = timeFnMap[type];
            var tmp = new Date(_this.state.value);
            tmp[fn](val);
            var nextTabKey = _this.state.tabKey;
            switch (type) {
                case TIME_KEY.HOUR:
                    nextTabKey = TIME_KEY.MINUTE;
                    break;
                case TIME_KEY.MINUTE: {
                    if (_this.props.showSecond) {
                        nextTabKey = TIME_KEY.SECOND;
                    }
                    break;
                }
                default:
            }
            _this.setState({
                value: tmp,
                tabKey: nextTabKey,
            });
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange('');
        };
        _this.getReturnValue = function (date) {
            var format = getFormat(_this.props);
            if (_this.retType === 'number') {
                return date.getTime();
            }
            if (_this.retType === 'date') {
                return date;
            }
            return formatDate(date, format);
        };
        _this.onConfirm = function () {
            var value = _this.state.value;
            var _a = _this.props, min = _a.min, onClose = _a.onClose, onChange = _a.onChange, onBeforeConfirm = _a.onBeforeConfirm;
            if (onBeforeConfirm && !onBeforeConfirm())
                return;
            var tmp = value || dayStart();
            tmp = new Date(tmp.getFullYear(), tmp.getMonth(), tmp.getDate(), value.getHours(), value.getMinutes(), value.getSeconds());
            if (min) {
                var minDate = parseDate(min, getFormat(_this.props));
                minDate.setFullYear(tmp.getFullYear());
                minDate.setMonth(tmp.getMonth());
                minDate.setDate(tmp.getDate());
                if (tmp < minDate) {
                    tmp = new Date(minDate);
                }
            }
            _this.setState({
                value: tmp,
                isPanelOpen: false,
            });
            var ret = _this.getReturnValue(tmp);
            onChange(ret);
            onClose && onClose();
        };
        _this.isCellDisabled = function (type) {
            var _a;
            var _b = _this.props, min = _b.min, max = _b.max;
            var value = _this.state.value;
            var format = getFormat(_this.props);
            var minDate = null;
            var minHour = 0;
            var minMinute = 0;
            var minSecond = 0;
            var maxDate = null;
            var maxHour = 23;
            var maxMinute = 59;
            var maxSecond = 59;
            if (min) {
                minDate = parseDate(min, format);
                minHour = minDate.getHours();
                minMinute = minDate.getMinutes();
                minSecond = minDate.getSeconds();
            }
            if (max) {
                maxDate = parseDate(max, format);
                maxHour = maxDate.getHours();
                maxMinute = maxDate.getMinutes();
                maxSecond = maxDate.getSeconds();
            }
            var defaultHandlers = (_a = {},
                _a[TIME_KEY.HOUR] = function (h) { return h < minHour || h > maxHour; },
                _a[TIME_KEY.MINUTE] = function (m) {
                    return (value.getHours() === minHour && m < minMinute) ||
                        (value.getHours() === maxHour && m > maxMinute);
                },
                _a[TIME_KEY.SECOND] = function (s) {
                    return (value.getHours() === minHour &&
                        value.getMinutes() === minMinute &&
                        s < minSecond) ||
                        (value.getHours() === maxHour &&
                            value.getMinutes() === maxMinute &&
                            s > maxSecond);
                },
                _a);
            return _this.disabledTime[disabledMap[type]] || defaultHandlers[type];
        };
        _this.togglePicker = function () {
            var _a = _this.props, onOpen = _a.onOpen, onClose = _a.onClose, disabled = _a.disabled;
            var isPanelOpen = !_this.state.isPanelOpen;
            if (disabled)
                return;
            isPanelOpen ? onOpen && onOpen() : onClose && onClose();
            _this.setState({
                isPanelOpen: isPanelOpen,
                tabKey: isPanelOpen ? TIME_KEY.HOUR : null,
            });
        };
        _this.switchTab = function (tabKey) {
            _this.setState({
                tabKey: tabKey,
            });
        };
        _this.resetTime = function () {
            _this.setState({
                value: extractStateFromProps(_this.props).value,
            });
        };
        _this.renderPanelContent = function (i18n) {
            var _a = _this.state, value = _a.value, tabKey = _a.tabKey;
            switch (tabKey) {
                case TIME_KEY.HOUR:
                    return (React.createElement(HourPanel, { step: _this.props.hourStep, selected: value, isDisabled: _this.isCellDisabled(TIME_KEY.HOUR), onSelect: function (v) { return _this.onChangeTime(v, 'hour'); }, i18n: i18n, hideHeader: true }));
                case TIME_KEY.MINUTE:
                    return (React.createElement(MinutePanel, { step: _this.props.minuteStep, selected: value, isDisabled: _this.isCellDisabled(TIME_KEY.MINUTE), onSelect: function (v) { return _this.onChangeTime(v, 'minute'); }, i18n: i18n, hideHeader: true }));
                case TIME_KEY.SECOND:
                    return (React.createElement(SecondPanel, { step: _this.props.secondStep, selected: value, isDisabled: _this.isCellDisabled(TIME_KEY.SECOND), onSelect: function (v) { return _this.onChangeTime(v, 'second'); }, i18n: i18n, hideHeader: true }));
                default:
                    return null;
            }
        };
        _this.renderPicker = function (i18n) {
            var _a = _this, _b = _a.props, confirmText = _b.confirmText, showSecond = _b.showSecond, _c = _a.state, value = _c.value, isPanelOpen = _c.isPanelOpen;
            if (isPanelOpen) {
                var linkCls = cx({
                    'link--current': true,
                });
                var radioButtonGroup = [
                    {
                        value: TIME_KEY.HOUR,
                        content: "" + padLeft(value.getHours()) + i18n.panel.hour,
                    },
                    {
                        value: TIME_KEY.MINUTE,
                        content: "" + padLeft(value.getMinutes()) + i18n.panel.minute,
                    },
                ]
                    .concat(showSecond
                    ? [
                        {
                            value: TIME_KEY.SECOND,
                            content: "" + padLeft(value.getSeconds()) + i18n.panel.second,
                        },
                    ]
                    : [])
                    .map(function (_a) {
                    var tabKey = _a.value, content = _a.content;
                    return (React.createElement("span", { key: tabKey, className: cx('time__number', {
                            checked: _this.state.tabKey === tabKey,
                        }), onClick: function () { return _this.switchTab(tabKey); }, "data-zv": '7.4.3' }, content));
                });
                return (React.createElement("div", { className: "time-picker time-panel time-picker-panel", "data-zv": '7.4.3' },
                    React.createElement("div", { className: "panel__header time-picker-panel__header", "data-zv": '7.4.3' },
                        React.createElement("div", { className: cx('time-picker-panel__tab-group', {
                                'show-second': showSecond,
                            }), "data-zv": '7.4.3' }, radioButtonGroup)),
                    React.createElement("div", { className: "time-picker-panel__content", "data-zv": '7.4.3' }, _this.renderPanelContent(i18n)),
                    _this.props.isFooterVisible ? (React.createElement("div", { className: "time-picker-panel__footer", "data-zv": '7.4.3' },
                        React.createElement(PanelFooter, { buttonText: confirmText || i18n.confirm, onClickButton: _this.onConfirm, linkText: i18n.reset, linkCls: linkCls, showLink: true, onClickLink: _this.resetTime }))) : null));
            }
            return null;
        };
        var value = props.value, valueType = props.valueType;
        if (valueType) {
            _this.retType = valueType.toLowerCase();
        }
        else if (value) {
            if (typeof value === 'number')
                _this.retType = 'number';
            if (value instanceof Date)
                _this.retType = 'date';
        }
        var state = extractStateFromProps(props);
        state.tabKey = TIME_KEY.HOUR;
        _this.state = state;
        _this.disabledTime = (props.disabledTime && props.disabledTime()) || {};
        return _this;
    }
    TimePicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    TimePicker.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, prefix = _b.prefix, className = _b.className, disabled = _b.disabled, width = _b.width, popPosition = _b.popPosition, name = _b.name, placeholder = _b.placeholder, value = _b.value, canClear = _b.canClear, autoComplete = _b.autoComplete, isPanelOpen = _a.state.isPanelOpen;
        var format = getFormat(this.props);
        var formattedValue = (value && formatDate(parseDate(value, format), format)) || '';
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-time-picker", className);
        var inputCls = cx({
            'picker-input': true,
            'picker-input--show-clear-icon': canClear && !!formattedValue,
            'picker-input--disabled': disabled,
            'time-picker-input': true,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement(Popover, { cushion: 5, visible: isPanelOpen, onVisibleChange: _this.togglePicker, className: prefix + "-datetime-picker-popover " + className + "-popover", position: popPositionMap[popPosition.toLowerCase()] },
                React.createElement(Popover.Trigger.Click, null,
                    React.createElement("div", { style: widthStyle, className: inputCls, onClick: function (evt) { return evt.preventDefault(); }, "data-zv": '7.4.3' },
                        React.createElement(Input, { name: name, value: formattedValue, placeholder: placeholder || i18n.time, onChange: noop, disabled: disabled, autoComplete: autoComplete }),
                        React.createElement(Icon, { className: "picker-input--icon", type: "clock-o" }),
                        canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: _this.onClearInput })))),
                React.createElement(Popover.Content, null, _this.renderPicker(i18n)))); })));
    };
    TimePicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '', format: 'HH:mm:ss', isFooterVisible: true, hourStep: 1, minuteStep: 1, secondStep: 1, disabledTime: function () { } });
    return TimePicker;
}(PureComponent));
export { TimePicker };
export default TimePicker;
