import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import { padLeft, isSameDate } from '../utils';
import HourPanel from './HourPanel';
import MinutePanel from './MinutePanel';
import SecondPanel from './SecondPanel';
var stateMap = {
    hour: 'openHour',
    minute: 'openMinute',
    second: 'openSecond',
};
var disabledMap = {
    hour: 'disabledHour',
    minute: 'disabledMinute',
    second: 'disabledSecond',
};
var TimePanel = (function (_super) {
    __extends(TimePanel, _super);
    function TimePanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            openHour: false,
            openMinute: false,
            openSecond: false,
        };
        _this.openPanel = function (type) {
            return function () {
                var _a;
                var key = stateMap[type];
                _this.setState((_a = {}, _a[key] = true, _a));
            };
        };
        _this.hidePanel = function (type) {
            return function () {
                var _a;
                var key = stateMap[type];
                _this.setState((_a = {}, _a[key] = false, _a));
            };
        };
        _this.isDisabled = function (type) {
            var _a = _this.props, disabledTime = _a.disabledTime, min = _a.min, max = _a.max, actived = _a.actived;
            var fns;
            if (disabledTime) {
                return disabledTime[disabledMap[type]];
            }
            if (min && max && isSameDate(min, actived) && isSameDate(max, actived)) {
                fns = {
                    hour: function (val) { return val < min.getHours() || val > max.getHours(); },
                    minute: function (val) {
                        return (actived.getHours() === min.getHours() && val < min.getMinutes()) ||
                            (actived.getHours() === max.getHours() && val > max.getMinutes());
                    },
                    second: function (val) {
                        return (actived.getHours() === min.getHours() &&
                            actived.getMinutes() === min.getMinutes() &&
                            val < min.getSeconds()) ||
                            (actived.getHours() === max.getHours() &&
                                actived.getMinutes() === max.getMinutes() &&
                                val > max.getSeconds());
                    },
                };
                return fns[type];
            }
            if (min && isSameDate(min, actived)) {
                fns = {
                    hour: function (val) { return val < min.getHours(); },
                    minute: function (val) {
                        return actived.getHours() === min.getHours() && val < min.getMinutes();
                    },
                    second: function (val) {
                        return actived.getHours() === min.getHours() &&
                            actived.getMinutes() === min.getMinutes() &&
                            val < min.getSeconds();
                    },
                };
                return fns[type];
            }
            if (max && isSameDate(max, actived)) {
                fns = {
                    hour: function (val) { return val > max.getHours(); },
                    minute: function (val) {
                        return actived.getHours() === max.getHours() && val > max.getMinutes();
                    },
                    second: function (val) {
                        return actived.getHours() === max.getHours() &&
                            actived.getMinutes() === max.getMinutes() &&
                            val > max.getSeconds();
                    },
                };
                return fns[type];
            }
        };
        return _this;
    }
    TimePanel.prototype.onSelectTime = function (type) {
        var _this = this;
        return function (val) {
            _this.props.onChange(val, type);
            _this.hidePanel(type)();
        };
    };
    TimePanel.prototype.render = function () {
        var _a = this, _b = _a.state, openHour = _b.openHour, openMinute = _b.openMinute, openSecond = _b.openSecond, _c = _a.props, actived = _c.actived, i18n = _c.i18n;
        return (React.createElement("div", { className: "time-panel", "data-zv": '7.4.3' },
            openHour && (React.createElement(HourPanel, { className: "panel-content", selected: actived, isDisabled: this.isDisabled('hour'), onSelect: this.onSelectTime('hour'), hidePanel: this.hidePanel('hour'), i18n: i18n })),
            openMinute && (React.createElement(MinutePanel, { className: "panel-content", selected: actived, isDisabled: this.isDisabled('minute'), onSelect: this.onSelectTime('minute'), hidePanel: this.hidePanel('minute'), i18n: i18n })),
            openSecond && (React.createElement(SecondPanel, { className: "panel-content", selected: actived, isDisabled: this.isDisabled('second'), onSelect: this.onSelectTime('second'), hidePanel: this.hidePanel('second'), i18n: i18n })),
            React.createElement("div", { className: "time-panel__preview", "data-zv": '7.4.3' },
                React.createElement("span", { className: "time__number", onClick: this.openPanel('hour'), "data-zv": '7.4.3' },
                    padLeft(actived.getHours()),
                    i18n.panel.hour),
                React.createElement("span", { className: "time__number", onClick: this.openPanel('minute'), "data-zv": '7.4.3' },
                    padLeft(actived.getMinutes()),
                    i18n.panel.minute),
                React.createElement("span", { className: "time__number", onClick: this.openPanel('second'), "data-zv": '7.4.3' },
                    padLeft(actived.getSeconds()),
                    i18n.panel.second))));
    };
    return TimePanel;
}(PureComponent));
export default TimePanel;
