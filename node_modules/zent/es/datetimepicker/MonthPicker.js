import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import MonthPanel from './month/MonthPanel';
import PanelFooter from './common/PanelFooter';
import { formatDate, parseDate, dayStart, dayEnd, monthStart } from './utils';
import { CURRENT, noop, popPositionMap, commonProps } from './constants';
import Icon from '../icon';
function extractStateFromProps(props) {
    var showPlaceholder;
    var selected;
    var actived;
    var format = props.format, value = props.value, defaultValue = props.defaultValue;
    if (value) {
        var tmp = parseDate(value, format);
        if (tmp) {
            showPlaceholder = false;
            selected = actived = monthStart(tmp);
        }
        else {
            console.warn("date and format don't match.");
            showPlaceholder = true;
            actived = monthStart();
        }
    }
    else {
        showPlaceholder = true;
        if (defaultValue) {
            actived = monthStart(parseDate(defaultValue, format));
        }
        else {
            actived = monthStart();
        }
    }
    return {
        value: selected && formatDate(selected, format),
        actived: actived,
        selected: selected,
        openPanel: false,
        showPlaceholder: showPlaceholder,
        prevProps: props,
    };
}
var MonthPicker = (function (_super) {
    __extends(MonthPicker, _super);
    function MonthPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.retType = 'string';
        _this.picker = null;
        _this.getReturnValue = function (date) {
            var format = _this.props.format;
            if (_this.retType === 'number') {
                return date.getTime();
            }
            if (_this.retType === 'date') {
                return date;
            }
            return formatDate(date, format);
        };
        _this.onChangeMonth = function (val) {
            _this.setState({
                actived: val,
            });
        };
        _this.onSelectMonth = function (val, isYear) {
            if (isYear === void 0) { isYear = false; }
            var _a = _this.props, onClick = _a.onClick, isFooterVisible = _a.isFooterVisible;
            var month = val.getMonth();
            if (!isYear && _this.isDisabled(month))
                return;
            _this.setState({
                selected: val,
                actived: val,
            }, function () {
                if (!isFooterVisible) {
                    _this.onConfirm();
                }
            });
            onClick && onClick(val);
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange('');
        };
        _this.onConfirm = function () {
            var _a = _this, _b = _a.props, format = _b.format, onChange = _b.onChange, selected = _a.state.selected;
            var value = '';
            if (selected) {
                value = formatDate(selected, format);
            }
            _this.setState({
                value: value,
                openPanel: false,
                showPlaceholder: false,
            });
            onChange(_this.getReturnValue(selected));
        };
        _this.isDisabled = function (val) {
            var year = _this.state.actived.getFullYear();
            var dateStr = year + "-" + (val + 1);
            var ret = parseDate(dateStr, 'YYYY-MM');
            var _a = _this.props, disabledDate = _a.disabledDate, min = _a.min, max = _a.max, format = _a.format;
            if (disabledDate && disabledDate(ret))
                return true;
            if (min && dayEnd(ret) < parseDate(min, format))
                return true;
            if (max && dayStart(ret) > parseDate(max, format))
                return true;
            return false;
        };
        _this.togglePicker = function () {
            var _a = _this.props, onOpen = _a.onOpen, onClose = _a.onClose, disabled = _a.disabled;
            var openPanel = !_this.state.openPanel;
            if (disabled)
                return;
            openPanel ? onOpen && onOpen() : onClose && onClose();
            _this.setState({
                openPanel: !_this.state.openPanel,
            });
        };
        _this.state = extractStateFromProps(props);
        var value = props.value, valueType = props.valueType;
        if (valueType) {
            _this.retType = valueType.toLowerCase();
        }
        else if (value) {
            if (typeof value === 'number')
                _this.retType = 'number';
            if (value instanceof Date)
                _this.retType = 'date';
        }
        return _this;
    }
    MonthPicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    MonthPicker.prototype.renderPicker = function (i18n) {
        var _this = this;
        var _a = this, _b = _a.props, confirmText = _b.confirmText, isFooterVisible = _b.isFooterVisible, _c = _a.state, actived = _c.actived, openPanel = _c.openPanel, selected = _c.selected;
        var monthPicker;
        if (openPanel) {
            var monthPickerCls = cx({
                'month-picker': true,
                small: isFooterVisible,
            });
            monthPicker = (React.createElement("div", { className: monthPickerCls, "data-zv": '7.4.3' },
                React.createElement(MonthPanel, { actived: actived, selected: selected, onChange: this.onChangeMonth, onSelect: this.onSelectMonth, disabledDate: this.isDisabled, i18n: i18n }),
                isFooterVisible ? (React.createElement(PanelFooter, { buttonText: confirmText || i18n.confirm, linkText: i18n.current.month, linkCls: "link--current", onClickLink: function () { return _this.onSelectMonth(CURRENT); }, onClickButton: this.onConfirm })) : null));
        }
        return monthPicker;
    };
    MonthPicker.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, className = _b.className, disabled = _b.disabled, name = _b.name, placeholder = _b.placeholder, popPosition = _b.popPosition, prefix = _b.prefix, width = _b.width, canClear = _b.canClear, autoComplete = _b.autoComplete, _c = _a.state, openPanel = _c.openPanel, showPlaceholder = _c.showPlaceholder, value = _c.value;
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-month-picker", className);
        var inputCls = cx({
            'picker-input': true,
            'picker-input--show-clear-icon': canClear && !showPlaceholder,
            'picker-input--disabled': disabled,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement(Popover, { cushion: 5, visible: openPanel, onVisibleChange: _this.togglePicker, className: cx(prefix + "-datetime-picker-popover", className), position: popPositionMap[popPosition.toLowerCase()] },
                React.createElement(Popover.Trigger.Click, null,
                    React.createElement("div", { style: widthStyle, className: inputCls, "data-zv": '7.4.3' },
                        React.createElement(Input, { name: name, placeholder: placeholder || i18n.month, value: value || '', onChange: noop, disabled: disabled, autoComplete: autoComplete }),
                        React.createElement(Icon, { className: "picker-input--icon", type: "calendar-o" }),
                        canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: _this.onClearInput })))),
                React.createElement(Popover.Content, null, _this.renderPicker(i18n)))); })));
    };
    MonthPicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '', format: 'YYYY-MM' });
    return MonthPicker;
}(PureComponent));
export { MonthPicker };
export default MonthPicker;
