export declare namespace DatePickers {
    type Value = string | number | Date;
    type RangeValue = [Value?, Value?];
    type RangeType = 'start' | 'end';
    interface ICommonProps<Val = Value> {
        prefix?: string;
        name?: string;
        className?: string;
        placeholder?: string;
        confirmText?: string;
        width?: string | number;
        format?: string;
        openPanel?: boolean;
        defaultTime?: string;
        valueType?: 'date' | 'number' | 'string';
        popPosition?: 'left' | 'right';
        min?: Value;
        max?: Value;
        disabledDate?: (val: Value, type?: RangeType) => boolean;
        onClick?: (val: Value, type?: RangeType) => void;
        value?: Val;
        defaultValue?: Val;
        onChange?: (val: Val) => void;
        onOpen?: (type?: RangeType) => void;
        onClose?: (type?: RangeType) => void;
        canClear?: boolean;
        disabled?: boolean;
        autoComplete?: string;
    }
    interface IDisabledTime {
        disabledHour: (val: number) => boolean;
        disabledMinute: (val: number) => boolean;
        disabledSecond: (val: number) => boolean;
    }
    interface IPanelCellValue {
        text: number;
        value: Date;
        title: string;
        isDisabled: boolean;
        className: string;
    }
    interface ITimeCellValue {
        text: string;
        value: number;
        isDisabled: boolean;
        className: string;
    }
}
