import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import YearPanel from './year/YearPanel';
import PanelFooter from './common/PanelFooter';
import { formatDate, parseDate, dayStart } from './utils';
import { CURRENT, noop, popPositionMap, commonProps } from './constants';
import Icon from '../icon';
function getYear(val) {
    if (val instanceof Date) {
        return val.getFullYear();
    }
    return val;
}
function extractStateFromProps(props) {
    var showPlaceholder;
    var selected;
    var actived;
    var format = props.format, value = props.value, defaultValue = props.defaultValue;
    if (value) {
        var tmp = parseDate("" + value, format);
        if (tmp) {
            showPlaceholder = false;
            selected = actived = tmp;
        }
        else {
            console.warn("date and format don't match.");
            showPlaceholder = true;
            actived = dayStart();
        }
    }
    else {
        showPlaceholder = true;
        if (defaultValue) {
            actived = parseDate("" + defaultValue, format);
        }
        else {
            actived = dayStart();
        }
    }
    return {
        value: selected && formatDate(selected, format),
        actived: actived,
        selected: selected,
        openPanel: false,
        showPlaceholder: showPlaceholder,
        prevProps: props,
    };
}
var YearPicker = (function (_super) {
    __extends(YearPicker, _super);
    function YearPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.picker = null;
        _this.onChangeYear = function (val) {
            var actived = _this.state.actived;
            var acp = new Date(actived);
            acp.setFullYear(val);
            _this.setState({
                actived: acp,
            });
        };
        _this.onSelectYear = function (val) {
            if (_this.isDisabled(val))
                return;
            var _a = _this, _b = _a.props, isFooterVisible = _b.isFooterVisible, onChange = _b.onChange, actived = _a.state.actived;
            var acp = new Date(actived);
            acp.setFullYear(val);
            if (!isFooterVisible) {
                _this.setState({
                    value: acp,
                    selected: acp,
                    openPanel: false,
                    showPlaceholder: false,
                });
                onChange("" + val);
            }
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange('');
        };
        _this.onConfirm = function () {
            var _a = _this, _b = _a.props, format = _b.format, onChange = _b.onChange, selected = _a.state.selected;
            var value = '';
            if (selected) {
                value = formatDate(selected, format);
            }
            _this.setState({
                value: value,
                openPanel: false,
                showPlaceholder: false,
            });
            onChange(value);
        };
        _this.isDisabled = function (val) {
            var _a = _this.props, disabledDate = _a.disabledDate, min = _a.min, max = _a.max;
            if (disabledDate && disabledDate(val))
                return true;
            if (min && +val < +getYear(min))
                return true;
            if (max && +val > +getYear(max))
                return true;
            return false;
        };
        _this.togglePicker = function () {
            var _a = _this.props, onOpen = _a.onOpen, onClose = _a.onClose, disabled = _a.disabled;
            var openPanel = !_this.state.openPanel;
            if (disabled)
                return;
            openPanel ? onOpen && onOpen() : onClose && onClose();
            _this.setState({
                openPanel: !_this.state.openPanel,
            });
        };
        _this.state = extractStateFromProps(props);
        return _this;
    }
    YearPicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    YearPicker.prototype.renderPicker = function () {
        var _this = this;
        var _a = this, state = _a.state, props = _a.props;
        var yearPicker;
        if (state.openPanel) {
            yearPicker = (React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement("div", { className: "year-picker", ref: function (ref) { return (_this.picker = ref); }, "data-zv": '7.4.3' },
                React.createElement(YearPanel, { actived: state.actived, selected: state.selected, onChange: _this.onChangeYear, onSelect: _this.onSelectYear, disabledDate: _this.isDisabled, i18n: i18n }),
                props.needConfirm && (React.createElement(PanelFooter, { buttonText: props.confirmText || i18n.confirm, linkText: i18n.current.year, linkCls: "link--current", onClickLink: function () { return _this.onSelectYear(CURRENT); }, onClickButton: _this.onConfirm })))); }));
        }
        return yearPicker;
    };
    YearPicker.prototype.render = function () {
        var _a = this, _b = _a.props, className = _b.className, disabled = _b.disabled, name = _b.name, placeholder = _b.placeholder, popPosition = _b.popPosition, prefix = _b.prefix, width = _b.width, canClear = _b.canClear, autoComplete = _b.autoComplete, _c = _a.state, openPanel = _c.openPanel, showPlaceholder = _c.showPlaceholder, value = _c.value;
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-year-picker", className);
        var inputCls = cx({
            'picker-input': true,
            'picker-input--show-clear-icon': canClear && !showPlaceholder,
            'picker-input--disabled': disabled,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Popover, { cushion: 5, visible: openPanel, onVisibleChange: this.togglePicker, className: prefix + "-datetime-picker-popover " + className + "-popover", position: popPositionMap[popPosition.toLowerCase()] },
                React.createElement(Popover.Trigger.Click, null,
                    React.createElement("div", { style: widthStyle, className: inputCls, "data-zv": '7.4.3' },
                        React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement(Input, { name: name, placeholder: placeholder || i18n.year, value: value || '', onChange: noop, disabled: disabled, autoComplete: autoComplete })); }),
                        React.createElement(Icon, { className: "picker-input--icon", type: "calendar-o" }),
                        canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: this.onClearInput })))),
                React.createElement(Popover.Content, null, this.renderPicker()))));
    };
    YearPicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '', format: 'YYYY', needConfirm: false });
    return YearPicker;
}(PureComponent));
export { YearPicker };
export default YearPicker;
