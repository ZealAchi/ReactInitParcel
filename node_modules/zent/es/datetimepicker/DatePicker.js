import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import DatePanel from './date/DatePanel';
import PanelFooter from './common/PanelFooter';
import { goMonths, setSameDate, formatDate, parseDate, dayStart, dayEnd, setTime, goDays, goYears, } from './utils';
import { CURRENT_DAY, timeFnMap, noop, popPositionMap, commonProps, } from './constants';
import Icon from '../icon';
function extractStateFromProps(props) {
    var selected;
    var actived;
    var showPlaceholder;
    var openPanel = props.openPanel, value = props.value, format = props.format, defaultValue = props.defaultValue, defaultTime = props.defaultTime;
    if (value) {
        var tmp = parseDate(value, format);
        if (tmp) {
            showPlaceholder = false;
            selected = tmp;
            actived = setTime(tmp);
        }
        else {
            console.warn('date and format mismatch');
            showPlaceholder = true;
            actived = dayStart();
        }
    }
    else {
        showPlaceholder = true;
        if (defaultValue) {
            actived = parseDate(defaultValue, format);
        }
        else {
            actived = dayStart();
        }
        actived = parseDate(actived, format);
    }
    if (defaultTime) {
        actived = setTime(actived, defaultTime);
    }
    return {
        value: selected && formatDate(selected, format),
        actived: actived,
        selected: selected,
        activedTime: selected || actived,
        openPanel: openPanel,
        showPlaceholder: showPlaceholder,
        prevProps: props,
    };
}
var DatePicker = (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker(props) {
        var _this = _super.call(this, props) || this;
        _this.retType = 'string';
        _this.getDate = function () {
            return _this.state.actived;
        };
        _this.onChangeDate = function (val) {
            _this.setState({
                actived: val,
            });
        };
        _this.onSelectDate = function (val) {
            var _a = _this.props, onClick = _a.onClick, min = _a.min, format = _a.format;
            var activedTime = _this.state.activedTime;
            if (_this.isDisabled(val))
                return;
            activedTime = setSameDate(activedTime, val);
            if (min) {
                var minDate = parseDate(min, format);
                if (activedTime < minDate) {
                    activedTime = new Date(minDate);
                }
            }
            _this.setState({
                actived: val,
                selected: val,
                activedTime: activedTime,
            }, function () {
                if (!_this.isFooterShow) {
                    _this.onConfirm();
                }
            });
            onClick && onClick(val);
        };
        _this.onChangeTime = function (val, type) {
            var fn = timeFnMap[type];
            var tmp = new Date(_this.state.activedTime);
            tmp[fn](val);
            _this.setState({
                activedTime: tmp,
            });
        };
        _this.onChangeMonth = function (type) {
            var typeMap = {
                prev: -1,
                next: 1,
            };
            return function () {
                var actived = _this.state.actived;
                var acp = goMonths(actived, typeMap[type]);
                _this.setState({
                    actived: acp,
                });
            };
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange('');
        };
        _this.getReturnValue = function (date) {
            var format = _this.props.format;
            if (_this.retType === 'number') {
                return date.getTime();
            }
            if (_this.retType === 'date') {
                return date;
            }
            return formatDate(date, format);
        };
        _this.onConfirm = function () {
            var _a = _this.state, selected = _a.selected, activedTime = _a.activedTime;
            var _b = _this.props, min = _b.min, format = _b.format, showTime = _b.showTime, onClose = _b.onClose, onChange = _b.onChange, onBeforeConfirm = _b.onBeforeConfirm;
            if (onBeforeConfirm && !onBeforeConfirm())
                return;
            var tmp = selected || dayStart();
            if (_this.isDisabled(tmp))
                return;
            if (showTime) {
                tmp = new Date(tmp.getFullYear(), tmp.getMonth(), tmp.getDate(), activedTime.getHours(), activedTime.getMinutes(), activedTime.getSeconds());
            }
            if (min) {
                var minDate = parseDate(min, format);
                if (tmp < minDate) {
                    tmp = new Date(minDate);
                }
            }
            _this.setState({
                value: formatDate(tmp, format),
                openPanel: false,
                showPlaceholder: false,
            });
            var ret = _this.getReturnValue(tmp);
            onChange(ret);
            onClose && onClose();
        };
        _this.isDisabled = function (val) {
            var _a = _this.props, disabledDate = _a.disabledDate, min = _a.min, max = _a.max, format = _a.format;
            if (disabledDate && disabledDate(val))
                return true;
            if (min && dayEnd(val) < parseDate(min, format))
                return true;
            if (max && dayStart(val) > parseDate(max, format))
                return true;
            return false;
        };
        _this.togglePicker = function () {
            var _a = _this.props, onOpen = _a.onOpen, onClose = _a.onClose, disabled = _a.disabled;
            var openPanel = !_this.state.openPanel;
            if (disabled)
                return;
            openPanel ? onOpen && onOpen() : onClose && onClose();
            _this.setState({
                openPanel: openPanel,
            });
        };
        var isFooterVisible = props.isFooterVisible, showTime = props.showTime, value = props.value, valueType = props.valueType;
        if (valueType) {
            _this.retType = valueType.toLowerCase();
        }
        else if (value) {
            if (typeof value === 'number')
                _this.retType = 'number';
            if (value instanceof Date)
                _this.retType = 'date';
        }
        _this.state = extractStateFromProps(props);
        _this.isFooterShow = showTime || isFooterVisible || false;
        return _this;
    }
    DatePicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    DatePicker.prototype.renderPicker = function (i18n) {
        var _this = this;
        var _a = this, _b = _a.props, confirmText = _b.confirmText, disabledTime = _b.disabledTime, format = _b.format, max = _b.max, min = _b.min, _c = _a.state, actived = _c.actived, activedTime = _c.activedTime, openPanel = _c.openPanel, selected = _c.selected;
        var showTime;
        var datePicker;
        if (this.props.showTime) {
            showTime = {
                min: min && parseDate(min, format),
                max: max && parseDate(max, format),
                actived: activedTime,
                disabledTime: disabledTime && disabledTime(),
                onChange: this.onChangeTime,
            };
        }
        if (openPanel) {
            var isDisabled = this.isDisabled(CURRENT_DAY);
            var linkCls = cx({
                'link--current': true,
                'link--disabled': isDisabled,
            });
            var datePickerCls = cx({
                'date-picker': true,
                small: this.isFooterShow,
            });
            datePicker = (React.createElement("div", { className: datePickerCls, "data-zv": '7.4.3' },
                React.createElement(DatePanel, { showTime: showTime, actived: actived, selected: selected, disabledDate: this.isDisabled, onSelect: this.onSelectDate, onChange: this.onChangeDate, onPrev: this.onChangeMonth('prev'), onNext: this.onChangeMonth('next'), i18n: i18n }),
                this.isFooterShow ? (React.createElement(PanelFooter, { buttonText: confirmText || i18n.confirm, onClickButton: this.onConfirm, linkText: i18n.current.date, linkCls: linkCls, showLink: !isDisabled, onClickLink: function () { return _this.onSelectDate(CURRENT_DAY); } })) : null));
        }
        return datePicker;
    };
    DatePicker.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, prefix = _b.prefix, className = _b.className, disabled = _b.disabled, width = _b.width, popPosition = _b.popPosition, name = _b.name, placeholder = _b.placeholder, canClear = _b.canClear, autoComplete = _b.autoComplete, _c = _a.state, showPlaceholder = _c.showPlaceholder, openPanel = _c.openPanel, value = _c.value;
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-date-picker", className);
        var inputCls = cx({
            'picker-input': true,
            'picker-input--show-clear-icon': canClear && !showPlaceholder,
            'picker-input--disabled': disabled,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement(Popover, { cushion: 5, visible: openPanel, onVisibleChange: _this.togglePicker, className: prefix + "-datetime-picker-popover " + className + "-popover", position: popPositionMap[popPosition.toLowerCase()] },
                React.createElement(Popover.Trigger.Click, null,
                    React.createElement("div", { style: widthStyle, className: inputCls, onClick: function (evt) { return evt.preventDefault(); }, "data-zv": '7.4.3' },
                        React.createElement(Input, { name: name, placeholder: placeholder || i18n.date, value: value || '', onChange: noop, disabled: disabled, autoComplete: autoComplete }),
                        React.createElement(Icon, { className: "picker-input--icon", type: "calendar-o" }),
                        canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: _this.onClearInput })))),
                React.createElement(Popover.Content, null, _this.renderPicker(i18n)))); })));
    };
    DatePicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '' });
    DatePicker.goDays = goDays;
    DatePicker.goMonths = goMonths;
    DatePicker.goYears = goYears;
    DatePicker.setTime = setTime;
    DatePicker.dayStart = dayStart;
    DatePicker.dayEnd = dayEnd;
    DatePicker.parseDate = parseDate;
    DatePicker.formatDate = formatDate;
    return DatePicker;
}(PureComponent));
export { DatePicker };
export default DatePicker;
