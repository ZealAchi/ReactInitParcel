import { PureComponent } from 'react';
import { noop } from './constants';
import { DatePickers } from './common/types';
declare enum TIME_KEY {
    HOUR = "hour",
    MINUTE = "minute",
    SECOND = "second"
}
export interface ITimePickerProps extends DatePickers.ICommonProps {
    isFooterVisible?: boolean;
    showSecond?: boolean;
    hourStep?: number;
    minuteStep?: number;
    secondStep?: number;
    onBeforeConfirm?: () => boolean;
    onBeforeClear?: () => boolean;
    disabledTime?: () => DatePickers.IDisabledTime;
}
export interface ITimePickerState {
    value: Date;
    tabKey?: TIME_KEY | null;
    isPanelOpen: boolean;
    prevProps: ITimePickerProps;
}
export declare class TimePicker extends PureComponent<ITimePickerProps, ITimePickerState> {
    static defaultProps: {
        placeholder: string;
        format: string;
        isFooterVisible: boolean;
        hourStep: number;
        minuteStep: number;
        secondStep: number;
        disabledTime: () => void;
        prefix: string;
        confirmText: string;
        popPosition: string;
        openPanel: boolean;
        onChange: typeof noop;
        canClear: boolean;
        autoComplete: string;
    };
    retType: string;
    disabledTime: Partial<DatePickers.IDisabledTime>;
    static getDerivedStateFromProps(props: ITimePickerProps, state: ITimePickerState): Partial<ITimePickerState> | null;
    constructor(props: ITimePickerProps);
    onChangeTime: (val: any, type: any) => void;
    onClearInput: (evt: any) => void;
    getReturnValue: (date: any) => any;
    onConfirm: () => void;
    isCellDisabled: (type: any) => any;
    togglePicker: () => void;
    switchTab: (tabKey: any) => void;
    resetTime: () => void;
    renderPanelContent: (i18n: any) => JSX.Element;
    renderPicker: (i18n: any) => JSX.Element;
    render(): JSX.Element;
}
export default TimePicker;
