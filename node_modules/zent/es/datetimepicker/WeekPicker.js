import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import startOfWeek from 'date-fns/startOfWeek';
import endOfWeek from 'date-fns/endOfWeek';
import addDays from 'date-fns/addDays';
import subDays from 'date-fns/subDays';
import differenceInCalendarDays from 'date-fns/differenceInCalendarDays';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import DatePanel from './date/DatePanel';
import PanelFooter from './common/PanelFooter';
import { goMonths, formatDate, parseDate, dayStart, dayEnd, setTime, isSameDate, } from './utils';
import { CURRENT_DAY, noop, popPositionMap, commonProps } from './constants';
import Icon from '../icon';
function getSelectedWeek(val, start, isDisabled, props) {
    var weekStart = startOfWeek(val, {
        weekStartsOn: start,
    });
    var weekEnd = endOfWeek(val, {
        weekStartsOn: start,
    });
    while (isDisabled(weekStart, props) &&
        (weekStart <= weekEnd || isSameDate(weekStart, weekEnd))) {
        weekStart = addDays(weekStart, 1);
    }
    while (isDisabled(weekEnd, props) &&
        (weekEnd >= weekStart || isSameDate(weekEnd, weekStart))) {
        weekEnd = subDays(weekEnd, 1);
    }
    if (differenceInCalendarDays(weekEnd, weekStart) < 0) {
        return [];
    }
    return [weekStart, weekEnd];
}
function isDisabled(val, props) {
    var disabledDate = props.disabledDate, min = props.min, max = props.max, format = props.format;
    if (disabledDate && disabledDate(val))
        return true;
    if (min && dayEnd(val) < parseDate(min, format))
        return true;
    if (max && dayStart(val) > parseDate(max, format))
        return true;
    return false;
}
function extractStateFromProps(props) {
    var selected;
    var actived;
    var showPlaceholder;
    var _a = props.openPanel, openPanel = _a === void 0 ? false : _a, value = props.value, format = props.format, defaultValue = props.defaultValue, startDay = props.startDay;
    var hasValue = Array.isArray(value) ? value[0] : value;
    if (hasValue) {
        var tmp = parseDate(hasValue, format);
        if (tmp) {
            showPlaceholder = false;
            selected = getSelectedWeek(tmp, startDay, function (val) { return isDisabled(val, props); }, props);
            actived = setTime(tmp);
        }
        else {
            console.warn("date and format don't match.");
            showPlaceholder = true;
            actived = dayStart();
        }
    }
    else {
        showPlaceholder = true;
        if (defaultValue) {
            actived = parseDate(defaultValue, format);
        }
        else {
            actived = dayStart();
        }
        actived = parseDate(actived, format);
    }
    var ret;
    if (selected) {
        ret = selected.map(function (item) { return formatDate(item, format); });
    }
    return {
        value: ret,
        actived: actived,
        selected: selected,
        openPanel: openPanel,
        showPlaceholder: showPlaceholder,
        prevProps: props,
    };
}
var WeekPicker = (function (_super) {
    __extends(WeekPicker, _super);
    function WeekPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.retType = 'string';
        _this.onChangeDate = function (val) {
            _this.setState({
                actived: val,
            });
        };
        _this.onHover = function (val) {
            var startDay = _this.props.startDay;
            var week = [
                startOfWeek(val, {
                    weekStartsOn: startDay,
                }),
                endOfWeek(val, {
                    weekStartsOn: startDay,
                }),
            ];
            _this.setState({
                range: week,
            });
        };
        _this.onSelectDate = function (val) {
            var _a = _this.props, onClick = _a.onClick, startDay = _a.startDay;
            var week = getSelectedWeek(val, startDay, isDisabled, _this.props);
            _this.setState({
                selected: week,
            }, function () {
                if (!_this.isFooterShow) {
                    _this.onConfirm();
                }
            });
            onClick && onClick(week);
        };
        _this.onChangeMonth = function (type) {
            var typeMap = {
                prev: -1,
                next: 1,
            };
            return function () {
                var actived = _this.state.actived;
                var acp = goMonths(actived, typeMap[type]);
                _this.setState({
                    actived: acp,
                });
            };
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange([]);
        };
        _this.onMouseOut = function (evt) {
            evt.stopPropagation();
            _this.setState({
                range: [],
            });
        };
        _this.getReturnValue = function (date) {
            var format = _this.props.format;
            if (_this.retType === 'number') {
                return date.getTime();
            }
            if (_this.retType === 'date') {
                return date;
            }
            return formatDate(date, format);
        };
        _this.onConfirm = function () {
            var selected = _this.state.selected;
            var _a = _this.props, format = _a.format, onClose = _a.onClose, onChange = _a.onChange;
            if (selected.length === 0) {
                return;
            }
            var tmp = selected.slice();
            if (isDisabled(tmp[0] || isDisabled(tmp[1], _this.props), _this.props)) {
                return;
            }
            tmp = [dayStart(tmp[0]), dayEnd(tmp[1])];
            var value = tmp.map(function (item) { return formatDate(item, format); });
            _this.setState({
                value: value,
                openPanel: false,
                showPlaceholder: false,
                range: [],
            });
            var ret = tmp.map(_this.getReturnValue);
            onChange(ret);
            onClose && onClose();
        };
        _this.togglePicker = function () {
            var _a = _this.props, onOpen = _a.onOpen, onClose = _a.onClose, disabled = _a.disabled;
            var openPanel = !_this.state.openPanel;
            if (disabled)
                return;
            openPanel ? onOpen && onOpen() : onClose && onClose();
            _this.setState({
                openPanel: openPanel,
            });
        };
        var value = props.value, valueType = props.valueType, showTime = props.showTime, isFooterVisible = props.isFooterVisible;
        if (valueType) {
            _this.retType = valueType.toLowerCase();
        }
        else if (value) {
            if (typeof value === 'number')
                _this.retType = 'number';
            if (value instanceof Date)
                _this.retType = 'date';
        }
        _this.state = extractStateFromProps(props);
        _this.isFooterShow = showTime || isFooterVisible || false;
        return _this;
    }
    WeekPicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    WeekPicker.prototype.renderPicker = function (i18n) {
        var _this = this;
        var _a = this, confirmText = _a.props.confirmText, _b = _a.state, openPanel = _b.openPanel, range = _b.range, actived = _b.actived, selected = _b.selected;
        var weekPicker;
        if (openPanel) {
            var disabled = isDisabled(CURRENT_DAY, this.props);
            var linkCls = cx({
                'link--current': true,
                'link--disabled': disabled,
            });
            var weekPickerCls = cx({
                'week-picker': true,
                small: this.isFooterShow,
            });
            weekPicker = (React.createElement("div", { className: weekPickerCls, "data-zv": '7.4.3' },
                React.createElement("div", { onMouseOut: this.onMouseOut, "data-zv": '7.4.3' },
                    React.createElement(DatePanel, { range: range, actived: actived, selected: selected, disabledDate: function (val) { return isDisabled(val, _this.props); }, onHover: this.onHover, onSelect: this.onSelectDate, onChange: this.onChangeDate, onPrev: this.onChangeMonth('prev'), onNext: this.onChangeMonth('next'), disableSelectedHighlight: true, i18n: i18n })),
                this.isFooterShow ? (React.createElement(PanelFooter, { buttonText: confirmText || i18n.confirm, onClickButton: this.onConfirm, linkText: i18n.current.week, linkCls: linkCls, showLink: !disabled, onClickLink: function () { return _this.onSelectDate(CURRENT_DAY); } })) : null));
        }
        return weekPicker;
    };
    WeekPicker.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, className = _b.className, disabled = _b.disabled, name = _b.name, placeholder = _b.placeholder, popPosition = _b.popPosition, prefix = _b.prefix, width = _b.width, canClear = _b.canClear, autoComplete = _b.autoComplete, _c = _a.state, openPanel = _c.openPanel, showPlaceholder = _c.showPlaceholder, value = _c.value;
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-week-picker", className);
        var inputCls = cx('picker-input', 'week-picker-input', {
            'picker-input--show-clear-icon': canClear && !showPlaceholder,
            'picker-input--disabled': disabled,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) { return (React.createElement(Popover, { cushion: 5, visible: openPanel, onVisibleChange: _this.togglePicker, className: prefix + "-datetime-picker-popover " + className + "-popover", position: popPositionMap[popPosition.toLowerCase()] },
                React.createElement(Popover.Trigger.Click, null,
                    React.createElement("div", { style: widthStyle, className: inputCls, onClick: function (evt) { return evt.preventDefault(); }, "data-zv": '7.4.3' },
                        React.createElement(Input, { name: name, placeholder: placeholder || i18n.week, value: value ? value.join(" " + i18n.to + " ") : '', onChange: noop, disabled: disabled, autoComplete: autoComplete }),
                        React.createElement(Icon, { className: "picker-input--icon", type: "calendar-o" }),
                        canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: _this.onClearInput })))),
                React.createElement(Popover.Content, null, _this.renderPicker(i18n)))); })));
    };
    WeekPicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '', startDay: 1 });
    return WeekPicker;
}(PureComponent));
export { WeekPicker };
export default WeekPicker;
