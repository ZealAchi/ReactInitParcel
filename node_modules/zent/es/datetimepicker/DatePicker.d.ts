import { PureComponent } from 'react';
import { formatDate, parseDate, dayStart, dayEnd, setTime } from './utils';
import { noop } from './constants';
import { DatePickers } from './common/types';
export interface IDatePickerProps extends DatePickers.ICommonProps {
    isFooterVisible?: boolean;
    showTime?: boolean;
    disabledTime?: () => DatePickers.IDisabledTime;
    onBeforeConfirm?: () => boolean;
    onBeforeClear?: () => boolean;
}
export declare class DatePicker extends PureComponent<IDatePickerProps, any> {
    static defaultProps: {
        placeholder: string;
        prefix: string;
        confirmText: string;
        format: string;
        popPosition: string;
        openPanel: boolean;
        onChange: typeof noop;
        isFooterVisible: boolean;
        canClear: boolean;
        autoComplete: string;
    };
    static goDays: (val: any, diff: any) => Date;
    static goMonths: (val: any, diff: any) => Date;
    static goYears: (val: any, diff: any) => Date;
    static setTime: typeof setTime;
    static dayStart: typeof dayStart;
    static dayEnd: typeof dayEnd;
    static parseDate: typeof parseDate;
    static formatDate: typeof formatDate;
    static getDerivedStateFromProps(props: IDatePickerProps, state: any): {
        value: string;
        actived: any;
        selected: any;
        activedTime: any;
        openPanel: boolean;
        showPlaceholder: any;
        prevProps: IDatePickerProps;
    };
    isFooterShow: boolean;
    retType: string;
    constructor(props: IDatePickerProps);
    getDate: () => any;
    onChangeDate: (val: any) => void;
    onSelectDate: (val: any) => void;
    onChangeTime: (val: any, type: any) => void;
    onChangeMonth: (type: any) => () => void;
    onClearInput: (evt: any) => void;
    getReturnValue: (date: any) => any;
    onConfirm: () => void;
    isDisabled: (val: any) => boolean;
    renderPicker(i18n: any): any;
    togglePicker: () => void;
    render(): JSX.Element;
}
export default DatePicker;
