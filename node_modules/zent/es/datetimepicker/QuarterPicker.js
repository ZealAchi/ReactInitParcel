import { __assign, __extends, __spreadArrays } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import getQuarter from 'date-fns/getQuarter';
import Input from '../input';
import Popover from '../popover';
import getWidth from '../utils/getWidth';
import { I18nReceiver as Receiver } from '../i18n';
import QuarterPanel from './quarter/QuarterPanel';
import { dayStart, dayEnd, formatDate, parseDate } from './utils';
import { noop, popPositionMap, commonProps } from './constants';
import Icon from '../icon';
var quarterMonthMap = {
    0: 0,
    1: 3,
    2: 6,
    3: 9,
};
var QUARTER_LAST_YEAR_MAP = {
    0: [3, 0],
    1: [6, 0],
    2: [9, 0],
    3: [12, 0],
};
function getQuarterLastDay(quarter, year) {
    var _a;
    return new ((_a = Date).bind.apply(_a, __spreadArrays([void 0, year], QUARTER_LAST_YEAR_MAP[quarter])))();
}
function extractStateFromProps(props) {
    var showPlaceholder;
    var selected;
    var actived;
    var format = props.format, value = props.value, defaultValue = props.defaultValue;
    var val = Array.isArray(value) ? value[0] : value;
    if (val) {
        var tmp = parseDate(val, format);
        if (tmp) {
            showPlaceholder = false;
            selected = actived = tmp;
        }
        else {
            console.warn("date and format don't match.");
            showPlaceholder = true;
            actived = dayStart();
        }
    }
    else {
        showPlaceholder = true;
        if (defaultValue) {
            actived = parseDate(defaultValue, format);
        }
        else {
            actived = dayStart();
        }
    }
    var quarter;
    if (selected) {
        quarter = getQuarter(selected) - 1;
    }
    return {
        value: quarter,
        actived: actived,
        selected: selected,
        openPanel: false,
        showPlaceholder: showPlaceholder,
        prevProps: props,
    };
}
var QuarterPicker = (function (_super) {
    __extends(QuarterPicker, _super);
    function QuarterPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.retType = 'string';
        _this.picker = null;
        _this.getReturnValue = function (date) {
            var format = _this.props.format;
            if (_this.retType === 'number') {
                return date.getTime();
            }
            if (_this.retType === 'date') {
                return date;
            }
            return formatDate(date, format);
        };
        _this.onChangeQuarter = function (val) {
            _this.setState({
                actived: val,
            });
        };
        _this.onSelectQuarter = function (quarter) {
            var actived = _this.state.actived;
            var onChange = _this.props.onChange;
            var year = actived.getFullYear();
            var month = quarterMonthMap[quarter];
            if (_this.isDisabled(quarter))
                return;
            var begin = new Date(year, month, 1);
            var end = getQuarterLastDay(quarter, year);
            var ret = [
                dayStart(begin),
                dayEnd(end),
            ];
            _this.setState({
                value: quarter,
                selected: begin,
                actived: begin,
                openPanel: false,
                showPlaceholder: false,
            });
            onChange(ret.map(_this.getReturnValue));
        };
        _this.onClearInput = function (evt) {
            evt.stopPropagation();
            var _a = _this.props, onChange = _a.onChange, onBeforeClear = _a.onBeforeClear, canClear = _a.canClear;
            if (onBeforeClear && !onBeforeClear())
                return;
            if (!canClear)
                return;
            onChange([]);
        };
        _this.isDisabled = function (quarter) {
            var _a = _this.props, disabledDate = _a.disabledDate, min = _a.min, max = _a.max, format = _a.format;
            var actived = _this.state.actived;
            var year = actived.getFullYear();
            var month = quarterMonthMap[quarter];
            var begin = dayStart(new Date(year, month, 1));
            var end = dayEnd(getQuarterLastDay(quarter, year));
            var ret = [begin, end];
            if (disabledDate)
                return disabledDate(ret);
            if (min && end < parseDate(min, format))
                return true;
            if (max && begin > parseDate(max, format))
                return true;
            return false;
        };
        _this.togglePicker = function () {
            var disabled = _this.props.disabled;
            var openPanel = !_this.state.openPanel;
            if (disabled)
                return;
            _this.setState({
                openPanel: openPanel,
            });
        };
        _this.state = extractStateFromProps(props);
        var value = props.value, valueType = props.valueType;
        if (valueType) {
            _this.retType = valueType.toLowerCase();
        }
        else if (value) {
            if (typeof value === 'number')
                _this.retType = 'number';
            if (value instanceof Date)
                _this.retType = 'date';
        }
        return _this;
    }
    QuarterPicker.getDerivedStateFromProps = function (props, state) {
        if (props !== state.prevProps) {
            return extractStateFromProps(props);
        }
        return null;
    };
    QuarterPicker.prototype.renderPicker = function (i18n) {
        var _this = this;
        var _a = this.state, openPanel = _a.openPanel, actived = _a.actived, selected = _a.selected;
        var quarterPicker;
        if (openPanel) {
            quarterPicker = (React.createElement("div", { className: "quarter-picker", ref: function (ref) { return (_this.picker = ref); }, "data-zv": '7.4.3' },
                React.createElement(QuarterPanel, { actived: actived, selected: selected, onChange: this.onChangeQuarter, onSelect: this.onSelectQuarter, disabledDate: this.isDisabled, i18n: i18n })));
        }
        return quarterPicker;
    };
    QuarterPicker.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, className = _b.className, disabled = _b.disabled, name = _b.name, placeholder = _b.placeholder, popPosition = _b.popPosition, prefix = _b.prefix, width = _b.width, canClear = _b.canClear, autoComplete = _b.autoComplete, _c = _a.state, openPanel = _c.openPanel, selected = _c.selected, showPlaceholder = _c.showPlaceholder, value = _c.value;
        var wrapperCls = cx(prefix + "-datetime-picker", prefix + "-quarter-picker", className);
        var inputCls = cx({
            'picker-input': true,
            'picker-input--show-clear-icon': canClear && !showPlaceholder,
            'picker-input--disabled': disabled,
        });
        var widthStyle = getWidth(width);
        return (React.createElement("div", { style: widthStyle, className: wrapperCls, "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "TimePicker" }, function (i18n) {
                var inputVal = selected
                    ? i18n.panel.yearQuarterName({
                        year: selected.getFullYear(),
                        quarter: value,
                    })
                    : '';
                var placeholderText = placeholder || i18n.quarter;
                return (React.createElement(Popover, { cushion: 5, visible: openPanel, onVisibleChange: _this.togglePicker, className: prefix + "-datetime-picker-popover " + className + "-popover", position: popPositionMap[popPosition.toLowerCase()] },
                    React.createElement(Popover.Trigger.Click, null,
                        React.createElement("div", { style: widthStyle, className: inputCls, "data-zv": '7.4.3' },
                            React.createElement(Input, { name: name, placeholder: placeholderText, value: inputVal, onChange: noop, disabled: disabled, autoComplete: autoComplete }),
                            React.createElement(Icon, { className: "picker-input--icon", type: "calendar-o" }),
                            canClear && (React.createElement(Icon, { className: "picker-input--icon", type: "close-circle", onClick: _this.onClearInput })))),
                    React.createElement(Popover.Content, null, _this.renderPicker(i18n))));
            })));
    };
    QuarterPicker.defaultProps = __assign(__assign({}, commonProps), { placeholder: '', format: 'YYYY-MM-DD' });
    return QuarterPicker;
}(PureComponent));
export { QuarterPicker };
export default QuarterPicker;
