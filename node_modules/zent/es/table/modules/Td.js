import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import Checkbox from '../../checkbox';
import Radio from '../../radio';
import helper from '../helper';
var Td = (function (_super) {
    __extends(Td, _super);
    function Td() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onSelect = function (e) {
            var isChecked = e.target.checked;
            var _a = _this.props, selection = _a.selection, data = _a.data, rowKey = _a.rowKey;
            selection.onSelect(data[rowKey], isChecked);
        };
        return _this;
    }
    Td.prototype.renderContent = function () {
        var _a = this.props, column = _a.column, data = _a.data, pos = _a.pos;
        var name = column.name, _b = column.bodyRender, bodyRender = _b === void 0 ? data[name] : _b;
        var isReactComponent = helper.isReactComponent(bodyRender);
        if (typeof bodyRender === 'function') {
            var BodyRender = bodyRender;
            return isReactComponent ? (React.createElement(BodyRender, { data: data, name: name, pos: pos })) : (bodyRender(data, pos, name));
        }
        return bodyRender;
    };
    Td.prototype.renderCheckBox = function (data, rowKey, selection) {
        var needSelect = selection.needSelect, canSelect = selection.canSelect, isSingleSelection = selection.isSingleSelection;
        if (needSelect) {
            if (isSingleSelection) {
                return (React.createElement(Radio, { className: "select-check", checked: selection.selectedRowKeys.indexOf(data[rowKey]) !== -1, disabled: !canSelect, onChange: this.onSelect }));
            }
            return (React.createElement(Checkbox, { className: "select-check", checked: selection.selectedRowKeys.indexOf(data[rowKey]) !== -1, indeterminate: selection.indeterminateRowKeys.indexOf(data[rowKey]) !== -1, disabled: !canSelect, onChange: this.onSelect }));
        }
        return null;
    };
    Td.prototype.render = function () {
        var _a = this.props, column = _a.column, selection = _a.selection, data = _a.data, rowKey = _a.rowKey;
        var textAlign = column.textAlign, isMoney = column.isMoney;
        var needSelect = selection.needSelect;
        var width = helper.getCalculatedWidth(column.width);
        var className = cx('cell', column.className, {
            'cell--selection': needSelect,
            'cell--money': isMoney,
        });
        var styleObj = {};
        if (width) {
            styleObj = {
                width: width,
                flex: '0 1 auto',
            };
        }
        if (helper.getAlignClass(textAlign) !== '') {
            className += " cell--" + helper.getAlignClass(textAlign);
        }
        return (React.createElement("div", { className: className, style: styleObj, "data-zv": '7.4.3' },
            this.renderCheckBox(data, rowKey, selection),
            React.createElement("div", { className: "cell__child-container", "data-zv": '7.4.3' }, this.renderContent())));
    };
    return Td;
}(PureComponent));
export default Td;
