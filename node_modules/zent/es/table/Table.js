import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import * as ReactDOM from 'react-dom';
import throttle from '../utils/throttle';
import { I18nReceiver as Receiver } from '../i18n';
import isBrowser from '../utils/isBrowser';
import uniq from '../utils/uniq';
import BlockLoading from '../loading/BlockLoading';
import Head from './modules/Head';
import Body from './modules/Body';
import Foot from './modules/Foot';
import helper from './helper';
var Table = (function (_super) {
    __extends(Table, _super);
    function Table(props) {
        var _this = _super.call(this, props) || this;
        _this.foot = null;
        _this.selectedRowKeys = [];
        _this.selectedRows = [];
        _this.head = null;
        _this.onChange = function (conf) {
            _this.setState(conf);
            _this.wrapPropsOnChange(conf);
        };
        _this.onSort = function (conf) {
            _this.wrapPropsOnChange(conf);
        };
        _this.onPageChange = function (data) {
            _this.wrapPropsOnChange(data);
            if (_this.props.autoScroll) {
                _this.scrollToTop(400);
            }
        };
        _this.onSelectAllRows = function (isSelect) {
            var rowKeysCurrentPage = [];
            var rowsCurrentPage = [];
            var _a = _this.props, rowKey = _a.rowKey, datasets = _a.datasets, selection = _a.selection, _b = _a.getRowConf, getRowConf = _b === void 0 ? function () {
                return { canSelect: true };
            } : _b;
            _this.setSelection();
            var allRowKeys = _this.selectedRowKeys;
            var allRows = _this.selectedRows;
            for (var i = 0, len = datasets.length; i < len; i++) {
                var _c = getRowConf(datasets[i], i).canSelect, canSelect = _c === void 0 ? true : _c;
                if (canSelect) {
                    rowKeysCurrentPage.push(datasets[i][rowKey]);
                    rowsCurrentPage.push(datasets[i]);
                }
            }
            if (isSelect) {
                if (_this.props.selection.needCrossPage) {
                    allRowKeys = uniq(allRowKeys.concat(rowKeysCurrentPage));
                    allRows = uniq(allRows.concat(rowsCurrentPage), rowKey);
                }
                else {
                    allRowKeys = rowKeysCurrentPage;
                    allRows = rowsCurrentPage;
                }
            }
            else {
                if (_this.props.selection.needCrossPage) {
                    allRowKeys = allRowKeys.filter(function (k) { return rowKeysCurrentPage.indexOf(k) === -1; });
                    allRows = allRows.filter(function (r) {
                        var key = r[rowKey];
                        return rowsCurrentPage.every(function (p) { return p[rowKey] !== key; });
                    });
                }
                else {
                    allRowKeys = [];
                    allRows = [];
                }
            }
            _this.selectedRowKeys = allRowKeys;
            _this.selectedRows = allRows;
            selection.onSelect(_this.selectedRowKeys, _this.selectedRows, null);
        };
        _this.onSelectOneRow = function (rowKey, isSelect) {
            var selection = _this.props.selection;
            _this.setSelection();
            var index = _this.selectedRowKeys.indexOf(rowKey);
            var isSingleSelection = selection.isSingleSelection || false;
            if (isSingleSelection) {
                if (isSelect) {
                    _this.selectedRowKeys = [rowKey];
                }
                else {
                    _this.selectedRowKeys = [];
                }
            }
            else if (isSelect && index === -1) {
                _this.selectedRowKeys.push(rowKey);
            }
            else if (index !== -1) {
                _this.selectedRowKeys.splice(index, 1);
            }
            if (!selection.needCrossPage) {
                var _a = _this.props, datasets_1 = _a.datasets, rowKey_1 = _a.rowKey;
                _this.selectedRowKeys = _this.selectedRowKeys.filter(function (k) {
                    return datasets_1.some(function (item) { return item[rowKey_1] === k; });
                });
            }
            _this.selectedRows = _this.getSelectedRowsByKeys(_this.selectedRowKeys);
            var currentRow = isSelect ? _this.getCurrentRow(rowKey) : null;
            selection.onSelect(_this.selectedRowKeys, _this.selectedRows, currentRow);
        };
        _this.state = {
            current: props.pageInfo ? props.pageInfo.current : 1,
            batchComponentsFixed: false,
            placeHolderHeight: false,
            fixStyle: {},
        };
        _this.tableRect = null;
        _this.relativeTop = 0;
        _this.mounted = false;
        return _this;
    }
    Table.prototype.componentWillReceiveProps = function (nextProps) {
        var toggleListener = helper.toggleEventListener(this.props, nextProps);
        toggleListener && this[toggleListener](nextProps);
        this.setState({
            current: nextProps.pageInfo ? nextProps.pageInfo.current : 1,
        });
    };
    Table.prototype.componentDidMount = function () {
        this.mounted = true;
        this.addEventListener(this.props);
    };
    Table.prototype.componentWillUnmount = function () {
        this.mounted = false;
        this.removeEventListener(this.props);
    };
    Table.prototype.addEventListener = function (props) {
        var _this = this;
        if (props.batchComponentsAutoFixed) {
            var batchComponents = props.batchComponents;
            this.setRectParam();
            if (batchComponents && batchComponents.length > 0) {
                this.throttleSetBatchComponents = throttle(function () {
                    _this.setRectParam();
                    _this.toggleBatchComponents();
                }, 100, {
                    immediate: true,
                });
                window.addEventListener('scroll', this.throttleSetBatchComponents, true);
                window.addEventListener('resize', this.throttleSetBatchComponents, true);
            }
        }
    };
    Table.prototype.removeEventListener = function (props) {
        if (props.batchComponentsAutoFixed) {
            window.removeEventListener('scroll', this.throttleSetBatchComponents, true);
            window.removeEventListener('resize', this.throttleSetBatchComponents, true);
        }
    };
    Table.prototype.setRectParam = function () {
        if (!this.mounted) {
            return;
        }
        var node = ReactDOM.findDOMNode(this);
        if (!node) {
            return;
        }
        var rect = node.getBoundingClientRect();
        this.tableRectTop = rect.top;
        this.tableRectHeight = rect.height;
        this.relativeTop =
            this.tableRectTop - document.documentElement.getBoundingClientRect().top;
    };
    Table.prototype.toggleBatchComponents = function () {
        if (!this.mounted) {
            return;
        }
        var needFixedBatchComps = helper.needFixBatchComps(this.isTableInView(), this.isFootInView(), this.props.selection.selectedRowKeys.length > 0, this.state.batchComponentsFixed);
        if (typeof needFixedBatchComps === 'boolean') {
            this.setState({
                batchComponentsFixed: needFixedBatchComps,
            });
        }
    };
    Table.prototype.wrapPropsOnChange = function (conf) {
        if (typeof this.props.onChange !== 'function') {
            throw new Error('请传入一个onChange方法');
        }
        this.props.onChange(conf);
    };
    Table.prototype.setSelection = function () {
        var selection = this.props.selection;
        this.selectedRowKeys = selection.selectedRowKeys.slice(0);
        this.selectedRows = this.getSelectedRowsByKeys(this.selectedRowKeys);
    };
    Table.prototype.getCurrentRow = function (key) {
        var currentRow;
        var self = this;
        if (key) {
            this.props.datasets.forEach(function (item) {
                if (item[self.props.rowKey] === key) {
                    currentRow = item;
                }
            });
        }
        return currentRow;
    };
    Table.prototype.isTableInView = function () {
        var tableY = this.tableRectTop - document.documentElement.getBoundingClientRect().top;
        return (tableY + this.tableRectHeight > window.pageYOffset &&
            tableY <= window.pageYOffset + window.innerHeight);
    };
    Table.prototype.isFootInView = function () {
        var footRect = ReactDOM.findDOMNode(this.foot).getBoundingClientRect();
        var footY = footRect.top - document.documentElement.getBoundingClientRect().top;
        return (footY + footRect.height > window.pageYOffset &&
            footY <= window.pageYOffset + window.innerHeight);
    };
    Table.prototype.getSelectedRowsByKeys = function (rowKeys) {
        var rows = [];
        var self = this;
        var allRows = uniq(this.selectedRows.concat(this.props.datasets), this.props.rowKey);
        allRows.forEach(function (item) {
            if (rowKeys.indexOf(item[self.props.rowKey]) >= 0) {
                rows.push(item);
            }
        });
        return rows;
    };
    Table.prototype.scrollToTop = function (scrollDuration) {
        var _this = this;
        if (!isBrowser)
            return;
        var scrollHeight = window.scrollY;
        var scrollStep = Math.PI / (scrollDuration / 15);
        var cosParameter = scrollHeight / 2;
        var scrollCount = 0;
        var scrollMargin;
        var scrollInterval = setInterval(function () {
            if (window.scrollY > _this.relativeTop) {
                scrollCount += 1;
                scrollMargin =
                    cosParameter - cosParameter * Math.cos(scrollCount * scrollStep);
                window.scrollTo(0, scrollHeight - scrollMargin);
            }
            else {
                clearInterval(scrollInterval);
            }
        }, 16);
    };
    Table.prototype.render = function () {
        var _this = this;
        var _a = this.props, selection = _a.selection, prefix = _a.prefix, columns = _a.columns, className = _a.className, sortBy = _a.sortBy, autoStick = _a.autoStick, sortType = _a.sortType, datasets = _a.datasets, rowKey = _a.rowKey, pageInfo = _a.pageInfo, paginationType = _a.paginationType, emptyLabel = _a.emptyLabel, _b = _a.getRowConf, getRowConf = _b === void 0 ? function () {
            return { canSelect: true, rowClass: '' };
        } : _b, _c = _a.expandation, expandation = _c === void 0 ? null : _c, _d = _a.batchComponents, batchComponents = _d === void 0 ? null : _d;
        var needSelect = selection !== null;
        var isSingleSelection;
        if (selection) {
            isSingleSelection = selection.isSingleSelection || false;
        }
        var selectedRowKeys = [];
        var indeterminateRowKeys = [];
        var canSelectAll = false;
        var isSelectAll = false;
        var isSelectPart = false;
        var canRowSelect = false;
        var needExpand = false;
        var isExpanded;
        var expandRender;
        if (expandation) {
            needExpand = true;
            isExpanded = expandation.isExpanded;
            expandRender = expandation.expandRender;
        }
        if (needSelect) {
            var canSelectRowKeysArr_1 = [];
            datasets.forEach(function (item, index) {
                var _a = getRowConf(item, index).canSelect, canSelect = _a === void 0 ? true : _a;
                if (canSelect) {
                    canSelectRowKeysArr_1.push(item[rowKey]);
                }
            });
            selectedRowKeys = selection.selectedRowKeys || [];
            indeterminateRowKeys = selection.indeterminateRowKeys || [];
            canSelectAll = canSelectRowKeysArr_1.length > 0;
            canRowSelect = selection.canRowSelect;
            isSelectAll =
                canSelectRowKeysArr_1.length > 0 &&
                    helper.isSelectAll(selectedRowKeys, canSelectRowKeysArr_1);
            isSelectPart =
                canSelectRowKeysArr_1.length > 0 &&
                    !isSelectAll &&
                    helper.isSelectPart(selectedRowKeys, canSelectRowKeysArr_1);
        }
        return (React.createElement(Receiver, { componentName: "Table" }, function (i18n) { return (React.createElement("div", { className: prefix + "-table-container", "data-zv": '7.4.3' },
            React.createElement(BlockLoading, { loading: _this.props.loading }, columns && (React.createElement("div", { className: prefix + "-table " + className, "data-zv": '7.4.3' },
                _this.state.placeHolderHeight && (React.createElement("div", { className: "thead place-holder", "data-zv": '7.4.3' })),
                React.createElement(Head, { ref: function (c) { return (_this.head = c); }, columns: columns, sortBy: sortBy, sortType: sortType, onSort: _this.onSort, selection: {
                        needSelect: needSelect,
                        onSelectAll: _this.onSelectAllRows,
                        isSingleSelection: isSingleSelection,
                        canSelectAll: canSelectAll,
                        isSelectAll: isSelectAll,
                        isSelectPart: isSelectPart,
                    }, needExpand: needExpand, autoStick: autoStick, style: _this.state.fixStyle }),
                React.createElement(Body, { datasets: datasets, columns: columns, emptyLabel: emptyLabel || i18n.emptyLabel, rowKey: rowKey, getRowConf: getRowConf, selection: {
                        needSelect: needSelect,
                        selectedRowKeys: selectedRowKeys,
                        indeterminateRowKeys: indeterminateRowKeys,
                        isSingleSelection: isSingleSelection,
                        onSelect: _this.onSelectOneRow,
                        canRowSelect: canRowSelect,
                    }, needExpand: needExpand, isExpanded: isExpanded, expandRender: expandRender }),
                React.createElement(Foot, { ref: function (c) { return (_this.foot = c); }, batchComponents: batchComponents, pageInfo: pageInfo, paginationType: paginationType, batchComponentsFixed: _this.state.batchComponentsFixed, selection: {
                        needSelect: needSelect,
                        isSingleSelection: isSingleSelection,
                        onSelectAll: _this.onSelectAllRows,
                        selectedRows: _this.getSelectedRowsByKeys(selectedRowKeys),
                        isSelectAll: isSelectAll,
                        isSelectPart: isSelectPart,
                    }, current: _this.state.current, onPageChange: _this.onPageChange })))))); }));
    };
    Table.defaultProps = {
        prefix: 'zent',
        paginationType: 'default',
        className: '',
        datasets: [],
        columns: [],
        emptyLabel: '',
        rowKey: 'id',
        loading: false,
        autoScroll: false,
        autoStick: false,
        selection: null,
        batchComponentsAutoFixed: true,
        batchComponents: null,
    };
    return Table;
}(PureComponent));
export { Table };
export default Table;
