import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import AnimateHeight from '../utils/component/AnimateHeight';
import LazyMount from '../utils/component/LazyMount';
import { EASE_IN_OUT } from '../utils/timingFunctions';
import { DisabledContext } from '../disabled';
var NO_BOTTOM_BORDER = {
    borderBottomWidth: 0,
    borderBottomColor: 'rgba(255, 255, 255, 0)',
    transition: "border-bottom-width 160ms " + EASE_IN_OUT + ", border-bottom-color 160ms " + EASE_IN_OUT,
};
var NO_STYLE = {};
var CollapsePanel = (function (_super) {
    __extends(CollapsePanel, _super);
    function CollapsePanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            animateAppear: !_this.props.active,
        };
        _this.toggle = function () {
            var _a = _this.props, onChange = _a.onChange, panelKey = _a.panelKey, active = _a.active, _b = _a.disabled, disabled = _b === void 0 ? _this.context.value : _b;
            if (!disabled) {
                onChange(panelKey, !active);
            }
        };
        return _this;
    }
    CollapsePanel.prototype.render = function () {
        var _a, _b;
        var _c = this.props, children = _c.children, title = _c.title, style = _c.style, active = _c.active, _d = _c.disabled, disabled = _d === void 0 ? this.context.value : _d, prefix = _c.prefix, showArrow = _c.showArrow, className = _c.className, isLast = _c.isLast, bordered = _c.bordered, panelTitleBackground = _c.panelTitleBackground;
        var animateAppear = this.state.animateAppear;
        var isBorderedLast = bordered && isLast;
        var titleStyle = isBorderedLast && !active ? NO_BOTTOM_BORDER : NO_STYLE;
        var contentBoxStyle = isBorderedLast || !active ? NO_BOTTOM_BORDER : NO_STYLE;
        return (React.createElement("div", { className: cx(prefix + "-collapse-panel", className, (_a = {},
                _a[prefix + "-collapse-panel--has-arrow"] = showArrow,
                _a[prefix + "-collapse-panel--active"] = active,
                _a[prefix + "-collapse-panel--inactive"] = !active,
                _a[prefix + "-collapse-panel--disabled"] = disabled,
                _a)), style: style, "data-zv": '7.4.3' },
            React.createElement("div", { className: cx(prefix + "-collapse-panel__title", (_b = {},
                    _b[prefix + "-collapse-panel__title--bg-none"] = panelTitleBackground === 'none',
                    _b[prefix + "-collapse-panel__title--bg-default"] = panelTitleBackground === 'default',
                    _b)), style: titleStyle, onClick: this.toggle, "data-zv": '7.4.3' },
                showArrow && React.createElement(Arrow, { className: prefix + "-collapse-panel__arrow" }),
                title),
            React.createElement(LazyMount, { mount: active },
                React.createElement(AnimateHeight, { appear: animateAppear, duration: 160, height: active ? 'auto' : 0, easing: EASE_IN_OUT, className: prefix + "-collapse-panel__content-box", style: contentBoxStyle },
                    React.createElement("div", { className: prefix + "-collapse-panel__content", "data-zv": '7.4.3' }, children)))));
    };
    CollapsePanel.defaultProps = {
        showArrow: true,
        prefix: 'zent',
    };
    CollapsePanel.contextType = DisabledContext;
    return CollapsePanel;
}(Component));
export { CollapsePanel };
function Arrow(_a) {
    var className = _a.className;
    return (React.createElement("svg", { width: "16", height: "10", className: className, xmlns: "http://www.w3.org/2000/svg", "data-zv": '7.4.3' },
        React.createElement("path", { d: "M8 6.77L14.37.403l1.413 1.414-6.369 6.37h.002L8 9.601.223 1.822 1.637.408 8 6.771z", fillRule: "evenodd", "data-zv": '7.4.3' })));
}
export default CollapsePanel;
