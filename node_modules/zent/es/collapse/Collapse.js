import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import kindOf from '../utils/kindOf';
import Panel from './Panel';
import { isElement } from 'react-is';
var Collapse = (function (_super) {
    __extends(Collapse, _super);
    function Collapse() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onChange = function (key, active) {
            var _a = _this.props, activeKey = _a.activeKey, accordion = _a.accordion, onChange = _a.onChange;
            if (accordion) {
                if (activeKey !== key && active) {
                    onChange(key);
                }
                else if (activeKey === key && !active) {
                    onChange(null);
                }
            }
            else {
                var activeKeyArray = [].concat(activeKey);
                var keyIndex = activeKeyArray.indexOf(key);
                if (active) {
                    keyIndex === -1 && activeKeyArray.push(key);
                }
                else {
                    keyIndex !== -1 && activeKeyArray.splice(keyIndex, 1);
                }
                onChange(activeKeyArray);
            }
        };
        return _this;
    }
    Collapse.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props, className = _b.className, prefix = _b.prefix, bordered = _b.bordered, panelTitleBackground = _b.panelTitleBackground, children = _b.children, activeKey = _b.activeKey;
        return (React.createElement("div", { className: cx(prefix + "-collapse", className, (_a = {},
                _a[prefix + "-collapse--has-border"] = bordered,
                _a[prefix + "-collpase--no-border"] = !bordered,
                _a)), "data-zv": '7.4.3' }, React.Children.map(children, function (c, idx) {
            if (!isElement(c) || !kindOf(c.type, Panel)) {
                throw new Error("Invalid children supplied to Collapse. Each child should be a Panel.");
            }
            return React.cloneElement(c, {
                onChange: _this.onChange,
                active: isPanelActive(activeKey, c.key),
                panelKey: c.key,
                panelTitleBackground: panelTitleBackground,
                isLast: idx === React.Children.count(children) - 1,
                bordered: bordered,
            });
        })));
    };
    Collapse.defaultProps = {
        bordered: true,
        panelTitleBackground: 'default',
        accordion: false,
        prefix: 'zent',
    };
    Collapse.Panel = Panel;
    return Collapse;
}(Component));
export { Collapse };
function isPanelActive(activeKey, key) {
    if (typeof activeKey === 'string') {
        return activeKey === key;
    }
    if (Array.isArray(activeKey)) {
        return activeKey.indexOf(key) !== -1;
    }
    return false;
}
export default Collapse;
