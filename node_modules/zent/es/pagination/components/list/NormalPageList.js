import { __extends } from "tslib";
import * as React from 'react';
import ArrowButton from '../button/ArrowButton';
import PageNumberButton from '../button/PageNumberButton';
import BasePageList from './BasePageList';
var NormalPageList = (function (_super) {
    __extends(NormalPageList, _super);
    function NormalPageList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            activeDoubleArrowButton: '',
        };
        _this.onPrevPage = _this.jumpToPageDelta(-1, _this.resetActiveDoubleArrowButton);
        _this.onNextPage = _this.jumpToPageDelta(1, _this.resetActiveDoubleArrowButton);
        _this.onFastForwardPrevPage = _this.jumpToPageDelta(-5, function () {
            _this.setState({
                activeDoubleArrowButton: 'left',
            });
        });
        _this.onFastForwardNextPage = _this.jumpToPageDelta(5, function () {
            _this.setState({
                activeDoubleArrowButton: 'right',
            });
        });
        _this.resetActiveDoubleArrowButton = function () {
            _this.setState({
                activeDoubleArrowButton: '',
            });
        };
        return _this;
    }
    NormalPageList.prototype.render = function () {
        var _this = this;
        var _a = this.props, layout = _a.layout, buttonBordered = _a.buttonBordered, lastPageHelp = _a.lastPageHelp;
        var activeDoubleArrowButton = this.state.activeDoubleArrowButton;
        return (React.createElement("div", { className: "zent-pagination-page-list--normal", "data-zv": '7.4.3' }, layout.map(function (btn) {
            var type = btn.type;
            if (type === 'number') {
                var page = btn.page, selected = btn.selected;
                return (React.createElement(PageNumberButton, { selected: selected, key: "page-" + page, bordered: buttonBordered, onClick: _this.onPageNumberClick(page) }, page));
            }
            if (type === 'left-arrow') {
                return (React.createElement(ArrowButton, { direction: "left", disabled: btn.disabled, key: type, bordered: buttonBordered, onClick: _this.onPrevPage }));
            }
            if (type === 'right-arrow') {
                return (React.createElement(ArrowButton, { direction: "right", disabled: btn.disabled, key: type, bordered: buttonBordered, onClick: _this.onNextPage, disabledHelp: lastPageHelp }));
            }
            if (type === 'double-left-arrow') {
                return (React.createElement(ArrowButton, { direction: "left", double: true, active: activeDoubleArrowButton === 'left', key: type, bordered: buttonBordered, onClick: _this.onFastForwardPrevPage }));
            }
            if (type === 'double-right-arrow') {
                return (React.createElement(ArrowButton, { direction: "right", double: true, active: activeDoubleArrowButton === 'right', key: type, bordered: buttonBordered, onClick: _this.onFastForwardNextPage }));
            }
            return null;
        })));
    };
    return NormalPageList;
}(BasePageList));
export default NormalPageList;
