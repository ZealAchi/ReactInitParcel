import { __assign } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import isBrowser from '../utils/isBrowser';
import createElement from '../utils/dom/createElement';
import NotifyContent from './NotifyContent';
var index = 0;
var durationDefault = 3500;
var containerList = {};
var notifyContainerClass = 'zent-notify-container';
var createContainerId = function () {
    return ++index;
};
var closeNotifyCallback = function (callback) {
    if (typeof callback === 'function') {
        callback();
    }
};
var closeNotify = function (containerId) {
    var containerObj = containerList[containerId];
    if (!containerObj) {
        return;
    }
    var container = containerObj.container, callback = containerObj.callback, timeOutId = containerObj.timeOutId;
    clearTimeout(timeOutId);
    ReactDOM.unmountComponentAtNode(container);
    delete containerList[containerId];
    closeNotifyCallback(callback);
};
var closeAllNotify = function () {
    Object.keys(containerList).forEach(function (containerId) {
        closeNotify(containerId);
    });
};
var createNotifyContainerNode = function () {
    var notifyContainerNode = document.querySelector('.zent-notify-container');
    if (!notifyContainerNode) {
        var bodyNode = document.body;
        var div = createElement('div');
        div.className = notifyContainerClass;
        notifyContainerNode = bodyNode.appendChild(div);
    }
    return notifyContainerNode;
};
var show = function (text, duration, status, callback) {
    if (!isBrowser)
        return null;
    var container = createElement('div');
    var notifyContainerNode = createNotifyContainerNode();
    var props = {
        text: text,
        status: status,
        duration: duration,
        isIn: true,
        selector: notifyContainerNode,
    };
    ReactDOM.render(React.createElement(NotifyContent, __assign({}, props)), container);
    var containerId = createContainerId();
    var timeOutId = setTimeout(function () {
        ReactDOM.render(React.createElement(NotifyContent, { isIn: false, text: text, selector: notifyContainerNode, status: status, close: function () { return closeNotify(containerId); } }), container);
    }, props.duration || durationDefault);
    containerList[containerId] = { container: container, callback: callback, timeOutId: timeOutId };
    return containerId;
};
export function success(text, duration, callback) {
    return show(text, duration, 'success', callback);
}
export function warn(text, duration, callback) {
    return show(text, duration, 'warn', callback);
}
export function error(text, duration, callback) {
    return show(text, duration, 'error', callback);
}
export function info(text, duration, callback) {
    return show(text, duration, 'info', callback);
}
export function clear(containerId) {
    if (containerId) {
        closeNotify(containerId);
    }
    else {
        closeAllNotify();
    }
}
export function config(options) {
    if (options.duration) {
        durationDefault = options.duration;
    }
}
