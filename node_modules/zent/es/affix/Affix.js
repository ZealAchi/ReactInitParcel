import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import * as ReactDOM from 'react-dom';
import throttle from '../utils/throttle';
import WindowEventHandler from '../utils/component/WindowEventHandler';
import getViewportSize from '../utils/dom/getViewportSize';
var Affix = (function (_super) {
    __extends(Affix, _super);
    function Affix() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            position: 'static',
            width: undefined,
            placeHoldStyle: {},
        };
        _this.affix = false;
        _this.handleResize = throttle(function () {
            _this.updatePin();
            _this.setWidth();
        }, 20);
        _this.handleScroll = throttle(function () {
            _this.updatePin();
        }, 20);
        return _this;
    }
    Affix.prototype.pin = function () {
        var onPin = this.props.onPin;
        this.affix = true;
        this.setWidth();
        this.setState({ position: 'fixed' });
        onPin && onPin();
    };
    Affix.prototype.unpin = function () {
        var onUnpin = this.props.onUnpin;
        this.affix = false;
        this.setState({
            position: 'static',
            width: undefined,
            placeHoldStyle: { overflow: 'hidden' },
        });
        onUnpin && onUnpin();
    };
    Affix.prototype.setWidth = function () {
        var element = ReactDOM.findDOMNode(this);
        if (!element) {
            return;
        }
        this.setState({
            width: element.offsetWidth,
            placeHoldStyle: {
                width: '100%',
                height: element.offsetHeight,
            },
        });
    };
    Affix.prototype.updatePin = function () {
        var affix = this.affix;
        var props = this.props;
        var element = ReactDOM.findDOMNode(this);
        if (!element) {
            return;
        }
        var reallyNum, propsNum;
        if (props.offsetBottom !== undefined) {
            reallyNum =
                getViewportSize().height - element.getBoundingClientRect().bottom;
            propsNum = props.offsetBottom;
        }
        else {
            reallyNum = element.getBoundingClientRect().top;
            propsNum = props.offsetTop;
        }
        if (affix && reallyNum > propsNum) {
            this.unpin();
        }
        if (!affix && reallyNum <= propsNum) {
            this.pin();
        }
    };
    Affix.prototype.getStyleObj = function () {
        var _a = this.props, zIndex = _a.zIndex, offsetBottom = _a.offsetBottom, offsetTop = _a.offsetTop;
        var _b = this.state, position = _b.position, width = _b.width;
        var styleObj = {};
        if (position === 'fixed') {
            styleObj = { position: position, zIndex: zIndex, width: width };
            offsetBottom !== undefined
                ? (styleObj.bottom = offsetBottom)
                : (styleObj.top = offsetTop);
        }
        else {
            styleObj = { position: position };
        }
        return styleObj;
    };
    Affix.prototype.componentDidMount = function () {
        this.handleResize();
    };
    Affix.prototype.componentDidUpdate = function () {
        this.handleResize();
    };
    Affix.prototype.componentWillUnmount = function () {
        this.handleResize.cancel();
        this.handleScroll.cancel();
    };
    Affix.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, className = _a.className, placeHoldClassName = _a.placeHoldClassName, children = _a.children;
        var wrapClass = cx(prefix + "-affix", className);
        return (React.createElement("div", { className: placeHoldClassName, style: this.state.placeHoldStyle, "data-zv": '7.4.3' },
            React.createElement("div", { className: wrapClass, style: __assign({}, this.getStyleObj()), "data-zv": '7.4.3' }, children),
            React.createElement(WindowEventHandler, { eventName: "scroll", callback: this.handleScroll }),
            React.createElement(WindowEventHandler, { eventName: "resize", callback: this.handleResize })));
    };
    Affix.defaultProps = {
        offsetTop: 0,
        prefix: 'zent',
        zIndex: 10,
    };
    return Affix;
}(Component));
export { Affix };
export default Affix;
