import { __assign } from "tslib";
import * as React from 'react';
import isChrome from '../utils/isChrome';
import { IMECompositionContext } from './context';
var EMIT_CHANGE_AFTER_COMPOSITION_END = isChrome;
var defaultOption = {
    getEventValue: function (e) { return e.target.value; },
};
export function createUseIMEComposition(option) {
    var getEventValue = __assign(__assign({}, defaultOption), option).getEventValue;
    return function useIMEComposition(propValue, onChangeProp, onCompositionStartProp, onCompositionEndProp) {
        var ctx = React.useContext(IMECompositionContext);
        var isCompositionRef = React.useRef(false);
        var _a = React.useState(propValue), compositionValue = _a[0], setCompositionValue = _a[1];
        var onCompositionValueChange = React.useCallback((function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (isCompositionRef.current) {
                setCompositionValue(getEventValue.apply(void 0, args));
                return;
            }
            return onChangeProp && onChangeProp.apply(void 0, args);
        }), [onChangeProp]);
        var onCompositionStart = React.useCallback(function (e) {
            isCompositionRef.current = true;
            onCompositionStartProp && onCompositionStartProp(e);
        }, [onCompositionStartProp]);
        var onCompositionEnd = React.useCallback(function (e) {
            isCompositionRef.current = false;
            onCompositionEndProp && onCompositionEndProp(e);
            if (EMIT_CHANGE_AFTER_COMPOSITION_END) {
                e.type = 'change';
                onChangeProp && onChangeProp(e);
            }
        }, [onCompositionEndProp]);
        var isControlled = propValue !== undefined;
        var passCompositionHandler = isControlled && ctx.enable;
        var passCompositionValue = isControlled && ctx.enable && isCompositionRef.current;
        return {
            value: passCompositionValue ? compositionValue : propValue,
            onChange: passCompositionHandler
                ? onCompositionValueChange
                : onChangeProp,
            onCompositionStart: passCompositionHandler
                ? onCompositionStart
                : onCompositionStartProp,
            onCompositionEnd: passCompositionHandler
                ? onCompositionEnd
                : onCompositionEndProp,
        };
    };
}
