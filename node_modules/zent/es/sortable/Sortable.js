import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import * as sortableJS from 'sortablejs';
import reorder from '../utils/reorder';
var Sortable = (function (_super) {
    __extends(Sortable, _super);
    function Sortable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.containerRef = React.createRef();
        _this.initSortable = function () {
            var _a = _this.props, onMove = _a.onMove, onEnd = _a.onEnd, onChange = _a.onChange, filterClass = _a.filterClass, children = _a.children, rest = __rest(_a, ["onMove", "onEnd", "onChange", "filterClass", "children"]);
            var instance = _this.containerRef.current;
            if (!instance) {
                return;
            }
            var sortableOptions = __assign({ filter: filterClass ? "." + filterClass : '', ghostClass: "zent-ghost", chosenClass: "zent-chosen", dragClass: "zent-drag", fallbackClass: "zent-fallback", onMove: function (e) {
                    if (onMove) {
                        return onMove(e);
                    }
                    return filterClass ? !e.related.classList.contains(filterClass) : true;
                }, onEnd: function (e) {
                    var items = _this.props.items;
                    onEnd && onEnd(e);
                    if (!items) {
                        return;
                    }
                    var oldIndex = e.oldIndex, newIndex = e.newIndex;
                    var newItems = reorder(items, oldIndex, newIndex);
                    onChange && onChange(newItems);
                } }, rest);
            _this.sortable = sortableJS.create(instance, sortableOptions);
        };
        return _this;
    }
    Sortable.prototype.destorySortableInstance = function () {
        if (this.sortable) {
            this.sortable.destroy();
            this.sortable = null;
        }
    };
    Sortable.prototype.componentDidMount = function () {
        this.initSortable();
    };
    Sortable.prototype.componentWillUnmount = function () {
        this.destorySortableInstance();
    };
    Sortable.prototype.render = function () {
        var _a = this.props, className = _a.className, children = _a.children, tag = _a.tag;
        var classString = cx("zent-sortable", className);
        var Com = tag;
        return (React.createElement(Com, { ref: this.containerRef, className: classString, "data-zv": "7.4.3" }, children));
    };
    Sortable.defaultProps = {
        tag: 'div',
    };
    return Sortable;
}(Component));
export { Sortable };
export default Sortable;
