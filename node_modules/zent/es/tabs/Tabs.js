import { __assign, __extends } from "tslib";
import * as React from 'react';
import { isElement } from 'react-is';
import cn from 'classnames';
import isNil from '../utils/isNil';
import noop from '../utils/noop';
import LazyMount from '../utils/component/LazyMount';
import TabPanel from './components/TabPanel';
import NormalTabsNav from './components/tabs-nav/NormalTabsNav';
import CardTabsNav from './components/tabs-nav/CardTabsNav';
import ButtonTabsNav from './components/tabs-nav/ButtonTabsNav';
import BaseTabs from './components/base/BaseTabs';
import { getTabDataFromChild } from './utils';
var TabsNavComponents = {
    normal: NormalTabsNav,
    card: CardTabsNav,
    button: ButtonTabsNav,
};
var Tabs = (function (_super) {
    __extends(Tabs, _super);
    function Tabs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Tabs.prototype, "tabsCls", {
        get: function () {
            var _a = this.props, className = _a.className, type = _a.type;
            return cn('zent-tabs', "zent-tabs-type__" + type, className);
        },
        enumerable: true,
        configurable: true
    });
    Tabs.prototype.getTabDataListFromTabs = function (tabs) {
        var activeId = this.props.activeId;
        return tabs.map(function (tab) { return (__assign(__assign({}, tab), { actived: tab.key === activeId })); });
    };
    Tabs.prototype.getTabDataListFromChildren = function (children) {
        var activeId = this.props.activeId;
        return React.Children.map(children, function (child) {
            if (!isElement(child)) {
                return null;
            }
            return getTabDataFromChild(child, activeId);
        }).filter(function (v) { return !isNil(v); });
    };
    Tabs.prototype.renderNav = function (tabDataList) {
        var _a = this
            .props, type = _a.type, candel = _a.candel, stretch = _a.stretch, navExtraContent = _a.navExtraContent, onChange = _a.onChange, onDelete = _a.onDelete;
        var TabsNavComp = (TabsNavComponents[type] ||
            TabsNavComponents['normal']);
        return (React.createElement(TabsNavComp, { onChange: onChange, tabDataList: tabDataList, onDelete: onDelete, candel: candel, stretch: stretch, navExtraContent: navExtraContent }));
    };
    Tabs.prototype.renderTabPanel = function (tabItem) {
        var unmountPanelOnHide = this.props.unmountPanelOnHide;
        return (React.createElement(LazyMount, { mount: tabItem.actived, key: tabItem.key },
            React.createElement(TabPanel, { tab: tabItem.title, actived: tabItem.actived, unmountOnHide: tabItem.unmountOnHide || unmountPanelOnHide, className: tabItem.className, id: tabItem.key }, tabItem.panelChildren)));
    };
    Tabs.TabPanel = TabPanel;
    Tabs.defaultProps = {
        type: 'normal',
        activeId: '',
        candel: false,
        stretch: false,
        onChange: noop,
        onDelete: noop,
        unmountPanelOnHide: false,
    };
    return Tabs;
}(BaseTabs));
export { Tabs };
export default Tabs;
