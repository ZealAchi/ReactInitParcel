import { __assign, __extends } from "tslib";
import * as React from 'react';
import { isElement } from 'react-is';
import cn from 'classnames';
import isNil from '../utils/isNil';
import noop from '../utils/noop';
import LazyMount from '../utils/component/LazyMount';
import VerticalTabsNav from './components/tabs-nav/VerticalTabsNav';
import BaseTabs from './components/base/BaseTabs';
import { getTabDataFromChild } from './utils';
import TabDivide from './components/TabDivide';
import TabPanel from './components/TabPanel';
var VerticalTabs = (function (_super) {
    __extends(VerticalTabs, _super);
    function VerticalTabs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(VerticalTabs.prototype, "tabsCls", {
        get: function () {
            var className = this.props.className;
            return cn('zent-tabs', "zent-tabs-type__vertical", className);
        },
        enumerable: true,
        configurable: true
    });
    VerticalTabs.prototype.getTabDataListFromTabs = function (tabs) {
        var activeId = this.props.activeId;
        return tabs.map(function (tab) {
            if ('divide' in tab) {
                return tab;
            }
            else {
                return __assign(__assign({}, tab), { actived: tab.key === activeId });
            }
        });
    };
    VerticalTabs.prototype.getTabDataListFromChildren = function (children) {
        var activeId = this.props.activeId;
        return React.Children.map(children, function (child) {
            if (!isElement(child)) {
                return null;
            }
            if ('divide' in child.props) {
                return { divide: true };
            }
            return getTabDataFromChild(child, activeId);
        }).filter(function (v) { return !isNil(v); });
    };
    VerticalTabs.prototype.renderNav = function (tabDataList) {
        var _a = this.props, onChange = _a.onChange, scrollHeight = _a.scrollHeight;
        return (React.createElement(VerticalTabsNav, { scrollHeight: scrollHeight, onChange: onChange, tabDataList: tabDataList }));
    };
    VerticalTabs.prototype.renderTabPanel = function (tabItem) {
        if ('divide' in tabItem) {
            return null;
        }
        var unmountPanelOnHide = this.props.unmountPanelOnHide;
        return (React.createElement(LazyMount, { mount: tabItem.actived, key: tabItem.key },
            React.createElement(TabPanel, { tab: tabItem.title, actived: tabItem.actived, unmountOnHide: tabItem.unmountOnHide || unmountPanelOnHide, className: tabItem.className, id: tabItem.key }, tabItem.panelChildren)));
    };
    VerticalTabs.TabPanel = TabPanel;
    VerticalTabs.Divide = TabDivide;
    VerticalTabs.defaultProps = {
        activeId: '',
        onChange: noop,
        unmountPanelOnHide: false,
    };
    return VerticalTabs;
}(BaseTabs));
export { VerticalTabs };
export default VerticalTabs;
