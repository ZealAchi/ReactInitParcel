import { __assign } from "tslib";
import * as React from 'react';
import { setLocale, enUS } from './time-locale';
var common = {
    confirm: 'Confirm',
    cancel: 'Cancel',
    comma: ', ',
    ok: 'OK',
    reset: 'Reset',
};
export var mark = 'en-US';
export var CopyButton = {
    copy: 'Copy',
    success: 'Copied',
    error: 'Copy failed',
};
export var Pagination = {
    jumpTo: function (_a) {
        var input = _a.input;
        return React.createElement(React.Fragment, null,
            "Goto page ",
            input);
    },
    pageStats: function (_a) {
        var total = _a.total, Text = _a.Text, select = _a.select;
        return (React.createElement(React.Fragment, null,
            "Total ",
            React.createElement(Text, { type: "middle" }, total),
            " items, ",
            select,
            React.createElement(Text, { type: "right" }, "per page")));
    },
    pageStatsStatic: function (_a) {
        var total = _a.total, pageSize = _a.pageSize, Text = _a.Text;
        return (React.createElement(React.Fragment, null,
            "Total ",
            React.createElement(Text, { type: "middle" }, total),
            " items,",
            React.createElement(Text, { type: "middle" }, pageSize),
            " items per page"));
    },
    selectWidth: 100,
    items: ' items',
};
export var Pop = __assign({}, common);
export var PreviewImage = {
    alt: 'Image download failed',
    prev: 'Previous',
    next: 'Next',
    rotate: 'Rotate',
};
export var RangePicker = {
    7: '7 days',
    30: '30 days',
};
export var Select = {
    input: 'Please choose...',
    empty: 'No matches found',
};
export var Sweetalert = __assign(__assign({}, common), { title: 'Alert' });
export var Switch = {
    checked: 'On',
    unchecked: 'Off',
};
export var Grid = __assign(__assign({}, common), { emptyLabel: 'No data' });
export var Table = __assign(__assign({}, common), { emptyLabel: 'No data' });
export var Cascader = __assign(__assign({}, common), { title: 'Title', placeholder: 'Please choose' });
var QUARTER_NAMES = [
    '1st Quarter',
    '2nd Quarter',
    '3rd Quarter',
    '4th Quarter',
];
export var TimePicker = function () {
    setLocale(enUS);
    return __assign(__assign({}, common), { time: 'Please select a time', date: 'Please select a date', week: 'Please select a week', month: 'Please select a month', quarter: 'Please select a quarter', year: 'Please select a year', range: 'Please select a range', rangeError: 'Please select the starting and ending time', start: 'Start date', end: 'End date', startTime: 'Start time', endTime: 'End time', to: 'to', current: {
            time: 'Now',
            date: 'Today',
            week: 'This week',
            month: 'This month',
            year: 'This year',
        }, panel: {
            hour: '',
            minute: '',
            second: '',
            hourSelect: 'Choose hours',
            minuteSelect: 'Choose minutes',
            secondSelect: 'Choose seconds',
            titleFormat: 'MMMM YYYY',
            quarterNames: QUARTER_NAMES,
            yearQuarterName: function (_a) {
                var year = _a.year, quarter = _a.quarter;
                var val = QUARTER_NAMES[quarter];
                return val + " of " + year;
            },
            dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            monthNames: [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec',
            ],
        } });
};
var TypeMap = {
    image: 'Image',
    voice: 'Audio',
};
export var Upload = __assign(__assign({}, common), { title_voice: 'Choose voice', title_image: 'Choose image', input: {
        holder: 'Add',
        maxAmount: function (_a) {
            var maxAmount = _a.maxAmount, type = _a.type;
            return "Only " + maxAmount + " " + TypeMap[type] + " files can be added";
        },
        maxSize: function (_a) {
            var maxSize = _a.maxSize, type = _a.type;
            return "Cannot upload " + TypeMap[type] + " files larger than " + maxSize;
        },
        type: function (_a) {
            var type = _a.type;
            return "Cannot upload " + TypeMap[type] + " files with unsupported type";
        },
    }, popup: {
        web: 'Web image',
        group: 'Group',
        holder: 'Image url',
        title_voice: 'Local audio',
        title_image: 'Local image',
        type: function (_a) {
            var types = _a.types, size = _a.size;
            return "Supports " + types.join(' /') + " only, smaller than " + size;
        },
        extract: 'Extract',
        extracting: 'Extracting...',
    } });
export var Mention = {
    noContent: 'No result found, press SPACE to finish typing',
};
