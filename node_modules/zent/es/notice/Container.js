import { __extends } from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import Wrap from './Wrap';
import createElement from '../utils/dom/createElement';
var containers = {
    'right-top': null,
    'right-bottom': null,
    'left-top': null,
    'left-bottom': null,
};
function createContainer(position) {
    var div = createElement('div');
    div.classList.add('zent-notice-container');
    switch (position) {
        case 'right-top':
            div.classList.add('zent-notice-container-right', 'zent-notice-container-top');
            break;
        case 'right-bottom':
            div.classList.add('zent-notice-container-right', 'zent-notice-container-bottom');
            break;
        case 'left-top':
            div.classList.add('zent-notice-container-left', 'zent-notice-container-top');
            break;
        case 'left-bottom':
            div.classList.add('zent-notice-container-left', 'zent-notice-container-bottom');
            break;
        default:
            throw new Error("Invalid argument " + position);
    }
    document.body.appendChild(div);
    return div;
}
var uniqueId = 0;
export var instanceMap = new Map();
var NoticeContainer = (function (_super) {
    __extends(NoticeContainer, _super);
    function NoticeContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            list: [],
        };
        _this.onExited = function (id) {
            _this.setState(function (state) { return ({
                list: state.list.filter(function (it) { return it.props.id !== id; }),
            }); });
        };
        return _this;
    }
    NoticeContainer.prototype.push = function (children) {
        var id = uniqueId;
        var ref = React.createRef();
        var el = (React.createElement(Wrap, { ref: ref, key: id, id: id, onExited: this.onExited }, children));
        uniqueId += 1;
        instanceMap.set(id, ref);
        this.setState(function (state) { return ({
            list: state.list.concat([el]),
        }); });
        return id;
    };
    NoticeContainer.prototype.render = function () {
        return React.createElement(React.Fragment, null, this.state.list);
    };
    return NoticeContainer;
}(React.Component));
export function getContainer(position) {
    var container = containers[position];
    if (!container) {
        var div = createContainer(position);
        container = ReactDOM.render(React.createElement(NoticeContainer, { element: div }), div);
        containers[position] = container;
    }
    return container;
}
export function remove(id) {
    var ref = instanceMap.get(id);
    if (ref && ref.current) {
        ref.current.leave();
    }
}
