import * as React from 'react';
import cx from 'classnames';
import { Icon } from '../icon';
import { getContainer, remove } from './Container';
import { NoticeContext } from './Wrap';
import { isElement } from 'react-is';
function renderIcon(type) {
    switch (type) {
        case 'info':
            return (React.createElement(Icon, { className: "zent-notice-icon zent-notice-icon-info", type: "info-circle" }));
        case 'success':
            return (React.createElement(Icon, { className: "zent-notice-icon zent-notice-icon-success", type: "check-circle" }));
        case 'warning':
            return (React.createElement(Icon, { className: "zent-notice-icon zent-notice-icon-warning", type: "warning" }));
        case 'error':
            return (React.createElement(Icon, { className: "zent-notice-icon zent-notice-icon-error", type: "error-circle" }));
        default:
            return null;
    }
}
export function Notice(_a) {
    var children = _a.children, title = _a.title, type = _a.type, _b = _a.closable, closable = _b === void 0 ? true : _b, onClose = _a.onClose, className = _a.className, style = _a.style;
    var ctx = React.useContext(NoticeContext);
    var onCloseClick = React.useCallback(function () {
        ctx && ctx.onClose();
        onClose && onClose();
    }, [ctx, onClose]);
    return (React.createElement("div", { className: cx('zent-notice', { 'zent-notice-with-icon': !!type }, className), style: style, "data-zv": '7.4.3' },
        renderIcon(type),
        React.createElement("div", { className: "zent-notice-title", "data-zv": '7.4.3' }, title),
        closable ? (React.createElement(Icon, { type: "close", className: "zent-notice-close", onClick: onCloseClick })) : null,
        React.createElement("div", { className: "zent-notice-content", "data-zv": '7.4.3' }, children)));
}
Notice.push = function push(node) {
    var position = 'right-top';
    if (isElement(node) && node.props) {
        position = node.props.position || position;
    }
    var container = getContainer(position);
    return container.push(node);
};
Notice.close = remove;
export default Notice;
