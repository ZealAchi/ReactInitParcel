import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import Popover from '../../popover';
import Tabs from '../../tabs';
var TabPanel = Tabs.TabPanel;
var withPopover = Popover.withPopover;
var TabsContent = (function (_super) {
    __extends(TabsContent, _super);
    function TabsContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabsContent.prototype.renderCascaderItems = function (items, stage, popover) {
        var _a = this.props, prefix = _a.prefix, value = _a.value, clickHandler = _a.clickHandler;
        var cascaderItems = items.map(function (item) {
            var _a;
            var cascaderItemCls = classnames((_a = {},
                _a[prefix + "-cascader__list-link"] = true,
                _a.active = item.id === value[stage - 1],
                _a));
            return (React.createElement("div", { className: prefix + "-cascader__list-item", key: item.id, "data-zv": '7.4.3' },
                React.createElement("span", { className: cascaderItemCls, title: item.title, onClick: function () { return clickHandler(item, stage, popover); }, "data-zv": '7.4.3' }, item.title)));
        });
        return React.createElement("div", { className: prefix + "-cascader__list", "data-zv": '7.4.3' }, cascaderItems);
    };
    TabsContent.prototype.renderTabTitle = function (title, stage) {
        var _a = this.props, prefix = _a.prefix, isLoading = _a.isLoading, loadingStage = _a.loadingStage;
        if (isLoading && stage === loadingStage) {
            return (React.createElement("div", { className: prefix + "-cascader__loading", "data-zv": '7.4.3' },
                React.createElement("div", { className: prefix + "-cascader__loading-label", "data-zv": '7.4.3' }, title),
                React.createElement("div", { className: prefix + "-cascader__loading-icon", "data-zv": '7.4.3' })));
        }
        return title;
    };
    TabsContent.prototype.renderPanels = function (popover, i18n) {
        var PanelEls = [];
        var tabIndex = 1;
        var _a = this.props, title = _a.title, options = _a.options, value = _a.value, recursiveNextOptions = _a.recursiveNextOptions;
        var tabTitle = i18n.title;
        title = Array.isArray(title) ? title : [];
        if (title.length > 0) {
            tabTitle = title[0];
        }
        PanelEls.push(React.createElement(TabPanel, { tab: this.renderTabTitle(tabTitle, tabIndex), id: tabIndex, key: tabIndex }, this.renderCascaderItems(options, tabIndex, popover)));
        if (value && value.length > 0) {
            for (var i = 0; i < value.length; i++) {
                tabIndex++;
                options = recursiveNextOptions(options, value[i]);
                if (title.length >= tabIndex) {
                    tabTitle = title[tabIndex - 1];
                }
                else {
                    tabTitle = i18n.title;
                }
                if (options) {
                    PanelEls.push(React.createElement(TabPanel, { tab: this.renderTabTitle(tabTitle, tabIndex), id: tabIndex, key: tabIndex }, this.renderCascaderItems(options, tabIndex, popover)));
                }
            }
        }
        return PanelEls;
    };
    TabsContent.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, activeId = _a.activeId, popover = _a.popover, i18n = _a.i18n, onTabChange = _a.onTabChange;
        return (React.createElement("div", { className: prefix + "-cascader__popup-inner", "data-zv": '7.4.3' },
            React.createElement(Tabs, { activeId: activeId, onChange: onTabChange, type: "card", className: prefix + "-cascader__tabs" }, this.renderPanels(popover, i18n))));
    };
    return TabsContent;
}(PureComponent));
export default withPopover(TabsContent);
