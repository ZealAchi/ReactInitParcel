import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import Popover from '../../popover';
import Icon from '../../icon';
var withPopover = Popover.withPopover;
var MenuContent = (function (_super) {
    __extends(MenuContent, _super);
    function MenuContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MenuContent.prototype.getMenuItemIcon = function (item, isShowLoading, isActive) {
        var prefix = this.props.prefix;
        if (item.children || item.isLeaf === false) {
            if (isShowLoading && isActive) {
                return (React.createElement("i", { className: prefix + "-cascader__menu-item-loading zenticon", "data-zv": '7.4.3' }));
            }
            return (React.createElement(Icon, { className: prefix + "-cascader__menu-item-icon", type: "right" }));
        }
        return null;
    };
    MenuContent.prototype.renderCascaderItems = function (items, stage, popover) {
        var _this = this;
        var _a = this.props, prefix = _a.prefix, value = _a.value, clickHandler = _a.clickHandler, isLoading = _a.isLoading, loadingStage = _a.loadingStage, expandTrigger = _a.expandTrigger;
        var isShowLoading = isLoading && stage === loadingStage;
        var cascaderItems = items.map(function (item) {
            var _a;
            var isActive = item.id === value[stage - 1];
            var cascaderItemCls = classnames((_a = {},
                _a[prefix + "-cascader__menu-item"] = true,
                _a.active = isActive,
                _a));
            return (React.createElement("li", { className: cascaderItemCls, title: item.title, onClick: function () { return clickHandler(item, stage, popover, 'click'); }, onMouseEnter: function () {
                    return expandTrigger === 'hover' &&
                        clickHandler(item, stage, popover, 'hover');
                }, key: item.id, "data-zv": '7.4.3' },
                item.title,
                _this.getMenuItemIcon(item, isShowLoading, isActive)));
        });
        return (React.createElement("ul", { key: stage, className: prefix + "-cascader__menu", "data-zv": '7.4.3' }, cascaderItems));
    };
    MenuContent.prototype.renderPanels = function (popover) {
        var PanelEls = [];
        var _a = this.props, value = _a.value, recursiveNextOptions = _a.recursiveNextOptions;
        var options = this.props.options;
        var tabIndex = 1;
        PanelEls.push(this.renderCascaderItems(options, tabIndex, popover));
        if (value && value.length > 0) {
            for (var i = 0; i < value.length; i++) {
                tabIndex++;
                options = recursiveNextOptions(options, value[i]);
                if (options) {
                    PanelEls.push(this.renderCascaderItems(options, tabIndex, popover));
                }
            }
        }
        return PanelEls;
    };
    MenuContent.prototype.render = function () {
        var _a = this.props, prefix = _a.prefix, popover = _a.popover;
        return (React.createElement("div", { className: prefix + "-cascader__popup-inner " + prefix + "-cascader__popup-inner-menu", "data-zv": '7.4.3' }, this.renderPanels(popover)));
    };
    return MenuContent;
}(PureComponent));
export default withPopover(MenuContent);
