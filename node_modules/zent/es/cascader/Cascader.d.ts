import * as React from 'react';
import { PureComponent } from 'react';
import noop from '../utils/noop';
import Popover from '../popover';
import { II18nLocaleCascader } from '../i18n';
import { ICascaderItem, CascaderHandler, CascaderValue } from './types';
export interface ICascaderProps {
    type?: 'tabs' | 'menu';
    value?: CascaderValue[];
    options?: ICascaderItem[];
    title?: React.ReactNode[];
    onChange?: (value: ICascaderItem[]) => void;
    loadMore?: (item: ICascaderItem, stage: number) => Promise<ICascaderItem[]>;
    changeOnSelect?: boolean;
    placeholder?: string;
    prefix?: string;
    className?: string;
    popClassName?: string;
    displayText?: (value: ICascaderItem[]) => React.ReactNode;
    expandTrigger?: 'click' | 'hover';
}
export interface ICascaderState {
    value: CascaderValue[];
    options: ICascaderItem[];
    activeValue: ICascaderItem[];
    activeId: number;
    open: boolean;
    isLoading?: boolean;
    loadingStage?: number;
    prevProps: ICascaderProps;
}
export declare class Cascader extends PureComponent<ICascaderProps, ICascaderState> {
    static defaultProps: {
        prefix: string;
        className: string;
        popClassName: string;
        onChange: typeof noop;
        value: any[];
        options: any[];
        placeholder: string;
        changeOnSelect: boolean;
        title: any[];
        type: string;
        expandTrigger: string;
    };
    static getDerivedStateFromProps(nextProps: ICascaderProps, { prevProps, open }: ICascaderState): Partial<ICascaderState>;
    constructor(props: any);
    componentDidMount(): void;
    recursiveNextOptions(options: ICascaderItem[], id: unknown): ICascaderItem[];
    onShow: () => void;
    onClose: () => void;
    onTabChange: (id: any) => void;
    clickHandler: CascaderHandler;
    expandHandler: (item: ICascaderItem, stage: number, popover: Popover, willLoading: boolean, triggerType?: "click" | "hover") => void;
    getPopoverContent(i18n: II18nLocaleCascader): JSX.Element;
    render(): JSX.Element;
}
export default Cascader;
