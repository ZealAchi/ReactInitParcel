import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import noop from '../utils/noop';
import Popover from '../popover';
import Icon from '../icon';
import { I18nReceiver as Receiver } from '../i18n';
import TabsPopoverContent from './components/TabsContent';
import MenuPopoverContent from './components/MenuContent';
var PopoverContent = Popover.Content;
var PopoverClickTrigger = (function (_super) {
    __extends(PopoverClickTrigger, _super);
    function PopoverClickTrigger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopoverClickTrigger.prototype.getTriggerProps = function (child) {
        var _this = this;
        return {
            onClick: function (evt) {
                if (_this.props.contentVisible) {
                    _this.props.close();
                }
                else {
                    _this.props.open();
                }
                _this.triggerEvent(child, 'onClick', evt);
            },
        };
    };
    return PopoverClickTrigger;
}(Popover.Trigger.Click));
function resetCascaderValue(value, options, chooseNext) {
    var activeValue = [];
    var activeId = 1;
    if (options && options.length > 0 && value && value.length > 0) {
        activeId = 0;
        var _loop_1 = function (i) {
            var id = value[i];
            var nextOption = options.find(function (it) { return it.id === id; });
            if (!nextOption)
                return "break";
            activeId++;
            options = nextOption.children || [];
            activeValue.push({
                id: nextOption.id,
                title: nextOption.title,
            });
        };
        for (var i = 0; i < value.length; i++) {
            var state_1 = _loop_1(i);
            if (state_1 === "break")
                break;
        }
    }
    if (chooseNext)
        activeId++;
    return {
        activeValue: activeValue,
        activeId: activeId,
    };
}
var Cascader = (function (_super) {
    __extends(Cascader, _super);
    function Cascader(props) {
        var _this = _super.call(this, props) || this;
        _this.onShow = function () {
            _this.setState({
                open: true,
            });
        };
        _this.onClose = function () {
            var value = _this.props.value;
            _this.setState({
                open: false,
                value: Array.isArray(value) ? value : [],
            });
        };
        _this.onTabChange = function (id) {
            _this.setState({
                activeId: id,
            });
        };
        _this.clickHandler = function (item, stage, popover, triggerType) {
            if (triggerType === void 0) { triggerType = 'click'; }
            var loadMore = _this.props.loadMore;
            var options = _this.state.options;
            var needLoading = !item.isLeaf &&
                loadMore &&
                (!item.children || item.children.length === 0);
            _this.expandHandler(item, stage, popover, needLoading, triggerType);
            if (needLoading) {
                _this.setState({
                    isLoading: true,
                    loadingStage: stage,
                });
                loadMore(item, stage).then(function (children) {
                    item.children = children;
                    _this.expandHandler(item, stage, popover, false);
                    _this.setState({
                        options: options,
                        isLoading: false,
                    });
                });
            }
        };
        _this.expandHandler = function (item, stage, popover, willLoading, triggerType) {
            var _a = _this.state, value = _a.value, options = _a.options;
            var changeOnSelect = _this.props.changeOnSelect;
            var hasClose = false;
            value = value.slice(0, stage - 1);
            value.push(item.id);
            var obj = {
                value: value,
            };
            if (item.children || item.isLeaf === false) {
                if (!willLoading) {
                    obj.activeId = ++stage;
                }
            }
            else if (triggerType === 'click') {
                hasClose = true;
                popover.close();
            }
            if (hasClose || (changeOnSelect && triggerType === 'click')) {
                var activeObj_1 = resetCascaderValue(value, options);
                Object.assign(obj, activeObj_1);
                _this.setState(obj, function () {
                    _this.props.onChange(activeObj_1.activeValue);
                });
            }
            else {
                _this.setState(obj);
            }
        };
        _this.state = {
            value: props.value || [],
            options: props.options || [],
            activeValue: [],
            activeId: 1,
            open: false,
            prevProps: props,
        };
        return _this;
    }
    Cascader.getDerivedStateFromProps = function (nextProps, _a) {
        var prevProps = _a.prevProps, open = _a.open;
        var newState = {
            prevProps: nextProps,
        };
        if (nextProps !== prevProps) {
            newState.value = nextProps.value || [];
            newState.options = nextProps.options || [];
            var chooseNext = open && nextProps.changeOnSelect;
            newState = Object.assign(newState, resetCascaderValue(nextProps.value, nextProps.options, chooseNext));
        }
        return newState;
    };
    Cascader.prototype.componentDidMount = function () {
        var _a = this.state, value = _a.value, options = _a.options;
        this.setState(resetCascaderValue(value, options));
    };
    Cascader.prototype.recursiveNextOptions = function (options, id) {
        if (options && options.length > 0) {
            var currOptions = options.find(function (it) { return it.id === id; });
            if (currOptions && currOptions.children) {
                return currOptions.children;
            }
        }
        return null;
    };
    Cascader.prototype.getPopoverContent = function (i18n) {
        var _a = this.props, type = _a.type, prefix = _a.prefix, title = _a.title, options = _a.options, expandTrigger = _a.expandTrigger;
        var _b = this.state, activeId = _b.activeId, value = _b.value, isLoading = _b.isLoading, loadingStage = _b.loadingStage;
        var PopoverContentType = null;
        if (type === 'tabs') {
            PopoverContentType = TabsPopoverContent;
        }
        else if (type === 'menu') {
            PopoverContentType = MenuPopoverContent;
        }
        else {
            throw new Error('Invalid type found in Cascader, only tabs and menu are allowed');
        }
        return (React.createElement(PopoverContent, null,
            React.createElement(PopoverContentType, { prefix: prefix, i18n: i18n, value: value, isLoading: isLoading, loadingStage: loadingStage, clickHandler: this.clickHandler, activeId: activeId, onTabChange: this.onTabChange, title: title, recursiveNextOptions: this.recursiveNextOptions, options: options, expandTrigger: expandTrigger })));
    };
    Cascader.prototype.render = function () {
        var _this = this;
        return (React.createElement(Receiver, { componentName: "Cascader" }, function (i18n) {
            var _a, _b;
            var _c = _this.props, prefix = _c.prefix, className = _c.className, popClassName = _c.popClassName, placeholder = _c.placeholder;
            var _d = _this.state, activeValue = _d.activeValue, open = _d.open;
            var cascaderValue = placeholder || i18n.placeholder;
            var hasValue = false;
            if (activeValue && activeValue.length > 0) {
                hasValue = true;
                if (_this.props.displayText) {
                    cascaderValue = _this.props.displayText(activeValue);
                }
                else {
                    cascaderValue = activeValue.map(function (valueItem) {
                        return valueItem.title;
                    });
                    cascaderValue = cascaderValue.join(' / ');
                }
            }
            var cascaderCls = classnames((_a = {},
                _a[prefix + "-cascader"] = true,
                _a[className] = true,
                _a.open = open,
                _a));
            var selectTextCls = classnames((_b = {},
                _b[prefix + "-cascader__select-text"] = true,
                _b['is-placeholder'] = !hasValue,
                _b));
            return (React.createElement("div", { className: cascaderCls, "data-zv": '7.4.3' },
                React.createElement(Popover, { className: popClassName, position: Popover.Position.BottomLeft, onShow: _this.onShow, onClose: _this.onClose },
                    React.createElement(PopoverClickTrigger, null,
                        React.createElement("div", { className: prefix + "-cascader__select", "data-zv": '7.4.3' },
                            React.createElement("div", { className: selectTextCls, "data-zv": '7.4.3' },
                                React.createElement("span", { className: prefix + "-cascader__select-text-content", "data-zv": '7.4.3' }, cascaderValue),
                                React.createElement(Icon, { type: "caret-down" })))),
                    _this.getPopoverContent(i18n))));
        }));
    };
    Cascader.defaultProps = {
        prefix: 'zent',
        className: '',
        popClassName: 'zent-cascader__popup',
        onChange: noop,
        value: [],
        options: [],
        placeholder: '',
        changeOnSelect: false,
        title: [],
        type: 'tabs',
        expandTrigger: 'click',
    };
    return Cascader;
}(PureComponent));
export { Cascader };
export default Cascader;
