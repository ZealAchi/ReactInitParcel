import { __spreadArrays } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import { isElement } from 'react-is';
import Icon from '../icon';
import { DisabledContext } from '../disabled';
export function ButtonDirective(props) {
    var _a;
    var disabledContext = React.useContext(DisabledContext);
    var outline = props.outline, _b = props.type, type = _b === void 0 ? 'default' : _b, _c = props.size, size = _c === void 0 ? 'medium' : _c, block = props.block, loading = props.loading, _d = props.disabled, disabled = _d === void 0 ? disabledContext.value : _d, bordered = props.bordered, icon = props.icon, children = props.children;
    if (!isElement(children)) {
        throw new Error('Button Directive child must be element, string | number | boolean | null | undefined is not accepted');
    }
    var propsRef = React.useRef(props);
    propsRef.current = props;
    var onClick = React.useCallback(function (e) {
        var _a = propsRef.current, loading = _a.loading, disabled = _a.disabled, children = _a.children;
        var onClick = children.props.onClick;
        if (!onClick || loading || disabled) {
            return;
        }
        onClick(e);
    }, []);
    var iconNode = icon ? React.createElement(Icon, { type: icon }) : null;
    var className = cx((_a = {},
        _a["zent-btn-" + type + (outline ? '-outline' : '')] = type !== 'default',
        _a["zent-btn-" + size] = size !== 'medium',
        _a['zent-btn-block'] = block,
        _a['zent-btn-loading'] = loading,
        _a['zent-btn-disabled'] = disabled,
        _a['zent-btn-border-transparent'] = !bordered,
        _a), 'zent-btn', children.props.className);
    return React.cloneElement.apply(React, __spreadArrays([children,
        {
            className: className,
            onClick: onClick,
            'data-zv': "7.4.3",
        },
        iconNode], React.Children.toArray(children.props.children)));
}
