import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import cx from 'classnames';
import noop from '../../utils/noop';
import { I18nReceiver as Receiver } from '../../i18n';
import Tag from '../components/Tag';
var TagsTrigger = (function (_super) {
    __extends(TagsTrigger, _super);
    function TagsTrigger(props) {
        var _this = _super.call(this, props) || this;
        _this.deleteTagHandler = _this.deleteTagHandler.bind(_this);
        return _this;
    }
    TagsTrigger.prototype.componentWillReceiveProps = function (nextProps) {
        var selectedItems = this.props.selectedItems;
        var cid = nextProps.cid, text = nextProps.text, value = nextProps.value;
        if (this.isDelete || this.isAdded) {
            this.isDelete = false;
            this.isAdded = false;
            return;
        }
        var isExist = selectedItems.filter(function (item) { return item.cid === cid; }).length > 0;
        if (typeof cid !== 'undefined' && !isExist) {
            selectedItems.push({
                cid: cid,
                text: text,
                value: value,
            });
            this.props.onChange({
                selectedItems: selectedItems,
                selectedItem: {
                    value: '',
                },
                open: false,
            });
        }
        else if (isExist) {
            this.isAdded = true;
            this.props.onChange({
                selectedItem: {
                    value: '',
                },
            });
        }
    };
    TagsTrigger.prototype.deleteTagHandler = function (cid) {
        var _a = this.props, selectedItems = _a.selectedItems, disabled = _a.disabled;
        if (disabled) {
            return;
        }
        var deleteItem = selectedItems.filter(function (item) { return item.cid === cid; })[0];
        this.isDelete = true;
        this.props.onDelete(deleteItem);
        this.props.onChange({
            selectedItems: selectedItems.filter(function (item) { return item.cid !== cid; }),
            selectedItem: {},
            open: false,
        });
    };
    TagsTrigger.prototype.render = function () {
        var _this = this;
        var _a = this.props, prefixCls = _a.prefixCls, placeholder = _a.placeholder, onClick = _a.onClick, selectedItems = _a.selectedItems, visible = _a.visible;
        var rootClass = cx(prefixCls + "-tags", {
            tags__empty: !selectedItems.length,
            visible: visible,
        });
        return (React.createElement(Receiver, { componentName: "Select" }, function (i18n) { return (React.createElement("div", { className: rootClass, onClick: onClick, "data-zv": '7.4.3' }, selectedItems.length > 0 ? (selectedItems.map(function (item, index) {
            return (React.createElement(Tag, __assign({}, _this.props, { key: index, cid: item.cid }, item, { onDelete: _this.deleteTagHandler })));
        })) : (React.createElement("span", { className: prefixCls + "-placeholder", "data-zv": '7.4.3' }, placeholder || i18n.input)))); }));
    };
    TagsTrigger.defaultProps = {
        selectedItems: [],
        onDelete: noop,
    };
    return TagsTrigger;
}(PureComponent));
export default TagsTrigger;
