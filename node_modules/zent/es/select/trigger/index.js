import { __assign, __extends, __rest } from "tslib";
import * as React from 'react';
import Popover from '../../popover';
import Input from './InputTrigger';
import Base from './BaseTrigger';
import Simple from './SimpleTrigger';
import Tags from './TagsTrigger';
function decideTrigger(_a) {
    var simple = _a.simple, search = _a.search, tags = _a.tags, trigger = _a.trigger;
    if (simple)
        return Simple;
    if (search)
        return Input;
    if (tags)
        return Tags;
    return trigger || Base;
}
var SelectClickTrigger = (function (_super) {
    __extends(SelectClickTrigger, _super);
    function SelectClickTrigger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.clickHandler = function (event) {
            var _a = _this.props, onClick = _a.onClick, close = _a.close, open = _a.open, contentVisible = _a.contentVisible, disabled = _a.disabled;
            event.preventDefault();
            if (contentVisible) {
                close();
            }
            else if (!disabled) {
                open();
                if (onClick) {
                    onClick(event);
                }
            }
        };
        return _this;
    }
    SelectClickTrigger.prototype.render = function () {
        var _a = this.props, onClick = _a.onClick, trigger = _a.trigger, onTriggerRefChange = _a.onTriggerRefChange, rest = __rest(_a, ["onClick", "trigger", "onTriggerRefChange"]);
        var Node = decideTrigger(trigger);
        return (React.createElement(Node, __assign({}, rest, { ref: onTriggerRefChange, onClick: this.clickHandler })));
    };
    return SelectClickTrigger;
}(Popover.Trigger.Click));
export default SelectClickTrigger;
