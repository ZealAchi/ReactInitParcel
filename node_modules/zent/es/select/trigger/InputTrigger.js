import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import { I18nReceiver as Receiver } from '../../i18n';
import Input from '../../input';
var InputTrigger = (function (_super) {
    __extends(InputTrigger, _super);
    function InputTrigger() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            value: '',
        };
        _this.inputRef = React.createRef();
        _this.inputChangeHandler = function (ev) {
            _this.props.onChange({
                keyword: ev.target.value,
            });
        };
        return _this;
    }
    InputTrigger.prototype.componentDidMount = function () {
        this.props.onChange({
            extraFilter: true,
        });
    };
    InputTrigger.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        return nextState.value !== this.state.value;
    };
    InputTrigger.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({
            value: nextProps.keyword === null ? nextProps.value : nextProps.keyword,
        });
    };
    InputTrigger.prototype.render = function () {
        var _this = this;
        var _a = this.props, prefixCls = _a.prefixCls, placeholder = _a.placeholder, keyword = _a.keyword, text = _a.text, visible = _a.visible;
        var rootClass = cx(prefixCls + "-input", { visible: visible });
        return (React.createElement(Receiver, { componentName: "Select" }, function (i18n) { return (React.createElement(Input, { ref: _this.inputRef, className: rootClass, placeholder: placeholder || i18n.input, type: "text", value: keyword === null ? text : keyword, onChange: _this.inputChangeHandler, onClick: _this.props.onClick })); }));
    };
    return InputTrigger;
}(Component));
export default InputTrigger;
