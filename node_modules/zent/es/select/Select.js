import { __assign, __extends } from "tslib";
import * as React from 'react';
import cx from 'classnames';
import isEqual from '../utils/isEqual';
import omit from '../utils/omit';
import noop from '../utils/noop';
import Popover from '../popover';
import Option from './components/Option';
import Trigger from './trigger';
import Popup from './Popup';
import SelectTrigger from './trigger/BaseTrigger';
import InputTrigger from './trigger/InputTrigger';
import TagsTrigger from './trigger/TagsTrigger';
import { DisabledContext } from '../disabled';
var Content = Popover.Content;
var Select = (function (_super) {
    __extends(Select, _super);
    function Select(props) {
        var _this = _super.call(this, props) || this;
        _this.popover = null;
        _this.popup = null;
        _this.triggerChangeHandler = function (data) {
            _this.setState(data);
        };
        _this.triggerDeleteHandler = function (data) {
            var selectedItems = _this.state.selectedItems;
            selectedItems = selectedItems.filter(function (item) { return item.cid !== data.cid; });
            _this.setState({
                selectedItems: selectedItems,
            }, function () {
                _this.props.onDelete(data);
            });
        };
        _this.optionChangedHandler = function (ev, selectedItem) {
            var result = {};
            ev = ev || {
                preventDefault: noop,
                stopPropagation: noop,
            };
            var _a = _this.props, onEmptySelected = _a.onEmptySelected, optionValue = _a.optionValue, optionText = _a.optionText, tags = _a.tags, onChange = _a.onChange, retainNullOption = _a.retainNullOption, resetOption = _a.resetOption;
            var selectedItems = _this.state.selectedItems;
            if (!selectedItem) {
                onEmptySelected(ev);
                return;
            }
            var args = omit(selectedItem, ['cid']);
            result[optionValue] = selectedItem.value;
            result[optionText] = selectedItem.text;
            var data = __assign(__assign({}, args), result);
            if (tags) {
                if (!selectedItems.some(function (item) { return item.cid === selectedItem.cid; })) {
                    selectedItems.push(selectedItem);
                }
            }
            else if (selectedItem.value === null &&
                (resetOption || !retainNullOption)) {
                selectedItem = {};
            }
            _this.setState({
                keyword: null,
                selectedItems: selectedItems,
                selectedItem: selectedItem,
            }, function () {
                onChange({
                    target: __assign(__assign({}, _this.props), { type: tags ? 'select-multiple' : 'select-one', value: selectedItem.value }),
                    preventDefault: function () {
                        ev.preventDefault();
                    },
                    stopPropagation: function () {
                        ev.stopPropagation();
                    },
                }, data);
            });
        };
        _this.handlePopoverVisibleChange = function (visible) {
            if (visible) {
                _this.props.onOpen();
            }
            else {
                _this.setState({ optionsReady: false });
            }
            _this.setState({ open: visible });
        };
        _this.state = __assign({ selectedItems: [], selectedItem: {
                value: '',
                text: '',
            }, optionsReady: false }, props);
        return _this;
    }
    Select.prototype.componentWillMount = function () {
        this.uniformedData = this.uniformData(this.props);
        this.traverseData(this.props);
    };
    Select.prototype.componentWillReceiveProps = function (nextProps) {
        this.uniformedData = this.uniformData(nextProps);
        this.traverseData(nextProps);
    };
    Select.prototype.uniformData = function (props) {
        var data = props.data, children = props.children, optionValue = props.optionValue, optionText = props.optionText, resetOption = props.resetOption, resetText = props.resetText;
        var uniformedData = resetOption && (data || children)
            ? [{ cid: '-1', value: null, text: resetText }]
            : [];
        if (data) {
            uniformedData = uniformedData.concat(data.map(function (option, index) {
                if (typeof option !== 'object') {
                    return { text: option, value: option, cid: "" + index };
                }
                var optCopy = __assign({}, option);
                optCopy.cid = "" + index;
                if (optionValue) {
                    optCopy.value = option[optionValue];
                }
                if (optionText) {
                    optCopy.text = option[optionText];
                }
                return optCopy;
            }));
            return uniformedData;
        }
        if (children) {
            uniformedData = uniformedData.concat(React.Children.map(children, function (item, index) {
                var value = item.props.value;
                value = typeof value === 'undefined' ? item : value;
                return __assign(__assign({}, item.props), { value: value, cid: "" + index, text: item.props.children });
            }));
        }
        return uniformedData;
    };
    Select.prototype.traverseData = function (props, data) {
        var _this = this;
        if (data === void 0) { data = this.uniformedData; }
        if (!data || !data.length) {
            return this.setState({
                selectedItem: {},
                selectedItems: [],
            });
        }
        var _a = this.state, selectedItem = _a.selectedItem, selectedItems = _a.selectedItems;
        var value = props.value, index = props.index, initialIndex = props.initialIndex, initialValue = props.initialValue;
        var selected = { sItem: selectedItem, sItems: [] };
        data.forEach(function (item, i) {
            if (selectedItems.length === 0 &&
                !selectedItem.cid &&
                (initialValue !== null || initialIndex !== null)) {
                var coord = { value: initialValue, index: initialIndex };
                _this.locateSelected(selected, coord, item, i);
            }
            if (value !== null || index !== null) {
                _this.locateSelected(selected, { value: value, index: index }, item, i);
            }
        });
        this.setState({
            selectedItem: selected.sItem,
            selectedItems: selected.sItems,
        });
    };
    Select.prototype.locateSelected = function (state, coord, item, i) {
        var value = coord.value, index = coord.index;
        if (Array.isArray(value)) {
            var valueIndex = value.indexOf(item.value);
            if (valueIndex > -1 &&
                !state.sItems.find(function (selected) { return selected && selected.value === item.value; })) {
                state.sItems[valueIndex] = item;
            }
            else if (value.length === 0) {
                state.sItem = {};
                state.sItems = [];
            }
        }
        else if (typeof value === 'object' && isEqual(value, item.value)) {
            state.sItem = item;
        }
        else if ((typeof value !== 'undefined' &&
            typeof value !== 'object' &&
            "" + item.value === "" + value) ||
            (index !== 'undefined' && "" + i === "" + index)) {
            state.sItem = item;
        }
        else if (!value && !index && value !== 0) {
            state.sItem = {};
            state.sItems = [];
        }
    };
    Select.prototype.render = function () {
        var _this = this;
        var _a = this.props, placeholder = _a.placeholder, maxToShow = _a.maxToShow, className = _a.className, popupClassName = _a.popupClassName, _b = _a.disabled, disabled = _b === void 0 ? this.context.value : _b, emptyText = _a.emptyText, _c = _a.filter, filter = _c === void 0 ? this.props.onFilter : _c, onAsyncFilter = _a.onAsyncFilter, searchPlaceholder = _a.searchPlaceholder, autoWidth = _a.autoWidth, width = _a.width, simple = _a.simple, search = _a.search, tags = _a.tags, trigger = _a.trigger;
        var _d = this.state, open = _d.open, selectedItems = _d.selectedItems, _e = _d.selectedItem, selectedItem = _e === void 0 ? {} : _e, extraFilter = _d.extraFilter, optionsReady = _d.optionsReady, _f = _d.keyword, keyword = _f === void 0 ? null : _f;
        var _g = selectedItem.cid, cid = _g === void 0 ? '' : _g;
        var disabledCls = disabled ? 'disabled' : '';
        var prefixCls = this.props.prefix + "-select";
        return (React.createElement(Popover, { display: "inline-block", cushion: 4, ref: function (ref) { return (_this.popover = ref); }, position: Popover.Position.AutoBottomLeft, visible: open, className: cx(prefixCls + "__popover", popupClassName, {
                'auto-width': autoWidth,
            }), wrapperClassName: cx(prefixCls, className, disabledCls), onVisibleChange: this.handlePopoverVisibleChange, width: width, onPositionReady: function () {
                _this.setState({
                    optionsReady: true,
                });
            } },
            React.createElement(Trigger, __assign({ visible: open, disabled: disabled, prefixCls: prefixCls, placeholder: placeholder, selectedItems: selectedItems, keyword: keyword }, selectedItem, { trigger: {
                    simple: simple,
                    search: search,
                    tags: tags,
                    trigger: trigger,
                }, onChange: this.triggerChangeHandler, onDelete: this.triggerDeleteHandler })),
            React.createElement(Content, null,
                React.createElement(Popup, { ref: function (ref) { return (_this.popup = ref); }, cid: cid, prefixCls: prefixCls, data: this.uniformedData, ready: optionsReady, selectedItems: selectedItems, extraFilter: extraFilter, searchPlaceholder: searchPlaceholder, emptyText: emptyText, keyword: keyword, filter: filter, onAsyncFilter: onAsyncFilter, maxToShow: maxToShow, onChange: this.optionChangedHandler, autoWidth: autoWidth, adjustPosition: this.popover && this.popover.adjustPosition.bind(this.popover) }))));
    };
    Select.defaultProps = {
        prefix: 'zent',
        open: false,
        optionValue: 'value',
        optionText: 'text',
        onChange: noop,
        onDelete: noop,
        onEmptySelected: noop,
        onOpen: noop,
        autoWidth: false,
        resetOption: false,
        resetText: '...',
        retainNullOption: false,
        value: null,
        index: null,
        initialValue: null,
        initialIndex: null,
    };
    Select.Option = Option;
    Select.SelectTrigger = SelectTrigger;
    Select.InputTrigger = InputTrigger;
    Select.TagsTrigger = TagsTrigger;
    Select.contextType = DisabledContext;
    return Select;
}(React.Component));
export { Select };
export default Select;
