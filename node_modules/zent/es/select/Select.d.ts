import * as React from 'react';
import noop from '../utils/noop';
import Popover from '../popover';
import Option from './components/Option';
import SelectTrigger from './trigger/BaseTrigger';
import InputTrigger from './trigger/InputTrigger';
import TagsTrigger from './trigger/TagsTrigger';
import { IDisabledContext } from '../disabled';
export interface ISelectProps {
    data: unknown[];
    tags?: boolean;
    value?: any;
    index?: any;
    disabled?: boolean;
    placeholder?: string;
    searchPlaceholder?: string;
    emptyText?: string;
    trigger?: React.ComponentType<any>;
    optionText?: string;
    optionValue?: string;
    onChange?: (event: {
        target: {
            type: any;
            value: any;
        };
        preventDefault: () => void;
        stopPropagation: () => void;
    }, value: any) => void;
    onDelete?: (date: any) => void;
    filter?: (item: any, keyword?: string) => boolean;
    onFilter?: (item: any, keyword?: string) => boolean;
    maxToShow?: number;
    onAsyncFilter?: (keyword: string, callback: (data: any) => void) => void;
    onEmptySelected?: (event: React.SyntheticEvent<HTMLSpanElement>, value?: unknown) => void;
    onOpen?: () => void;
    className?: string;
    popupClassName?: string;
    autoWidth?: boolean;
    resetOption?: boolean;
    resetText?: string;
    retainNullOption?: boolean;
    width?: number | string;
    prefix?: string;
    simple?: boolean;
    search?: boolean;
}
export declare class Select extends React.Component<ISelectProps, any> {
    static defaultProps: {
        prefix: string;
        open: boolean;
        optionValue: string;
        optionText: string;
        onChange: typeof noop;
        onDelete: typeof noop;
        onEmptySelected: typeof noop;
        onOpen: typeof noop;
        autoWidth: boolean;
        resetOption: boolean;
        resetText: string;
        retainNullOption: boolean;
        value: any;
        index: any;
        initialValue: any;
        initialIndex: any;
    };
    static Option: typeof Option;
    static SelectTrigger: typeof SelectTrigger;
    static InputTrigger: typeof InputTrigger;
    static TagsTrigger: typeof TagsTrigger;
    static contextType: React.Context<IDisabledContext>;
    context: IDisabledContext;
    popover: Popover | null;
    popup: React.ComponentType<any> | null;
    constructor(props: ISelectProps);
    uniformedData: any;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: any): void;
    uniformData(props: any): {
        cid: string;
        value: any;
        text: any;
    }[];
    traverseData(props: any, data?: any): void;
    locateSelected(state: any, coord: any, item: any, i: any): void;
    triggerChangeHandler: (data: any) => void;
    triggerDeleteHandler: (data: any) => void;
    optionChangedHandler: (ev: any, selectedItem: any) => void;
    handlePopoverVisibleChange: (visible: any) => void;
    render(): JSX.Element;
}
export default Select;
