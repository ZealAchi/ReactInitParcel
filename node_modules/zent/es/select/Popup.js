import { __assign, __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import noop from '../utils/noop';
import Popover from '../popover';
import { I18nReceiver as Receiver } from '../i18n';
import Search from './components/Search';
import Option from './components/Option';
import defer from '../utils/defer';
var Popup = (function (_super) {
    __extends(Popup, _super);
    function Popup(props) {
        var _this = _super.call(this, props) || this;
        _this.popup = null;
        _this.handleScroll = function (evt) {
            evt.stopPropagation();
            if ((_this.popup.scrollTop === 0 && evt.deltaY < 0) ||
                (_this.popup.scrollTop + _this.popup.clientHeight ===
                    _this.popup.scrollHeight &&
                    evt.deltaY > 0)) {
                evt.preventDefault();
            }
        };
        _this.optionChangedHandler = function (ev, cid) {
            var _a = _this.props, filter = _a.filter, data = _a.data;
            var keyword = _this.state.keyword;
            _this.setState({
                keyword: '',
            });
            _this.props.popover.close();
            _this.props.onChange(ev, data.filter(function (item) {
                return (!keyword || !filter || filter(item, "" + keyword)) &&
                    item.cid === cid;
            })[0]);
        };
        _this.searchFilterHandler = function (keyword) {
            var _a = _this.props, onAsyncFilter = _a.onAsyncFilter, filter = _a.filter, adjustPosition = _a.adjustPosition;
            var _b = _this.state, data = _b.data, currentId = _b.currentId;
            var shouldFilter = !!keyword && !!filter;
            for (var i = 0; i < data.length; i++) {
                var item = data[i];
                if ((shouldFilter && filter(item, keyword)) || !currentId) {
                    currentId = item.cid;
                    break;
                }
            }
            _this.setState({
                keyword: keyword,
                currentId: currentId,
            });
            if (typeof onAsyncFilter === 'function') {
                onAsyncFilter("" + keyword);
            }
            else {
                defer(function () {
                    adjustPosition();
                });
            }
        };
        _this.keydownHandler = function (ev) {
            var code = ev.key;
            var itemIds = _this.itemIds;
            var _a = _this.state, currentId = _a.currentId, keyword = _a.keyword;
            var index = itemIds.indexOf(currentId);
            var popupHeight = _this.popup.clientHeight;
            var scrollHeight = _this.popup.scrollHeight;
            var currentNode = _this.popup.getElementsByClassName('current')[0];
            switch (code) {
                case 'Escape':
                    _this.props.popover.close();
                    break;
                case 'ArrowDown':
                    ev.preventDefault();
                    if (_this.itemIds[index + 1]) {
                        currentId = _this.itemIds[index + 1];
                        _this.currentIdUpdated = true;
                        if (currentNode &&
                            currentNode.offsetTop + 28 >= _this.popup.scrollTop + popupHeight) {
                            _this.popup.scrollTop = currentNode.offsetTop + 28 * 2 - popupHeight;
                        }
                    }
                    else {
                        currentId = _this.itemIds[0];
                        _this.popup.scrollTop = 0;
                    }
                    break;
                case 'ArrowUp':
                    ev.preventDefault();
                    if (index > 0) {
                        currentId = _this.itemIds[index - 1];
                        _this.currentIdUpdated = true;
                        if (currentNode && currentNode.offsetTop <= _this.popup.scrollTop) {
                            _this.popup.scrollTop = currentNode.offsetTop - 28;
                        }
                    }
                    else {
                        currentId = _this.itemIds[_this.itemIds.length - 1];
                        _this.popup.scrollTop = scrollHeight;
                    }
                    break;
                case 'Enter':
                    ev.preventDefault();
                    _this.optionChangedHandler(keyword, currentId);
                    _this.currentIdUpdated = false;
                    break;
                default:
                    break;
            }
            _this.setState({
                currentId: currentId,
            });
        };
        _this.state = {
            data: props.data,
            currentId: props.data[0] ? props.data[0].cid : 0,
            keyword: props.keyword || '',
            style: {},
        };
        _this.focused = false;
        return _this;
    }
    Popup.prototype.componentDidMount = function () {
        var _a = this.props, autoWidth = _a.autoWidth, popover = _a.popover;
        if (autoWidth) {
            this.setState({
                style: {
                    width: popover.getTriggerNode().clientWidth + 2 + "px",
                },
            });
        }
        this.popup.addEventListener('mousewheel', this.handleScroll);
    };
    Popup.prototype.componentWillUnmount = function () {
        this.popup.removeEventListener('mousewheel', this.handleScroll);
    };
    Popup.prototype.componentWillReceiveProps = function (nextProps) {
        var _this = this;
        if (!this.focused &&
            nextProps.ready &&
            !nextProps.filter &&
            !nextProps.onAsyncFilter) {
            setTimeout(function () {
                _this.popup && _this.popup.focus();
            }, 150);
            this.focused = true;
        }
        var keyword = nextProps.keyword;
        this.setState({
            data: nextProps.data,
            currentId: nextProps.data[0] ? nextProps.data[0].cid : 0,
        });
        if (this.props.extraFilter &&
            keyword !== null &&
            keyword !== this.state.keyword) {
            this.searchFilterHandler(keyword);
        }
    };
    Popup.prototype.updateCurrentId = function (cid) {
        this.setState({
            currentId: cid,
        });
    };
    Popup.prototype.render = function () {
        var _this = this;
        var _a = this.props, cid = _a.cid, selectedItems = _a.selectedItems, emptyText = _a.emptyText, prefixCls = _a.prefixCls, extraFilter = _a.extraFilter, searchPlaceholder = _a.searchPlaceholder, filter = _a.filter, onAsyncFilter = _a.onAsyncFilter, maxToShow = _a.maxToShow, autoWidth = _a.autoWidth, ready = _a.ready;
        var _b = this.state, keyword = _b.keyword, data = _b.data, currentId = _b.currentId;
        var filterData = data.filter(function (item) {
            return !keyword || !filter || filter(item, "" + keyword);
        });
        var showEmpty = data.length === 0 || filterData.length === 0;
        this.itemIds = filterData.map(function (item) { return item.cid; });
        if (maxToShow && !extraFilter && filter) {
            filterData = filterData.slice(0, maxToShow);
        }
        return (React.createElement("div", { ref: function (popup) { return (_this.popup = popup); }, className: prefixCls + "-popup", onKeyDown: this.keydownHandler, tabIndex: 0, style: autoWidth ? this.state.style : null, onFocus: function (event) {
                event.preventDefault();
            }, "data-zv": '7.4.3' },
            !extraFilter && (filter || onAsyncFilter) ? (React.createElement(Search, { keyword: keyword, prefixCls: prefixCls, placeholder: searchPlaceholder, onChange: this.searchFilterHandler, ready: ready })) : (''),
            filterData.map(function (item, index) {
                var currentCls = item.cid === currentId ? 'current' : '';
                var activeCls = selectedItems.filter(function (o) { return o.cid === item.cid; }).length > 0 ||
                    item.cid === cid
                    ? 'active'
                    : '';
                return (React.createElement(Option, __assign({ key: index, className: prefixCls + "-option " + activeCls + " " + currentCls }, item, { onClick: _this.optionChangedHandler, onMouseEnter: _this.updateCurrentId.bind(_this, item.cid) })));
            }),
            showEmpty && (React.createElement(Receiver, { componentName: "Select" }, function (i18n) { return (React.createElement(Option, { className: prefixCls + "-empty", text: emptyText || i18n.empty, onClick: _this.optionChangedHandler })); }))));
    };
    Popup.defaultProps = {
        adjustPosition: noop,
        cid: -1,
        keyword: '',
        selectedItems: [],
        emptyText: '',
        prefixCls: '',
        extraFilter: false,
        searchPlaceholder: '',
    };
    return Popup;
}(Component));
export default Popover.withPopover(Popup);
