import { PureComponent } from 'react';
import { GridSortType, IGridOnChangeConfig, IGridScrollDelta, IGridInnerFixedType } from './types';
import { IGridInnerColumn } from './Grid';
import Store from './Store';
export interface IGridHeaderProps<Data> {
    prefix: string;
    columns: Array<IGridInnerColumn<Data>>;
    sortType: GridSortType;
    defaultSortType?: GridSortType;
    sortBy?: string;
    onChange: (config: IGridOnChangeConfig) => void;
    store: Store;
    fixed?: IGridInnerFixedType;
    fixedColumnsHeadRowsHeight: Array<number | string>;
    scroll: IGridScrollDelta;
}
interface IGridHeaderState<Data> {
    rows: Array<Array<IGridInnerColumn<Data>>>;
}
declare class Header<Data> extends PureComponent<IGridHeaderProps<Data>, IGridHeaderState<Data>> {
    constructor(props: IGridHeaderProps<Data>);
    unsubscribe: any;
    onSort: (column: IGridInnerColumn<Data>, props: IGridHeaderProps<Data>) => void;
    getChildren: (column: IGridInnerColumn<Data>, props: IGridHeaderProps<Data>) => {};
    getHeaderRows: (passProps?: IGridHeaderProps<Data>, columns?: IGridInnerColumn<Data>[], currentRow?: number, rows?: IGridInnerColumn<Data>[][]) => IGridInnerColumn<Data>[][];
    subscribe: () => void;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: IGridHeaderProps<Data>): void;
    componentWillUnmount(): void;
    renderThead(): JSX.Element;
    render(): JSX.Element;
}
export default Header;
