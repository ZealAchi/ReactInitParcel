import * as React from 'react';
import { PureComponent } from 'react';
import Store from './Store';
import { IGridBatchRender, IGridSelection } from './types';
export interface IBatchComponentsProps<Data = any> {
    batchRender: IGridBatchRender;
    prefix: string;
    position: 'header' | 'foot';
    onSelect: (type: string, datasets: Data[]) => void;
    store: Store;
    datasets: Data[];
    getDataKey: (data: Data, rowIndex: string | number) => string;
    selection: IGridSelection;
    checkboxPropsCache: {
        [key: string]: {
            disabled?: boolean;
        };
    };
    rowKey: string;
}
interface IState<Data> {
    selectedRows: Data[];
    batchNeedRenderFixed: boolean;
}
declare class BatchComponents<Data> extends PureComponent<IBatchComponentsProps<Data>, IState<Data>> {
    state: IState<Data>;
    unsubscribe: any;
    unsubscribeBatchRenderFixed: any;
    getCheckboxPropsByItem: (data: Data, rowIndex: React.ReactText) => {
        disabled?: boolean;
    };
    getData: () => Data[];
    getCheckboxAllDisabled: () => boolean;
    getSelectedRows: () => Data[];
    subscribe: () => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}
export default BatchComponents;
