import { __assign, __extends } from "tslib";
import * as React from 'react';
import * as ReactDom from 'react-dom';
import { PureComponent } from 'react';
import classnames from 'classnames';
import debounce from '../utils/debounce';
import isEqual from '../utils/isEqual';
import throttle from '../utils/throttle';
import noop from '../utils/noop';
import measureScrollbar from '../utils/dom/measureScrollbar';
import WindowResizeHandler from '../utils/component/WindowResizeHandler';
import WindowEventHandler from '../utils/component/WindowEventHandler';
import BatchComponents from './BatchComponents';
import { groupedColumns, getLeafColumns, needFixBatchComps, isElementInView, mapDOMNodes, } from './utils';
import { I18nReceiver as Receiver } from '../i18n';
import BlockLoading from '../loading/BlockLoading';
import Store from './Store';
import ColGroup from './ColGroup';
import Header from './Header';
import Body from './Body';
import Footer from './Footer';
import SelectionCheckbox from './SelectionCheckbox';
import SelectionCheckboxAll from './SelectionCheckboxAll';
import isBrowser from '../utils/isBrowser';
function stopPropagation(e) {
    e.stopPropagation();
    if (e.nativeEvent.stopImmediatePropagation) {
        e.nativeEvent.stopImmediatePropagation();
    }
}
var prefix = 'zent';
var Grid = (function (_super) {
    __extends(Grid, _super);
    function Grid(props) {
        var _a, _b;
        var _this = _super.call(this, props) || this;
        _this.mounted = false;
        _this.checkboxPropsCache = {};
        _this.store = new Store();
        _this.gridNode = React.createRef();
        _this.footNode = React.createRef();
        _this.headerNode = React.createRef();
        _this.bodyTable = null;
        _this.leftBody = null;
        _this.rightBody = null;
        _this.scrollBody = null;
        _this.scrollHeader = null;
        _this.syncFixedTableRowHeight = function () {
            var _a, _b;
            if (!_this.mounted || !_this.gridNode.current) {
                return;
            }
            var tableRect = _this.gridNode.current.getBoundingClientRect();
            if (tableRect.height !== undefined && tableRect.height <= 0) {
                return;
            }
            var bodyRows = (_a = _this.bodyTable) === null || _a === void 0 ? void 0 : _a.querySelectorAll("tbody ." + prefix + "-grid-tr");
            var expandRows = (_b = _this.bodyTable) === null || _b === void 0 ? void 0 : _b.querySelectorAll("tbody ." + prefix + "-grid-tr__expanded");
            var headRows = _this.scrollHeader
                ? _this.scrollHeader.querySelectorAll('thead')
                : _this.bodyTable.querySelectorAll('thead');
            var fixedColumnsBodyRowsHeight = mapDOMNodes(bodyRows, function (row) { return row.getBoundingClientRect().height || 'auto'; });
            var fixedColumnsHeadRowsHeight = mapDOMNodes(headRows, function (row) { return row.getBoundingClientRect().height || 'auto'; });
            var fixedColumnsBodyExpandRowsHeight = mapDOMNodes(expandRows, function (row) { return row.getBoundingClientRect().height || 'auto'; });
            if (isEqual(_this.state.fixedColumnsBodyRowsHeight, fixedColumnsBodyRowsHeight) &&
                isEqual(_this.state.fixedColumnsHeadRowsHeight, fixedColumnsHeadRowsHeight) &&
                isEqual(_this.state.fixedColumnsBodyExpandRowsHeight, fixedColumnsBodyExpandRowsHeight)) {
                return;
            }
            _this.setState({
                fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight,
                fixedColumnsHeadRowsHeight: fixedColumnsHeadRowsHeight,
                fixedColumnsBodyExpandRowsHeight: fixedColumnsBodyExpandRowsHeight,
            });
        };
        _this.onChange = function (conf) {
            var params = Object.assign({}, _this.store.getState('conf'), conf);
            _this.store.setState('conf');
            _this.props.onChange && _this.props.onChange(params);
        };
        _this.onPaginationChange = function (pageSize, current) {
            _this.props.onChange &&
                _this.props.onChange({
                    pageSize: pageSize,
                    current: current,
                });
        };
        _this.getDataKey = function (data, rowIndex) {
            var _a;
            var rowKey = _this.props.rowKey;
            return rowKey ? (_a = data) === null || _a === void 0 ? void 0 : _a[rowKey] : rowIndex;
        };
        _this.isAnyColumnsFixed = function () {
            return _this.store.getState('isAnyColumnsFixed', function () { var _a; return (_a = _this.store.getState('columns'), (_a !== null && _a !== void 0 ? _a : [])).some(function (column) { return !!column.fixed; }); });
        };
        _this.isAnyColumnsLeftFixed = function () {
            return _this.store.getState('isAnyColumnsLeftFixed', function () {
                var _a;
                return (_a = _this.store.getState('columns'), (_a !== null && _a !== void 0 ? _a : [])).some(function (column) { return column.fixed === 'left' || column.fixed === true; });
            });
        };
        _this.isAnyColumnsRightFixed = function () {
            return _this.store.getState('isAnyColumnsRightFixed', function () {
                var _a;
                return (_a = _this.store.getState('columns'), (_a !== null && _a !== void 0 ? _a : [])).some(function (column) { return column.fixed === 'right'; });
            });
        };
        _this.getLeftColumns = function () {
            var columns = _this.store.getState('columns') || [];
            return columns.filter(function (column) { return column.fixed === 'left' || column.fixed === true; });
        };
        _this.getRightColumns = function () {
            var columns = _this.store.getState('columns') || [];
            return columns.filter(function (column) { return column.fixed === 'right'; });
        };
        _this.handleExpandRow = function (clickRow, rowData) { return function (e) {
            var _a;
            var onExpand = _this.props.onExpand;
            var expandRowKeys = (_a = _this.state.expandRowKeys, (_a !== null && _a !== void 0 ? _a : [])).map(function (row, index) {
                return index === clickRow ? !row : row;
            });
            _this.store.setState({
                columns: _this.getColumns(_this.props, _this.props.columns, expandRowKeys),
            });
            _this.setState({
                expandRowKeys: expandRowKeys,
            });
            if (typeof onExpand === 'function') {
                onExpand({
                    expanded: expandRowKeys[clickRow],
                    data: rowData,
                    event: e,
                    index: clickRow,
                });
            }
        }; };
        _this.getExpandBodyRender = function (expandRowKeys) { return function (rowData, _a) {
            var row = _a.row;
            return (React.createElement("span", { className: expandRowKeys[row]
                    ? prefix + "-grid-expandable-btn " + prefix + "-grid-collapse-btn"
                    : prefix + "-grid-expandable-btn " + prefix + "-grid-expand-btn", onClick: _this.handleExpandRow(row, rowData), "data-zv": '7.4.3' }));
        }; };
        _this.getColumns = function (props, columnsArg, expandRowKeysArg) {
            var _a = props || _this.props, selection = _a.selection, datasets = _a.datasets, expandation = _a.expandation;
            var isStoreColumns = !columnsArg;
            var columns = (columnsArg || _this.store.getState('columns')).slice();
            var expandRowKeys = expandRowKeysArg || _this.state.expandRowKeys;
            var hasLeft = columns.some(function (column) { return column.fixed === 'left' || column.fixed === true; });
            if (selection) {
                var data = (datasets || []).filter(function (item, index) {
                    var _a;
                    var rowIndex = _this.getDataKey(item, index);
                    if (selection.getCheckboxProps) {
                        return !((_a = _this.getCheckboxPropsByItem(item, rowIndex)) === null || _a === void 0 ? void 0 : _a.disabled);
                    }
                    return true;
                });
                var checkboxAllDisabled = data.every(function (item, index) {
                    var _a;
                    var rowIndex = _this.getDataKey(item, index);
                    return (_a = _this.getCheckboxPropsByItem(item, rowIndex)) === null || _a === void 0 ? void 0 : _a.disabled;
                });
                var selectionColumn = {
                    title: (React.createElement(SelectionCheckboxAll, { store: _this.store, datasets: data, getDataKey: _this.getDataKey, onSelect: _this.handleBatchSelect, disabled: checkboxAllDisabled })),
                    key: 'selection-column',
                    width: '44px',
                    bodyRender: _this.renderSelectionCheckbox(),
                };
                if (hasLeft) {
                    selectionColumn.fixed = 'left';
                }
                if (columns[0] && columns[0].key === 'selection-column') {
                    columns[0] = __assign(__assign({}, columns[0]), selectionColumn);
                }
                else {
                    columns.unshift(selectionColumn);
                }
            }
            if (expandation) {
                var expandColumn = {
                    title: '',
                    key: 'expand-column',
                    width: '44px',
                    bodyRender: _this.getExpandBodyRender(expandRowKeys),
                };
                if (hasLeft) {
                    expandColumn.fixed = 'left';
                }
                columns.unshift(expandColumn);
            }
            if (!isStoreColumns) {
                columns = groupedColumns(columns);
            }
            return columns;
        };
        _this.getBatchComponents = function (position) {
            var _a = _this.props, datasets = _a.datasets, batchRender = _a.batchRender, selection = _a.selection, rowKey = _a.rowKey;
            return (React.createElement(BatchComponents, { key: "batch", position: position, store: _this.store, onSelect: _this.handleBatchSelect, datasets: datasets, getDataKey: _this.getDataKey, prefix: prefix, batchRender: batchRender, selection: selection, checkboxPropsCache: _this.checkboxPropsCache, rowKey: rowKey }));
        };
        _this.getLeftFixedTable = function () {
            return _this.getTable({
                columns: _this.getLeftColumns(),
                fixed: 'left',
            });
        };
        _this.getRightFixedTable = function () {
            return _this.getTable({
                columns: _this.getRightColumns(),
                fixed: 'right',
            });
        };
        _this.handleBodyScroll = function (e) {
            if (!_this.mounted) {
                return;
            }
            if (e.currentTarget !== e.target) {
                return;
            }
            var target = e.target;
            var _a = _this.props.scroll, scroll = _a === void 0 ? {} : _a;
            var scrollTop = target.scrollTop;
            var _b = _this, leftBody = _b.leftBody, rightBody = _b.rightBody, scrollBody = _b.scrollBody;
            if (target.scrollLeft !== _this.lastScrollLeft && scroll.x) {
                if (_this.scrollHeader && target === scrollBody) {
                    _this.scrollHeader.scrollLeft = target.scrollLeft;
                }
                if (_this.scrollHeader &&
                    _this.scrollBody &&
                    target === _this.scrollHeader) {
                    _this.scrollBody.scrollLeft = target.scrollLeft;
                }
                _this.setScrollPositionClassName();
            }
            _this.lastScrollLeft = target.scrollLeft;
            if (target.scrollTop !== _this.lastScrollTop && scroll.y) {
                if (leftBody && target !== leftBody) {
                    leftBody.scrollTop = scrollTop;
                }
                if (rightBody && target !== rightBody) {
                    rightBody.scrollTop = scrollTop;
                }
                if (scrollBody && target !== scrollBody) {
                    scrollBody.scrollTop = scrollTop;
                }
                _this.lastScrollTop = target.scrollTop;
            }
        };
        _this.onResize = debounce(function () {
            _this.syncFixedTableRowHeight();
            _this.toggleBatchComponents();
        }, 500);
        _this.onRowMouseEnter = function (mouseOverRowIndex) {
            _this.setState({
                mouseOverRowIndex: mouseOverRowIndex,
            });
        };
        _this.getTable = function (options) {
            var _a;
            if (options === void 0) { options = {}; }
            var _b = _this.props, datasets = _b.datasets, _c = _b.scroll, scroll = _c === void 0 ? {} : _c, sortType = _b.sortType, sortBy = _b.sortBy, defaultSortType = _b.defaultSortType, rowClassName = _b.rowClassName, onRowClick = _b.onRowClick, ellipsis = _b.ellipsis, expandation = _b.expandation, rowKey = _b.rowKey, components = _b.components, rowProps = _b.rowProps;
            var fixed = options.fixed;
            var columns = options.columns || _this.store.getState('columns');
            var expandRowKeys = _this.state.expandRowKeys;
            var tableClassName = '';
            var bodyStyle = {};
            var tableStyle = {};
            if (fixed || scroll.x) {
                tableClassName = prefix + "-grid-fixed";
                bodyStyle.overflowX = 'auto';
            }
            if (!fixed && scroll.x) {
                tableStyle.width = scroll.x;
            }
            var header = (React.createElement(Header, { prefix: prefix, columns: columns, fixed: fixed, store: _this.store, onChange: _this.onChange, sortType: sortType, scroll: scroll, sortBy: sortBy, defaultSortType: defaultSortType, fixedColumnsHeadRowsHeight: _this.state.fixedColumnsHeadRowsHeight, ref: _this.headerNode }));
            var leafColumns = getLeafColumns(columns);
            var body = (React.createElement(Body, { prefix: prefix, rowKey: rowKey, columns: leafColumns, datasets: datasets, expandRowKeys: expandRowKeys, mouseOverRowIndex: _this.state.mouseOverRowIndex, onRowMouseEnter: _this.onRowMouseEnter, rowClassName: rowClassName, onRowClick: onRowClick, fixed: fixed, scroll: scroll, expandRender: expandation && expandation.expandRender, fixedColumnsBodyRowsHeight: _this.state.fixedColumnsBodyRowsHeight, fixedColumnsBodyExpandRowsHeight: _this.state.fixedColumnsBodyExpandRowsHeight, components: components, rowProps: rowProps }));
            var y = scroll.y, x = scroll.x;
            if (y) {
                var scrollbarWidth = measureScrollbar();
                var headStyle = {};
                var scrollBodyStyle = {
                    maxHeight: y,
                    overflowY: 'auto',
                };
                if (scrollbarWidth > 0) {
                    headStyle.paddingBottom = 0;
                    if (!fixed && x) {
                        headStyle.marginBottom = -scrollbarWidth;
                    }
                }
                else {
                    scrollBodyStyle.marginBottom = 0;
                }
                return [
                    React.createElement("div", { key: "header", className: prefix + "-grid-header", style: headStyle, ref: function (ref) {
                            if (!fixed)
                                _this.scrollHeader = ref;
                        }, onScroll: _this.handleBodyScroll, "data-zv": '7.4.3' }, header),
                    React.createElement("div", { key: "body-outer", className: prefix + "-grid-body-outer", "data-zv": '7.4.3' },
                        React.createElement("div", { key: "body", className: prefix + "-grid-body", style: scrollBodyStyle, ref: function (ref) {
                                _this[(fixed || 'scroll') + "Body"] = ref;
                                if (!fixed)
                                    _this.bodyTable = ref;
                            }, onScroll: _this.handleBodyScroll, "data-zv": '7.4.3' }, body)),
                ];
            }
            return [
                React.createElement("div", { style: bodyStyle, ref: function (ref) {
                        if (!fixed)
                            _this.bodyTable = ref;
                    }, onScroll: _this.handleBodyScroll, key: "table", "data-zv": '7.4.3' },
                    React.createElement("table", { className: classnames(prefix + "-grid-table", tableClassName, (_a = {},
                            _a[prefix + "-grid-table-ellipsis"] = ellipsis,
                            _a)), style: tableStyle, "data-zv": '7.4.3' },
                        React.createElement(ColGroup, { columns: columns }),
                        header,
                        body)),
            ];
        };
        _this.getEmpty = function (i18n) {
            var _a = _this.props, datasets = _a.datasets, emptyLabel = _a.emptyLabel;
            if (!datasets || datasets.length === 0) {
                return (React.createElement("div", { className: prefix + "-grid-empty", key: "empty", "data-zv": '7.4.3' }, emptyLabel || i18n.emptyLabel));
            }
            return null;
        };
        _this.getCheckboxPropsByItem = function (data, rowIndex) {
            var selection = _this.props.selection;
            if (!selection || !selection.getCheckboxProps) {
                return {};
            }
            if (!_this.checkboxPropsCache[rowIndex]) {
                _this.checkboxPropsCache[rowIndex] = selection.getCheckboxProps(data);
            }
            return _this.checkboxPropsCache[rowIndex];
        };
        _this.onSelectChange = function (selectedRowKeys, data) {
            var _a;
            var _b = _this.props, datasets = _b.datasets, selection = _b.selection;
            var onSelect = (_a = selection) === null || _a === void 0 ? void 0 : _a.onSelect;
            if (typeof onSelect === 'function') {
                var selectedRows = (datasets || []).filter(function (row, i) {
                    return ((selectedRowKeys !== null && selectedRowKeys !== void 0 ? selectedRowKeys : [])).indexOf(_this.getDataKey(row, i)) !== -1;
                });
                onSelect(selectedRowKeys, selectedRows, data);
            }
        };
        _this.handleSelect = function (data, rowIndex, e) {
            var checked = e.target.checked;
            var selectedRowKeys = _this.store.getState('selectedRowKeys') || [];
            if (checked) {
                selectedRowKeys = selectedRowKeys.concat(rowIndex);
            }
            else {
                selectedRowKeys = selectedRowKeys.filter(function (i) { return rowIndex !== i; });
            }
            _this.store.setState({ selectedRowKeys: selectedRowKeys });
            _this.onSelectChange(selectedRowKeys, data);
        };
        _this.handleBatchSelect = function (type, data) {
            var _a;
            var selectedRowKeys = (_a = _this.store.getState('selectedRowKeys'), (_a !== null && _a !== void 0 ? _a : [])).slice();
            var changeRowKeys = [];
            switch (type) {
                case 'selectAll':
                    (data || []).forEach(function (key, index) {
                        var rowIndex = _this.getDataKey(key, index);
                        if (selectedRowKeys.indexOf(rowIndex) === -1) {
                            selectedRowKeys = selectedRowKeys.concat(rowIndex);
                            changeRowKeys.push(rowIndex);
                        }
                    });
                    break;
                case 'removeAll':
                    selectedRowKeys = (data || []).filter(function (key, index) {
                        var rowIndex = _this.getDataKey(key, index);
                        var rlt = true;
                        if (selectedRowKeys.indexOf(rowIndex) !== -1) {
                            rlt = false;
                            changeRowKeys.push(key);
                        }
                        return rlt;
                    });
                    break;
                default:
                    break;
            }
            _this.store.setState({ selectedRowKeys: selectedRowKeys });
            var changeRow = (data || []).filter(function (row, i) { return changeRowKeys.indexOf(_this.getDataKey(row, i)) !== -1; });
            _this.onSelectChange(selectedRowKeys, changeRow);
        };
        _this.renderSelectionCheckbox = function () {
            return function (data, _a) {
                var row = _a.row;
                var rowIndex = _this.getDataKey(data, row);
                var props = _this.getCheckboxPropsByItem(data, rowIndex);
                return (React.createElement("span", { onClick: stopPropagation, className: "zent-grid-selection-checkbox", "data-zv": '7.4.3' },
                    React.createElement(SelectionCheckbox, { disabled: props.disabled, rowIndex: rowIndex, store: _this.store, onChange: function (e) {
                            return _this.handleSelect(data, _this.getDataKey(data, row), e);
                        } })));
            };
        };
        _this.toggleBatchComponents = function () {
            var isSupportFixed = _this.props.stickyBatch && _this.props.batchRender;
            if (!_this.mounted || !isSupportFixed) {
                return;
            }
            if (!_this.footEl) {
                _this.footEl = ReactDom.findDOMNode(_this.footNode.current);
            }
            if (!_this.headerEl) {
                _this.headerEl = ReactDom.findDOMNode(_this.headerNode.current);
            }
            var isTableInView = isElementInView(_this.gridNode.current);
            var isHeaderInView = isElementInView(_this.headerEl);
            var isFootInView = isElementInView(_this.footEl);
            var batchNeedRenderFixed = needFixBatchComps(isTableInView, isHeaderInView, isFootInView);
            var batchRenderFixed = _this.store.getState('batchRenderFixed');
            if (batchRenderFixed !== batchNeedRenderFixed) {
                _this.store.setState({
                    batchRenderFixed: batchNeedRenderFixed,
                    batchRenderFixedStyles: _this.getBatchFixedStyle(),
                });
            }
        };
        _this.onScroll = throttle(_this.toggleBatchComponents, 200);
        var expandRowKeys = _this.getExpandRowKeys(props);
        _this.store.setState({
            columns: _this.getColumns(props, props.columns, expandRowKeys),
            selectedRowKeys: (_b = (_a = props) === null || _a === void 0 ? void 0 : _a.selection) === null || _b === void 0 ? void 0 : _b.selectedRowKeys,
        });
        _this.setScrollPosition('both');
        _this.state = {
            mouseOverRowIndex: -1,
            fixedColumnsBodyRowsHeight: [],
            fixedColumnsHeadRowsHeight: [],
            fixedColumnsBodyExpandRowsHeight: [],
            expandRowKeys: expandRowKeys,
        };
        return _this;
    }
    Grid.prototype.getExpandRowKeys = function (props) {
        var expandation = props.expandation, datasets = props.datasets;
        if (expandation) {
            var isExpanded_1 = expandation.isExpanded;
            var expandRowKeys = datasets.reduce(function (items, rowData, rowIndex) {
                if (typeof isExpanded_1 === 'function') {
                    items[rowIndex] = isExpanded_1(rowData, rowIndex);
                }
                else {
                    items[rowIndex] = false;
                }
                return items;
            }, []);
            return expandRowKeys;
        }
        return [];
    };
    Grid.prototype.getBatchFixedStyle = function () {
        if (!isBrowser) {
            return {};
        }
        var el = ReactDom.findDOMNode(this.footNode.current);
        if (el && this.props.stickyBatch) {
            return {
                width: el.getBoundingClientRect().width,
            };
        }
        return {};
    };
    Grid.prototype.setScrollPosition = function (position) {
        this.scrollPosition = position;
        if (this.gridNode.current) {
            var el = this.gridNode.current;
            if (position === 'both') {
                el.className = el.className.replace(new RegExp(prefix + "-grid-scroll-position-.+$", 'gi'), ' ');
                el.classList.add(prefix + "-grid-scroll-position-left");
                el.classList.add(prefix + "-grid-scroll-position-right");
            }
            else {
                el.className = el.className.replace(new RegExp(prefix + "-grid-scroll-position-.+$", 'gi'), ' ');
                el.classList.add(prefix + "-grid-scroll-position-" + position);
            }
        }
    };
    Grid.prototype.setScrollPositionClassName = function () {
        var node = this.bodyTable;
        var scrollToLeft = node.scrollLeft === 0;
        var scrollToRight = node.scrollLeft + 1 >=
            node.children[0].getBoundingClientRect().width -
                node.getBoundingClientRect().width;
        if (scrollToLeft && scrollToRight) {
            this.setScrollPosition('both');
        }
        else if (scrollToLeft) {
            this.setScrollPosition('left');
        }
        else if (scrollToRight) {
            this.setScrollPosition('right');
        }
        else if (this.scrollPosition !== 'middle') {
            this.setScrollPosition('middle');
        }
    };
    Grid.prototype.componentDidMount = function () {
        this.mounted = true;
        this.setScrollPositionClassName();
        if (this.isAnyColumnsFixed()) {
            this.syncFixedTableRowHeight();
        }
    };
    Grid.prototype.componentWillUnmount = function () {
        this.mounted = false;
    };
    Grid.prototype.componentWillReceiveProps = function (nextProps) {
        var _a;
        if ((_a = nextProps.selection) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('selectedRowKeys')) {
            this.store.setState({
                selectedRowKeys: nextProps.selection.selectedRowKeys || [],
                columns: this.getColumns(nextProps),
            });
            var selection = this.props.selection;
            if (selection &&
                nextProps.selection.getCheckboxProps !== selection.getCheckboxProps) {
                this.checkboxPropsCache = {};
            }
        }
        if (nextProps.columns && nextProps.columns !== this.props.columns) {
            this.store.setState({
                columns: this.getColumns(nextProps, nextProps.columns),
            });
        }
        if (nextProps.hasOwnProperty('datasets') &&
            nextProps.datasets !== this.props.datasets) {
            this.checkboxPropsCache = {};
            var expandRowKeys = this.getExpandRowKeys(nextProps);
            this.store.setState({
                columns: this.getColumns(nextProps, nextProps.columns, expandRowKeys),
            });
            this.setState({
                expandRowKeys: expandRowKeys,
            });
        }
    };
    Grid.prototype.componentDidUpdate = function () {
        if (this.isAnyColumnsFixed()) {
            this.syncFixedTableRowHeight();
        }
    };
    Grid.prototype.render = function () {
        var _this = this;
        var _a = this.props, loading = _a.loading, _b = _a.pageInfo, pageInfo = _b === void 0 ? {} : _b, paginationType = _a.paginationType, bordered = _a.bordered;
        var className = prefix + "-grid";
        var borderedClassName = bordered ? prefix + "-grid-bordered" : '';
        className = classnames(className, this.props.className, borderedClassName);
        if (this.scrollPosition === 'both') {
            className = classnames(className, prefix + "-grid-scroll-position-left", prefix + "-grid-scroll-position-right");
        }
        else {
            className = classnames(className, prefix + "-grid-scroll-position-" + this.scrollPosition);
        }
        return (React.createElement(Receiver, { componentName: "Grid" }, function (i18n) {
            var content = [
                _this.getTable(),
                _this.getEmpty(i18n),
                React.createElement(Footer, { ref: _this.footNode, key: "footer", prefix: prefix, pageInfo: pageInfo, paginationType: paginationType, onChange: _this.onChange, onPaginationChange: _this.onPaginationChange, batchComponents: _this.getBatchComponents('foot') }),
            ];
            var scrollTable = _this.isAnyColumnsFixed() ? (React.createElement("div", { className: prefix + "-grid-scroll", "data-zv": '7.4.3' }, content)) : (content);
            return (React.createElement("div", { className: className, ref: _this.gridNode, "data-zv": '7.4.3' },
                _this.getBatchComponents('header'),
                React.createElement(BlockLoading, { loading: loading },
                    scrollTable,
                    _this.isAnyColumnsLeftFixed() && (React.createElement("div", { className: prefix + "-grid-fixed-left", "data-zv": '7.4.3' }, _this.getLeftFixedTable())),
                    _this.isAnyColumnsRightFixed() && (React.createElement("div", { className: prefix + "-grid-fixed-right", "data-zv": '7.4.3' }, _this.getRightFixedTable()))),
                React.createElement(WindowResizeHandler, { onResize: _this.onResize }),
                React.createElement(WindowEventHandler, { eventName: "scroll", callback: _this.onScroll, useCapture: true })));
        }));
    };
    Grid.defaultProps = {
        className: '',
        bordered: false,
        datasets: [],
        columns: [],
        loading: false,
        paginationType: 'default',
        onChange: noop,
        rowKey: 'id',
        emptyLabel: '',
        scroll: {},
        onRowClick: noop,
        ellipsis: false,
        onExpand: noop,
        stickyBatch: false,
    };
    return Grid;
}(PureComponent));
export { Grid };
export default Grid;
