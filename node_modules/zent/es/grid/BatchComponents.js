import { __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import SelectionCheckboxAll from './SelectionCheckboxAll';
import uniq from '../utils/uniq';
var BatchComponents = (function (_super) {
    __extends(BatchComponents, _super);
    function BatchComponents() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            selectedRows: [],
            batchNeedRenderFixed: false,
        };
        _this.getCheckboxPropsByItem = function (data, rowIndex) {
            var _a = _this.props, selection = _a.selection, checkboxPropsCache = _a.checkboxPropsCache;
            if (!selection || !selection.getCheckboxProps) {
                return {};
            }
            if (!checkboxPropsCache[rowIndex]) {
                checkboxPropsCache[rowIndex] = selection.getCheckboxProps(data);
            }
            return checkboxPropsCache[rowIndex] || {};
        };
        _this.getData = function () {
            var _a = _this.props, datasets = _a.datasets, getDataKey = _a.getDataKey, selection = _a.selection;
            if (!selection) {
                return datasets;
            }
            return (datasets || []).filter(function (item, index) {
                var rowIndex = getDataKey(item, index);
                if (selection.getCheckboxProps) {
                    return !_this.getCheckboxPropsByItem(item, rowIndex).disabled;
                }
                return true;
            });
        };
        _this.getCheckboxAllDisabled = function () {
            var _a = _this.props, getDataKey = _a.getDataKey, datasets = _a.datasets;
            return datasets.every(function (item, index) {
                var rowIndex = getDataKey(item, index);
                return _this.getCheckboxPropsByItem(item, rowIndex).disabled;
            });
        };
        _this.getSelectedRows = function () {
            var store = _this.props.store;
            var selectedRowKeys = store.getState('selectedRowKeys') || [];
            var prevSelectedRows = store.getState('selectedRows') || [];
            var _a = _this.props, datasets = _a.datasets, getDataKey = _a.getDataKey, rowKey = _a.rowKey;
            var selectedRows = (uniq(datasets.concat(prevSelectedRows), rowKey) || []).filter(function (row, i) { return selectedRowKeys.indexOf(getDataKey(row, i)) > -1; });
            store.setState({
                selectedRows: selectedRows,
            });
            return selectedRows;
        };
        _this.subscribe = function () {
            var store = _this.props.store;
            _this.unsubscribe = store.subscribe('selectedRowKeys', function () {
                store.setState({
                    selectedRows: _this.getSelectedRows(),
                });
            });
            _this.unsubscribeBatchRenderFixed = store.subscribe('batchRenderFixed', function () {
                var selectedRows = store.getState('selectedRows') || [];
                _this.setState({
                    batchNeedRenderFixed: store.getState('batchRenderFixed') && selectedRows.length > 0,
                });
            });
        };
        return _this;
    }
    BatchComponents.prototype.componentDidMount = function () {
        this.props.store.setState({
            selectedRows: this.getSelectedRows(),
        });
        this.subscribe();
    };
    BatchComponents.prototype.componentWillUnmount = function () {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
        if (this.unsubscribeBatchRenderFixed) {
            this.unsubscribeBatchRenderFixed();
        }
    };
    BatchComponents.prototype.render = function () {
        var _a;
        var _b = this.props, prefix = _b.prefix, onSelect = _b.onSelect, store = _b.store, getDataKey = _b.getDataKey, batchRender = _b.batchRender, selection = _b.selection, position = _b.position;
        var selectedRows = store.getState('selectedRows') || [];
        var batchNeedRenderFixed = this.state.batchNeedRenderFixed;
        var batchRenderFixedStyles = store.getState('batchRenderFixedStyles');
        var className = classnames(prefix + "-grid-batch", prefix + "-grid-batch__" + position, (_a = {},
            _a[prefix + "-grid-batch--fixed"] = batchNeedRenderFixed && position === 'foot',
            _a));
        var data = this.getData();
        var disabled = this.getCheckboxAllDisabled();
        var styles = batchNeedRenderFixed ? batchRenderFixedStyles : {};
        if (selection && batchRender) {
            return (React.createElement("div", { className: className, style: styles, "data-zv": '7.4.3' },
                React.createElement(SelectionCheckboxAll, { getDataKey: getDataKey, onSelect: onSelect, store: store, disabled: disabled, datasets: data }),
                batchRender && batchRender(selectedRows)));
        }
        return null;
    };
    return BatchComponents;
}(PureComponent));
export default BatchComponents;
