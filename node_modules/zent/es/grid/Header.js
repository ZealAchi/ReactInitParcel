import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import ColGroup from './ColGroup';
var Header = (function (_super) {
    __extends(Header, _super);
    function Header(props) {
        var _this = _super.call(this, props) || this;
        _this.onSort = function (column, props) {
            var sortBy = props.sortBy, _a = props.sortType, sortType = _a === void 0 ? '' : _a, _b = props.defaultSortType, defaultSortType = _b === void 0 ? 'desc' : _b;
            var name = column.name;
            var newSortType;
            if (name === sortBy) {
                if (sortType === '') {
                    newSortType = defaultSortType;
                }
                else if (sortType === defaultSortType) {
                    newSortType = defaultSortType === 'asc' ? 'desc' : 'asc';
                }
                else {
                    newSortType = '';
                }
            }
            if (name !== sortBy) {
                newSortType = defaultSortType;
            }
            _this.props.onChange({
                sortBy: name,
                sortType: newSortType,
            });
        };
        _this.getChildren = function (column, props) {
            var _a;
            var prefix = props.prefix, sortBy = props.sortBy, sortType = props.sortType;
            var cn = classnames(prefix + "-grid-thead-sort", (_a = {},
                _a[prefix + "-grid-thead-sort-" + sortType] = sortType && column.name === sortBy,
                _a));
            if (column.needSort) {
                return (React.createElement("div", { onClick: function () { return _this.onSort(column, props); }, className: prefix + "-grid-thead-sort-btn", "data-zv": '7.4.3' },
                    column.title,
                    React.createElement("span", { className: cn, "data-zv": '7.4.3' },
                        React.createElement("span", { className: "caret-up", "data-zv": '7.4.3' }),
                        React.createElement("span", { className: "caret-down", "data-zv": '7.4.3' }))));
            }
            return column.title;
        };
        _this.getHeaderRows = function (passProps, columns, currentRow, rows) {
            if (currentRow === void 0) { currentRow = 0; }
            if (rows === void 0) { rows = []; }
            var props = passProps || _this.props;
            var prefix = props.prefix, propsColumns = props.columns;
            columns = columns || propsColumns;
            rows[currentRow] = rows[currentRow] || [];
            (columns || []).forEach(function (column, index) {
                var _a;
                if (column.rowSpan && rows.length < column.rowSpan) {
                    while (rows.length < column.rowSpan) {
                        rows.push([]);
                    }
                }
                var name = column.name, key = column.key, className = column.className, colSpan = column.colSpan, rowSpan = column.rowSpan, nowrap = column.nowrap, textAlign = column.textAlign;
                var cell = {
                    key: name || key || index,
                    className: classnames(prefix + "-grid-th", className, (_a = {},
                        _a[prefix + "-grid-text-align-" + textAlign] = textAlign,
                        _a[prefix + "-grid-nowrap"] = nowrap,
                        _a)),
                    children: _this.getChildren(column, props),
                };
                if (column.children) {
                    _this.getHeaderRows(props, column.children, currentRow + 1, rows);
                }
                if (typeof colSpan === 'number') {
                    cell.colSpan = colSpan;
                }
                if (typeof rowSpan === 'number') {
                    cell.rowSpan = rowSpan;
                }
                if (cell.colSpan !== 0) {
                    rows[currentRow].push(cell);
                }
            });
            return rows.filter(function (row) { return row.length > 0; });
        };
        _this.subscribe = function () {
            var store = _this.props.store;
            _this.unsubscribe = store.subscribe('columns', function () {
                _this.setState({ rows: _this.getHeaderRows() });
            });
        };
        _this.state = {
            rows: _this.getHeaderRows(props),
        };
        return _this;
    }
    Header.prototype.componentDidMount = function () {
        this.subscribe();
    };
    Header.prototype.componentWillReceiveProps = function (nextProps) {
        if (nextProps.columns !== this.props.columns ||
            nextProps.sortType !== this.props.sortType ||
            nextProps.sortBy !== this.props.sortBy) {
            this.setState({
                rows: this.getHeaderRows(nextProps),
            });
        }
    };
    Header.prototype.componentWillUnmount = function () {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    };
    Header.prototype.renderThead = function () {
        var _a = this.props, prefix = _a.prefix, fixed = _a.fixed, fixedColumnsHeadRowsHeight = _a.fixedColumnsHeadRowsHeight;
        var rows = this.state.rows;
        var headerHeight = fixedColumnsHeadRowsHeight[0];
        var rowsLen = rows.length;
        return (React.createElement("thead", { className: prefix + "-grid-thead", "data-zv": '7.4.3' }, (rows || []).map(function (row, index) {
            var height = fixed && headerHeight
                ? headerHeight / rowsLen
                : undefined;
            return (React.createElement("tr", { key: index, className: prefix + "-grid-tr", style: {
                    height: height,
                }, "data-zv": '7.4.3' }, row.map(function (props) { return (React.createElement("th", __assign({}, props, { "data-zv": '7.4.3' }))); })));
        })));
    };
    Header.prototype.render = function () {
        var _a = this.props, scroll = _a.scroll, fixed = _a.fixed, prefix = _a.prefix, columns = _a.columns;
        var headerStyle = {};
        if (!fixed && scroll.x) {
            headerStyle.width = scroll.x;
        }
        return scroll.y ? (React.createElement("table", { className: prefix + "-grid-table", style: headerStyle, "data-zv": '7.4.3' },
            React.createElement(ColGroup, { columns: columns }),
            this.renderThead())) : (this.renderThead());
    };
    return Header;
}(PureComponent));
export default Header;
