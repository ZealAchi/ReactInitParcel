import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import Checkbox from '../checkbox';
var SelectionCheckboxAll = (function (_super) {
    __extends(SelectionCheckboxAll, _super);
    function SelectionCheckboxAll(props) {
        var _this = _super.call(this, props) || this;
        _this.subscribe = function () {
            var store = _this.props.store;
            _this.unsubscribe = store.subscribe('selectedRowKeys', function () {
                _this.setCheckState(_this.props);
            });
        };
        _this.getCheckBoxState = function (props, type) {
            var _a;
            var datasets = props.datasets, store = props.store, getDataKey = props.getDataKey;
            var state;
            if (!datasets || datasets.length === 0) {
                state = false;
            }
            else {
                var selectedRowKeys_1 = (_a = store.getState('selectedRowKeys'), (_a !== null && _a !== void 0 ? _a : []));
                if (type === 'every') {
                    state = datasets.every(function (data, index) {
                        return selectedRowKeys_1.indexOf(getDataKey(data, index)) !== -1;
                    });
                }
                else {
                    state = datasets.some(function (data, index) {
                        return selectedRowKeys_1.indexOf(getDataKey(data, index)) !== -1;
                    });
                }
            }
            return state;
        };
        _this.getCheckState = function (props) {
            return _this.getCheckBoxState(props, 'every');
        };
        _this.getIndeterminateState = function (props) {
            return _this.getCheckBoxState(props, 'some');
        };
        _this.setCheckState = function (props) {
            var checked = _this.getCheckState(props);
            var indeterminate = _this.getIndeterminateState(props);
            _this.setState({
                checked: checked,
                indeterminate: indeterminate,
            });
        };
        _this.onChange = function (e) {
            var datasets = _this.props.datasets;
            var checked = e.target.checked;
            _this.props.onSelect(checked ? 'selectAll' : 'removeAll', datasets);
        };
        _this.state = {
            checked: _this.getCheckState(props),
            indeterminate: _this.getIndeterminateState(props),
        };
        return _this;
    }
    SelectionCheckboxAll.prototype.componentDidMount = function () {
        this.subscribe();
    };
    SelectionCheckboxAll.prototype.componentWillReceiveProps = function (nextProps) {
        this.setCheckState(nextProps);
    };
    SelectionCheckboxAll.prototype.componentWillUnmount = function () {
        if (this.unsubscribe) {
            this.unsubscribe();
        }
    };
    SelectionCheckboxAll.prototype.render = function () {
        var _a = this.state, checked = _a.checked, indeterminate = _a.indeterminate;
        var disabled = this.props.disabled;
        var props = {
            checked: checked,
            indeterminate: indeterminate && checked ? false : indeterminate,
        };
        return React.createElement(Checkbox, __assign({}, props, { onChange: this.onChange, disabled: disabled }));
    };
    return SelectionCheckboxAll;
}(PureComponent));
export default SelectionCheckboxAll;
