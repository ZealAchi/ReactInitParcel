import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import classnames from 'classnames';
import Row from './Row';
import ColGroup from './ColGroup';
var Body = (function (_super) {
    __extends(Body, _super);
    function Body() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onBodyMouseLeave = function () {
            var _a = _this.props, onRowMouseEnter = _a.onRowMouseEnter, scroll = _a.scroll;
            scroll && scroll.x && onRowMouseEnter(-1);
        };
        return _this;
    }
    Body.prototype.getRows = function () {
        var _a = this.props, prefix = _a.prefix, datasets = _a.datasets, columns = _a.columns, rowKey = _a.rowKey, rowClassName = _a.rowClassName, onRowClick = _a.onRowClick, onRowMouseEnter = _a.onRowMouseEnter, mouseOverRowIndex = _a.mouseOverRowIndex, fixed = _a.fixed, scroll = _a.scroll, expandRowKeys = _a.expandRowKeys, expandRender = _a.expandRender, fixedColumnsBodyRowsHeight = _a.fixedColumnsBodyRowsHeight, fixedColumnsBodyExpandRowsHeight = _a.fixedColumnsBodyExpandRowsHeight, components = _a.components, rowProps = _a.rowProps;
        var row = [];
        (datasets || []).forEach(function (data, index) {
            var _a;
            row.push(React.createElement(Row, { data: data, columns: columns, index: index, rowIndex: index, prefix: prefix, key: rowKey ? (_a = data) === null || _a === void 0 ? void 0 : _a[rowKey] : index, rowClassName: rowClassName, mouseOverRowIndex: mouseOverRowIndex, onRowClick: onRowClick, onRowMouseEnter: onRowMouseEnter, fixed: fixed, scroll: scroll, fixedColumnsBodyRowsHeight: fixedColumnsBodyRowsHeight, row: components && components.row, rowProps: rowProps }));
            if (expandRender && expandRowKeys.length > 0) {
                var height = fixed && fixedColumnsBodyExpandRowsHeight[index]
                    ? fixedColumnsBodyExpandRowsHeight[index]
                    : undefined;
                var trProps = {
                    key: index + "-expand",
                    className: prefix + "-grid-tr__expanded",
                    style: { display: expandRowKeys[index] ? '' : 'none', height: height },
                };
                if (fixed !== 'right') {
                    row.push(React.createElement("tr", __assign({}, trProps, { "data-zv": '7.4.3' }),
                        React.createElement("td", { "data-zv": '7.4.3' }),
                        React.createElement("td", { colSpan: columns.length - 1, "data-zv": '7.4.3' }, expandRender(data))));
                }
                else {
                    row.push(React.createElement("tr", __assign({}, trProps, { "data-zv": '7.4.3' }),
                        React.createElement("td", { colSpan: columns.length, "data-zv": '7.4.3' })));
                }
            }
        });
        return row;
    };
    Body.prototype.renderTbody = function () {
        var _a;
        var _b = this.props, prefix = _b.prefix, columns = _b.columns;
        var tbodyClass = classnames(prefix + "-grid-tbody", (_a = {},
            _a[prefix + "-grid-tbody-span"] = columns.some(function (item) { return !!(item.colSpan || item.rowSpan); }),
            _a));
        return (React.createElement("tbody", { onMouseLeave: this.onBodyMouseLeave, className: tbodyClass, "data-zv": '7.4.3' }, this.getRows()));
    };
    Body.prototype.render = function () {
        var _a = this.props, scroll = _a.scroll, fixed = _a.fixed, prefix = _a.prefix, columns = _a.columns;
        var bodyStyle = {};
        if (!fixed && scroll.x) {
            bodyStyle.width = scroll.x;
        }
        return scroll.y ? (React.createElement("table", { className: prefix + "-grid-table", style: bodyStyle, "data-zv": '7.4.3' },
            React.createElement(ColGroup, { columns: columns }),
            this.renderTbody())) : (this.renderTbody());
    };
    return Body;
}(PureComponent));
export default Body;
