import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import noop from '../utils/noop';
import Popover from '../popover';
import Button from '../button';
import isPromise from '../utils/isPromise';
import { exposePopover } from '../popover/withPopover';
import { I18nReceiver as Receiver } from '../i18n';
import NoneTrigger from './NoneTrigger';
import getPosition from '../utils/getArrowPosition';
var Trigger = Popover.Trigger, withPopover = Popover.withPopover;
var stateMap = {
    onConfirm: 'confirmPending',
    onCancel: 'cancelPending',
};
var PopAction = (function (_super) {
    __extends(PopAction, _super);
    function PopAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleConfirm = function () {
            _this.handleClick('onConfirm');
        };
        _this.handleCancel = function () {
            _this.handleClick('onCancel');
        };
        return _this;
    }
    PopAction.prototype.handleClick = function (callbackName) {
        var callback = this.props[callbackName];
        var popover = this.props.popover;
        if (typeof callback !== 'function') {
            return popover.close();
        }
        var changePending = this.props.changePending;
        var stateKey = stateMap[callbackName];
        var startClose = function () {
            changePending(stateKey, true);
        };
        var finishClose = function () {
            changePending(stateKey, false, popover.close);
        };
        if (callback.length >= 1) {
            startClose();
            return callback(finishClose);
        }
        var maybePromise = callback();
        if (isPromise(maybePromise)) {
            startClose();
            maybePromise
                .then(finishClose)
                .catch(function () { return changePending(stateKey, false); });
        }
        else {
            popover.close();
        }
    };
    PopAction.prototype.render = function () {
        var _this = this;
        var _a = this.props, prefix = _a.prefix, type = _a.type, onConfirm = _a.onConfirm, onCancel = _a.onCancel, confirmText = _a.confirmText, cancelText = _a.cancelText, confirmPending = _a.confirmPending, cancelPending = _a.cancelPending;
        if (!onConfirm && !onCancel) {
            return null;
        }
        return (React.createElement("div", { className: prefix + "-pop-buttons", "data-zv": '7.4.3' },
            React.createElement(Receiver, { componentName: "Pop" }, function (i18n) { return (React.createElement(Button, { loading: cancelPending, disabled: confirmPending, size: "small", onClick: _this.handleCancel }, cancelText || i18n.cancel)); }),
            React.createElement(Receiver, { componentName: "Pop" }, function (i18n) { return (React.createElement(Button, { loading: confirmPending, disabled: cancelPending, size: "small", type: type, onClick: _this.handleConfirm }, confirmText || i18n.confirm)); })));
    };
    return PopAction;
}(Component));
var BoundPopAction = withPopover(PopAction);
var Pop = (function (_super) {
    __extends(Pop, _super);
    function Pop() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isUnmounted = false;
        _this.state = {
            confirmPending: false,
            cancelPending: false,
        };
        _this.changePending = function (key, pending, callback) {
            var _a;
            if (_this.isUnmounted) {
                return;
            }
            _this.setState((_a = {},
                _a[key] = pending,
                _a), callback);
        };
        _this.onPopoverRefChange = function (popoverInstance) {
            _this.popover = popoverInstance;
        };
        return _this;
    }
    Pop.prototype.renderContent = function () {
        var _a = this.props, prefix = _a.prefix, content = _a.content, header = _a.header, onConfirm = _a.onConfirm, onCancel = _a.onCancel, confirmText = _a.confirmText, cancelText = _a.cancelText, type = _a.type;
        var _b = this.state, confirmPending = _b.confirmPending, cancelPending = _b.cancelPending;
        var hasHeader = !!header;
        return (React.createElement(Popover.Content, null,
            hasHeader && React.createElement("div", { className: prefix + "-pop-header", "data-zv": '7.4.3' }, header),
            React.createElement("div", { className: prefix + "-pop-inner", "data-zv": '7.4.3' },
                content,
                React.createElement(BoundPopAction, { prefix: prefix, onConfirm: onConfirm, onCancel: onCancel, confirmText: confirmText, cancelText: cancelText, confirmPending: confirmPending, cancelPending: cancelPending, changePending: this.changePending, type: type })),
            React.createElement("i", { className: prefix + "-pop-arrow", "data-zv": '7.4.3' })));
    };
    Pop.prototype.renderTrigger = function () {
        var _a = this.props, trigger = _a.trigger, closeOnClickOutside = _a.closeOnClickOutside, isOutside = _a.isOutside, mouseLeaveDelay = _a.mouseLeaveDelay, mouseEnterDelay = _a.mouseEnterDelay, children = _a.children, quirk = _a.quirk;
        if (trigger === 'click') {
            return (React.createElement(Trigger.Click, { autoClose: closeOnClickOutside, isOutside: isOutside }, children));
        }
        if (trigger === 'hover') {
            return (React.createElement(Trigger.Hover, { showDelay: mouseEnterDelay, hideDelay: mouseLeaveDelay, isOutside: isOutside, quirk: quirk }, children));
        }
        if (trigger === 'focus') {
            return React.createElement(Trigger.Focus, null, children);
        }
        if (trigger === 'none') {
            return React.createElement(NoneTrigger, null, children);
        }
        return null;
    };
    Pop.prototype.componentWillUnmount = function () {
        this.isUnmounted = true;
    };
    Pop.prototype.render = function () {
        var _a;
        var _b = this.props, className = _b.className, wrapperClassName = _b.wrapperClassName, trigger = _b.trigger, visible = _b.visible, prefix = _b.prefix, block = _b.block, onShow = _b.onShow, onClose = _b.onClose, position = _b.position, cushion = _b.cushion, header = _b.header, centerArrow = _b.centerArrow, onBeforeClose = _b.onBeforeClose, onBeforeShow = _b.onBeforeShow, onPositionUpdated = _b.onPositionUpdated, onPositionReady = _b.onPositionReady, containerSelector = _b.containerSelector;
        var hasHeader = !!header;
        var cls = cx(prefix + "-pop", className, (_a = {},
            _a[prefix + "-pop--has-header"] = hasHeader,
            _a[prefix + "-pop--no-header"] = !hasHeader,
            _a));
        var onVisibleChange = this.props.onVisibleChange;
        if (trigger === 'none') {
            onVisibleChange = onVisibleChange || noop;
        }
        var _c = this.state, confirmPending = _c.confirmPending, cancelPending = _c.cancelPending;
        var closePending = confirmPending || cancelPending;
        return (React.createElement(Popover, { visible: closePending ? true : visible, onVisibleChange: closePending ? noop : onVisibleChange, prefix: prefix, wrapperClassName: cx(prefix + "-pop-wrapper", wrapperClassName), className: cls, cushion: cushion, position: getPosition(position, centerArrow), display: block ? 'block' : 'inline-block', onShow: onShow, onClose: onClose, onBeforeClose: onBeforeClose, onBeforeShow: onBeforeShow, onPositionUpdated: onPositionUpdated, onPositionReady: onPositionReady, containerSelector: containerSelector, ref: this.onPopoverRefChange },
            this.renderTrigger(),
            this.renderContent()));
    };
    Pop.prototype.adjustPosition = function () {
        if (this.popover) {
            this.popover.adjustPosition();
        }
    };
    Pop.prototype.getWrappedPopover = function () {
        return this.popover;
    };
    Pop.defaultProps = {
        trigger: 'none',
        position: 'top-center',
        cushion: 10,
        centerArrow: false,
        block: false,
        confirmText: '',
        cancelText: '',
        type: 'primary',
        closeOnClickOutside: true,
        mouseLeaveDelay: 200,
        mouseEnterDelay: 200,
        onPositionUpdated: noop,
        onPositionReady: noop,
        className: '',
        wrapperClassName: '',
        containerSelector: 'body',
        prefix: 'zent',
        quirk: true,
    };
    Pop.withPop = exposePopover('pop');
    return Pop;
}(Component));
export { Pop };
export default Pop;
