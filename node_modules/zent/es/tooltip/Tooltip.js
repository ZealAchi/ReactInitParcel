import { __extends } from "tslib";
import * as React from 'react';
import { Component } from 'react';
import cx from 'classnames';
import noop from '../utils/noop';
import Popover from '../popover';
import NoneTrigger from './NoneTrigger';
import getPosition from '../utils/getArrowPosition';
var Trigger = Popover.Trigger;
function isITooltipTriggerClickProps(props) {
    return true;
}
function ITooltipTriggerHoverProps(props) {
    return true;
}
var Tooltip = (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.popoverRef = React.createRef();
        return _this;
    }
    Tooltip.prototype.renderContent = function () {
        var title = this.props.title;
        return (React.createElement(Popover.Content, null,
            React.createElement("div", { className: "zent-tooltip-inner", "data-zv": '7.4.3' }, title),
            React.createElement("i", { className: "zent-tooltip-arrow", "data-zv": '7.4.3' })));
    };
    Tooltip.prototype.renderTrigger = function () {
        var _a = this.props, trigger = _a.trigger, isOutside = _a.isOutside, children = _a.children;
        if (trigger === 'click' && isITooltipTriggerClickProps(this.props)) {
            var _b = this.props.closeOnClickOutside, closeOnClickOutside = _b === void 0 ? true : _b;
            return (React.createElement(Trigger.Click, { autoClose: closeOnClickOutside, isOutside: isOutside }, children));
        }
        if (trigger === 'hover' && ITooltipTriggerHoverProps(this.props)) {
            var _c = this.props, _d = _c.mouseLeaveDelay, mouseLeaveDelay = _d === void 0 ? 200 : _d, _e = _c.mouseEnterDelay, mouseEnterDelay = _e === void 0 ? 200 : _e, _f = _c.quirk, quirk = _f === void 0 ? true : _f;
            return (React.createElement(Trigger.Hover, { showDelay: mouseEnterDelay, hideDelay: mouseLeaveDelay, isOutside: isOutside, quirk: quirk }, children));
        }
        if (trigger === 'focus') {
            return React.createElement(Trigger.Focus, null, children);
        }
        if (trigger === 'none') {
            return React.createElement(NoneTrigger, null, children);
        }
        return null;
    };
    Tooltip.prototype.render = function () {
        var _a = this.props, className = _a.className, trigger = _a.trigger, visible = _a.visible, position = _a.position, cushion = _a.cushion, centerArrow = _a.centerArrow, containerSelector = _a.containerSelector;
        var cls = cx("zent-tooltip", className);
        var onVisibleChange = this.props.onVisibleChange;
        if (trigger === 'none') {
            onVisibleChange = onVisibleChange || noop;
        }
        return (React.createElement(Popover, { visible: visible, onVisibleChange: onVisibleChange, wrapperClassName: "zent-tooltip-wrapper", className: cls, cushion: cushion, position: getPosition(position, centerArrow), containerSelector: containerSelector, ref: this.popoverRef },
            this.renderTrigger(),
            this.renderContent()));
    };
    Tooltip.defaultProps = {
        trigger: 'hover',
        position: 'top-center',
        cushion: 10,
        centerArrow: false,
        containerSelector: 'body',
    };
    return Tooltip;
}(Component));
export { Tooltip };
export default Tooltip;
