'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var CheckboxItem = function (_React$Component) {
  _inherits(CheckboxItem, _React$Component);

  function CheckboxItem() {
    _classCallCheck(this, CheckboxItem);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  CheckboxItem.prototype.handleChange = function handleChange(e) {
    var me = this;
    me.props.onChange(e.currentTarget.checked, me.props.value);
  };

  CheckboxItem.prototype.render = function render() {
    var _classnames;

    var me = this;
    var _me$props = me.props,
        prefixCls = _me$props.prefixCls,
        className = _me$props.className;

    var disabled = false;
    if (me.props.disabled !== undefined) {
      disabled = me.props.disabled;
    } else {
      disabled = me.props.jsxdisabled;
    }
    return _react2["default"].createElement(
      'label',
      {
        className: (0, _classnames3["default"])('' + prefixCls, (_classnames = {}, _defineProperty(_classnames, prefixCls + '__disabled', disabled), _defineProperty(_classnames, className, !!className), _classnames))
      },
      _react2["default"].createElement('input', {
        type: 'checkbox',
        disabled: disabled,
        checked: me.props.checked,
        className: 'kuma-checkbox',
        onChange: me.handleChange.bind(me)
      }),
      _react2["default"].createElement('s', null),
      _react2["default"].createElement(
        'span',
        { className: prefixCls + '-content' },
        _react2["default"].createElement('span', { dangerouslySetInnerHTML: { __html: me.props.text } }),
        me.props.addon
      )
    );
  };

  return CheckboxItem;
}(_react2["default"].Component);

CheckboxItem.defaultProps = {
  value: '',
  prefixCls: 'kuma-checkbox-group-item',
  onChange: function onChange() {}
};

CheckboxItem.propTypes = {
  value: _propTypes2["default"].string,
  disabled: _propTypes2["default"].bool,
  prefixCls: _propTypes2["default"].string,
  className: _propTypes2["default"].string,
  onChange: _propTypes2["default"].func
};

CheckboxItem.displayName = 'CheckboxItem';

exports["default"] = CheckboxItem;
module.exports = exports['default'];