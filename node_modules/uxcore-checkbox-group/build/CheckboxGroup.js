'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CheckboxItem = require('./CheckboxItem');

var _CheckboxItem2 = _interopRequireDefault(_CheckboxItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * CheckboxGroup Component for uxcore
                                                                                                                                                                                                     * @author eternalsky
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Copyright 2014-2015, Uxcore Team, Alinw.
                                                                                                                                                                                                     * All rights reserved.
                                                                                                                                                                                                     */

var shallowArrayCopy = function shallowArrayCopy(a) {
  var value = a instanceof Array ? [].concat(_toConsumableArray(a)) : a;
  return value;
};

var CheckboxGroup = function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  function CheckboxGroup(props) {
    _classCallCheck(this, CheckboxGroup);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    var selected = shallowArrayCopy(_this.props.value);
    if (!Array.isArray(selected)) {
      selected = [selected];
    }
    _this.selected = selected;
    return _this;
  }

  CheckboxGroup.prototype.componentDidUpdate = function componentDidUpdate() {
    var me = this;
    var selected = shallowArrayCopy(me.props.value);
    if (!Array.isArray(selected)) {
      selected = [selected];
    }
    me.selected = selected;
  };

  CheckboxGroup.prototype.processChild = function processChild() {
    var me = this;
    var length = _react2["default"].Children.count(me.props.children);
    if (!length) return false;
    var elements = _react2["default"].Children.map(me.props.children, function (child, index) {
      if (!!child.type && child.type.displayName === 'CheckboxItem') {
        var value = me.props.value;
        return _react2["default"].cloneElement(child, {
          jsxdisabled: me.props.disabled,
          onChange: me.handleChange.bind(me),
          key: index,
          checked: (Array.isArray(value) ? value : [value]).indexOf(child.props.value) !== -1
        });
      }
      return null;
    });
    return elements;
  };

  CheckboxGroup.prototype.handleChange = function handleChange(checked, value) {
    var me = this;
    if (checked) {
      me.selected.push(value);
    } else {
      me.selected = me.selected.filter(function (item) {
        return item !== value;
      });
    }
    me.props.onChange(shallowArrayCopy(me.selected));
  };

  CheckboxGroup.prototype.render = function render() {
    var me = this;
    return _react2["default"].createElement(
      'div',
      { className: me.props.className },
      me.processChild()
    );
  };

  return CheckboxGroup;
}(_react2["default"].Component);

CheckboxGroup.Item = _CheckboxItem2["default"];

CheckboxGroup.defaultProps = {
  prefixCls: 'kuma-checkbox-group',
  value: [],
  onChange: function onChange() {},
  disabled: false,
  className: 'kuma-checkbox-group'
};

// http://facebook.github.io/react/docs/reusable-components.html
CheckboxGroup.propTypes = {
  prefixCls: _propTypes2["default"].string,
  value: _propTypes2["default"].array,
  onChange: _propTypes2["default"].func,
  disabled: _propTypes2["default"].bool,
  className: _propTypes2["default"].string
};

CheckboxGroup.displayName = 'CheckboxGroup';

exports["default"] = CheckboxGroup;
module.exports = exports['default'];