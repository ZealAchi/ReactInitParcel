'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcTimePicker = require('rc-time-picker');

var _rcTimePicker2 = _interopRequireDefault(_rcTimePicker);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * TimePicker Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2017-2018, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var TimePicker = function (_React$Component) {
  _inherits(TimePicker, _React$Component);

  function TimePicker() {
    _classCallCheck(this, TimePicker);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  TimePicker.prototype.render = function render() {
    var _props = this.props,
        value = _props.value,
        defaultValue = _props.defaultValue,
        defaultOpenValue = _props.defaultOpenValue,
        prefixCls = _props.prefixCls,
        _onChange = _props.onChange,
        className = _props.className,
        locale = _props.locale,
        size = _props.size,
        placeholder = _props.placeholder,
        popupClassName = _props.popupClassName;

    var otherProps = {
      onChange: function onChange(change) {
        if (typeof _onChange === 'function') {
          _onChange(change ? change.valueOf() : change);
        }
      },
      defaultOpenValue: (0, _moment2["default"])(defaultOpenValue).locale(locale),
      className: (0, _classnames2["default"])(className, prefixCls + '-' + size + '-size'),
      popupClassName: (0, _classnames2["default"])(popupClassName, prefixCls + '-panel-' + size + '-size'),
      placeholder: placeholder || _i18n2["default"][locale].placeholder
    };
    if (value) {
      otherProps.value = (0, _moment2["default"])(value).locale(locale);
    }
    if (defaultValue) {
      otherProps.defaultValue = (0, _moment2["default"])(defaultValue).locale(locale);
    }
    return _react2["default"].createElement(_rcTimePicker2["default"], _extends({}, this.props, otherProps));
  };

  return TimePicker;
}(_react2["default"].Component);

TimePicker.defaultProps = _extends({}, _rcTimePicker2["default"].defaultProps, {
  align: {
    offset: [0, 0]
  },
  locale: 'zh-cn',
  prefixCls: 'uxcore-time-picker',
  transitionName: 'timePickerSlideUp',
  size: 'large'
});
TimePicker.propTypes = _extends({}, _rcTimePicker2["default"].propTypes, {
  value: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].object]),
  defaultValue: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].object]),
  locale: _propTypes2["default"].string,
  size: _propTypes2["default"].oneOf(['large', 'middle', 'small'])
});
TimePicker.displayName = 'TimePicker';
exports["default"] = TimePicker;
module.exports = exports['default'];