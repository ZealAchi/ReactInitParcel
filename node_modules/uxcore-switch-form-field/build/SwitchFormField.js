'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uxcoreRadiogroup = require('uxcore-radiogroup');

var _uxcoreRadiogroup2 = _interopRequireDefault(_uxcoreRadiogroup);

var _uxcoreSwitch = require('uxcore-switch');

var _uxcoreSwitch2 = _interopRequireDefault(_uxcoreSwitch);

var _uxcoreFormField = require('uxcore-form-field');

var _uxcoreFormField2 = _interopRequireDefault(_uxcoreFormField);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _uxcoreConst = require('uxcore-const');

var _uxcoreConst2 = _interopRequireDefault(_uxcoreConst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * SwitchFormField Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eternalsky
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Item = _uxcoreRadiogroup2["default"].Item;


var RadioValues = {
  On: 'on',
  Off: 'off'
};

var switchPropKeys = Object.keys(_uxcoreSwitch2["default"].propTypes);
var radioGroupPropKeys = Object.keys(_uxcoreRadiogroup2["default"].propTypes);

function getSwitchProps(formFieldProps) {
  var ret = {};

  switchPropKeys.filter(function (key) {
    return Object.keys(formFieldProps).indexOf(key) !== -1;
  }).forEach(function (key) {
    ret[key] = formFieldProps[key];
  });

  return ret;
}

function getRadioGroupProps(formFieldProps) {
  var ret = {};

  radioGroupPropKeys.filter(function (key) {
    return Object.keys(formFieldProps).indexOf(key) !== -1;
  }).forEach(function (key) {
    ret[key] = formFieldProps[key];
  });

  return ret;
}

var SwitchFormField = function (_FormField) {
  _inherits(SwitchFormField, _FormField);

  function SwitchFormField() {
    _classCallCheck(this, SwitchFormField);

    return _possibleConstructorReturn(this, _FormField.apply(this, arguments));
  }

  SwitchFormField.prototype.addSpecificClass = function addSpecificClass() {
    var me = this;

    if (me.props.jsxprefixCls === 'kuma-uxform-field') {
      return me.props.jsxprefixCls + ' kuma-switch-uxform-field';
    }

    return me.props.jsxprefixCls;
  };

  SwitchFormField.prototype.handleChange = function handleChange(checked) {
    var checkedValue = void 0;

    if (checked === RadioValues.On) {
      checkedValue = true;
    } else if (checked === RadioValues.Off) {
      checkedValue = false;
    } else {
      checkedValue = !!checked;
    }

    var me = this;
    me.handleDataChange(checkedValue);
  };

  SwitchFormField.prototype.renderRadioGroup = function renderRadioGroup() {
    var props = this.props,
        state = this.state;
    var checkedChildren = props.checkedChildren,
        unCheckedChildren = props.unCheckedChildren;

    var radioGroupProps = getRadioGroupProps(props);
    var value = state.value;


    return _react2["default"].createElement(
      _uxcoreRadiogroup2["default"],
      _extends({}, radioGroupProps, {
        value: value ? RadioValues.On : RadioValues.Off,
        onChange: this.handleChange.bind(this),
        style: {},
        className: ''
      }),
      _react2["default"].createElement(Item, { value: RadioValues.On, text: checkedChildren }),
      _react2["default"].createElement(Item, { value: RadioValues.Off, text: unCheckedChildren })
    );
  };

  SwitchFormField.prototype.renderSwitch = function renderSwitch() {
    var props = this.props,
        state = this.state;

    var switchProps = getSwitchProps(props);
    var value = state.value;


    return _react2["default"].createElement(_uxcoreSwitch2["default"], _extends({}, switchProps, {
      checked: value,
      onChange: this.handleChange.bind(this),
      style: {},
      className: ''
    }));
  };

  SwitchFormField.prototype.renderField = function renderField() {
    var me = this;
    var props = me.props,
        state = me.state;


    var mode = props.jsxmode || props.mode;
    var checkedChildren = props.checkedChildren,
        unCheckedChildren = props.unCheckedChildren,
        useRadioGroup = props.useRadioGroup;


    if (mode === _uxcoreConst2["default"].MODE.EDIT) {
      return useRadioGroup ? this.renderRadioGroup() : this.renderSwitch();
    }

    return _react2["default"].createElement(
      'span',
      null,
      state.value ? checkedChildren : unCheckedChildren
    );
  };

  return SwitchFormField;
}(_uxcoreFormField2["default"]);

SwitchFormField.defaultProps = (0, _objectAssign2["default"])({ useRadioGroup: false }, _uxcoreFormField2["default"].defaultProps);

// http://facebook.github.io/react/docs/reusable-components.html
SwitchFormField.propTypes = (0, _objectAssign2["default"])({ useRadioGroup: _propTypes2["default"].bool }, _uxcoreFormField2["default"].propTypes);

SwitchFormField.displayName = 'SwitchFormField';

module.exports = SwitchFormField;