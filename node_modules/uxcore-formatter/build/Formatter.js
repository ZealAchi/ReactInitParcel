'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _big = require('big.js');

var _big2 = _interopRequireDefault(_big);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var Formatter = {}; /* eslint no-console: "off" */
/**
 * Formatter Component for uxcore
 * @author eternalsky
 *
 * Copyright 2014-2015, Uxcore Team, Alinw.
 * All rights reserved.
 */

Formatter.date = function (str, pattern) {
  // new Date(null,false) 会返回最初日期。
  if (str === null || str === false || str === undefined || str === '') {
    console.warn('Formatter: invalid date');
    return '';
  }
  var date = new Date(str);
  if (Object.prototype.toString.call(date) === '[object Date]') {
    if (isNaN(date.getTime())) {
      // invalid
      console.warn('Formatter: invalid date');
      return '';
    }
    var actualPattern = pattern || 'YYYY-MM-DD';
    var o = {
      'M+': date.getMonth() + 1, // 月份
      'D+': date.getDate(), // 日
      'd+': date.getDate(), // 日
      'H+': date.getHours(), // 小时
      'h+': date.getHours(), // 小时
      'm+': date.getMinutes(), // 分
      's+': date.getSeconds(), // 秒
      'Q+': Math.floor((date.getMonth() + 3) / 3), // 季度
      'q+': Math.floor((date.getMonth() + 3) / 3), // 季度
      S: date.getMilliseconds() // 毫秒
    };
    if (/(y+)/i.test(actualPattern)) {
      actualPattern = actualPattern.replace(RegExp.$1, ('' + date.getFullYear()).substr(4 - RegExp.$1.length));
    }
    // for (const k in o) {
    //   if (new RegExp(`(${k})`).test(actualPattern)) {
    //     actualPattern = actualPattern.replace(RegExp.$1,
    //       (RegExp.$1.length === 1) ? (o[k]) : ((`00${o[k]}`).substr((`${o[k]}`).length))
    //     );
    //   }
    // }
    Object.keys(o).forEach(function (k) {
      if (new RegExp('(' + k + ')').test(actualPattern)) {
        actualPattern = actualPattern.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
      }
    });
    return actualPattern;
  }
  return '';
};

Formatter.money = function (str) {
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  var fixedNum = arguments[2];

  // const actualStr = fixedNum ? parseFloat(str).toFixed(fixedNum).toString() : str;
  var actualStr = fixedNum || fixedNum === 0 ? new _big2["default"](str).toFixed(parseInt(fixedNum, 10)).toString() : str;
  if (actualStr.indexOf('.') !== -1) {
    return actualStr.replace(/(\d)(?=(?:\d{3})+(\.))/g, function (match, $1) {
      return $1 + delimiter;
    }).replace(/(\d{3})(?![$|\.|\(|\s])/g, function (match, $1) {
      return $1;
    });
  }
  return actualStr.replace(/(\d)(?=(?:\d{3})+$)/g, function (match, $1) {
    return $1 + delimiter;
  });
};

Formatter.cnmobile = function (str) {
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';

  return str.replace(/^(\+?0?86)(?!$)/, '$1' + delimiter).replace(/(\d{4})(?!$)/g, '$1' + delimiter);
};

Formatter.card = function (str) {
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';

  return str.replace(/(\d{4})(?!$)/g, '$1' + delimiter);
};

exports["default"] = Formatter;
module.exports = exports['default'];