'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _uxcoreTooltip = require('uxcore-tooltip');

var _uxcoreTooltip2 = _interopRequireDefault(_uxcoreTooltip);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }
/* eslint-disable class-methods-use-this */

var CellField = function (_React$Component) {
  _inherits(CellField, _React$Component);

  function CellField(props) {
    _classCallCheck(this, CellField);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      pass: true
    };
    return _this;
  }

  CellField.prototype.componentDidMount = function componentDidMount() {
    var me = this;
    if (!me.props.standalone) {
      me.props.attachCellField(me.validate.bind(this), me.getName());
    }
  };

  CellField.prototype.componentWillUnmount = function componentWillUnmount() {
    var me = this;
    if (!me.props.standalone) {
      me.props.detachCellField(me.getName());
    }
  };

  CellField.prototype.getName = function getName() {
    var me = this;
    return me.props.column.dataKey + '.' + me.props.index;
  };

  CellField.prototype.validate = function validate(value, cb) {
    var me = this;
    var actualValue = value === undefined ? me.props.value : value;
    var rowData = me.props.rowData;
    var rules = me.props.column.rules;

    var pass = true;
    var errMsg = '';
    if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) === 'object' && !Array.isArray(rules)) {
      pass = !!rules.validator(actualValue, rowData);
      errMsg = rules.errMsg;
    } else if (Array.isArray(rules)) {
      for (var i = 0; i < rules.length; i++) {
        pass = rules[i].validator(actualValue, rowData);
        if (!pass) {
          errMsg = rules[i].errMsg;
          break;
        }
      }
    } else if (typeof rules === 'function') {
      // pass should be false if rules return a string which is an errMsg;
      errMsg = rules(actualValue, rowData);
      pass = errMsg === true || errMsg === undefined;
      errMsg = typeof errMsg === 'boolean' ? '' : errMsg;
    }
    if (cb) {
      cb(pass);
    }
    var newState = {
      pass: pass
    };

    if (errMsg) {
      newState.errMsg = errMsg;
    }
    me.setState(newState);
    return pass;
  };

  CellField.prototype.addSpecificClass = function addSpecificClass() {
    return '';
  };

  CellField.prototype.handleDataChange = function handleDataChange(obj) {
    var me = this;
    var value = obj.value;

    me.validate(value, function (pass) {
      me.props.handleDataChange((0, _objectAssign2["default"])({}, obj, {
        jsxid: me.props.rowData.jsxid,
        column: me.props.column,
        pass: pass
      }));
    });
  };

  CellField.prototype.renderContent = function renderContent() {};

  CellField.prototype.render = function render() {
    var _classnames;

    var me = this;
    var specificCls = me.addSpecificClass();
    var content = me.renderContent();
    if (content) {
      content = _react2["default"].createElement(
        _uxcoreTooltip2["default"],
        {
          placement: 'bottom',
          overlay: _react2["default"].createElement(
            'span',
            null,
            this.state.errMsg
          ),
          visible: !this.state.pass && this.state.errMsg,
          overlayClassName: me.props.prefixCls + '-tooltip',
          getTooltipContainer: me.props.getTooltipContainer
        },
        content
      );
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])((_classnames = {
          hasError: !me.state.pass
        }, _defineProperty(_classnames, specificCls, !!specificCls), _defineProperty(_classnames, me.props.prefixCls, true), _defineProperty(_classnames, me.props.className, !!me.props.className), _classnames))
      },
      content
    );
  };

  return CellField;
}(_react2["default"].Component);

CellField.displayName = 'CellField';
CellField.propTypes = {
  prefixCls: _propTypes2["default"].string,
  standalone: _propTypes2["default"].bool
};

CellField.defaultProps = {
  prefixCls: 'kuma-uxtable-cell-field',
  standalone: false
};

exports["default"] = CellField;
module.exports = exports['default'];