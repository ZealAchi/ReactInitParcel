'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _rcTree = require('rc-tree');

var _rcTree2 = _interopRequireDefault(_rcTree);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _cssAnimation = require('css-animation');

var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

var _ActionTreeNode = require('./ActionTreeNode');

var _ActionTreeNode2 = _interopRequireDefault(_ActionTreeNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

/* eslint-disable no-param-reassign */
var animate = function animate(node, show, done) {
  var height = void 0;
  return (0, _cssAnimation2["default"])(node, 'kuma-tree-collapse', {
    start: function start() {
      if (!show) {
        node.style.height = node.offsetHeight + 'px';
        node.style.opacity = 1;
      } else {
        height = node.offsetHeight;
        node.style.height = '0';
        node.style.opacity = '0';
      }
    },
    active: function active() {
      node.style.height = (show ? height : 0) + 'px';
      node.style.opacity = show ? 1 : 0;
    },
    end: function end() {
      node.style.height = '';
      node.style.opacity = '';
      done();
    }
  });
};

var animation = {
  enter: function enter(node, done) {
    return animate(node, true, done);
  },
  leave: function leave(node, done) {
    return animate(node, false, done);
  },
  appear: function appear(node, done) {
    return animate(node, true, done);
  }
};

var Tree = function (_RcTree) {
  _inherits(Tree, _RcTree);

  function Tree() {
    _classCallCheck(this, Tree);

    return _possibleConstructorReturn(this, _RcTree.apply(this, arguments));
  }

  Tree.prototype.render = function render() {
    var _this2 = this;

    var _props = this.props,
        prefixCls = _props.prefixCls,
        className = _props.className,
        focusable = _props.focusable,
        showLine = _props.showLine,
        children = _props.children;

    var supportSVG = false;
    if (document) {
      supportSVG = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
    }
    var domProps = {
      className: (0, _classnames2["default"])(className, prefixCls, _defineProperty({
        'use-svg': supportSVG,
        'no-svg': !supportSVG
      }, prefixCls + '-show-line', showLine)),
      role: 'tree-node'
    };
    if (focusable) {
      domProps.tabIndex = '0';
      domProps.onKeyDown = this.onKeyDown;
    }

    return _react2["default"].createElement(
      'ul',
      _extends({}, domProps, {
        unselectable: 'on',
        ref: function ref(c) {
          _this2.tree = c;
        }
      }),
      _react2["default"].Children.map(children, this.renderTreeNode, this)
    );
  };

  return Tree;
}(_rcTree2["default"]);

Tree.displayName = 'Tree';
Tree.propTypes = _rcTree2["default"].propTypes;
Tree.defaultProps = (0, _objectAssign2["default"])(_rcTree2["default"].defaultProps, {
  prefixCls: 'kuma-tree',
  showIcon: false,
  openAnimation: animation
});

Tree.TreeNode = _rcTree2["default"].TreeNode;
Tree.ActionTreeNode = _ActionTreeNode2["default"];

exports["default"] = Tree;
module.exports = exports['default'];