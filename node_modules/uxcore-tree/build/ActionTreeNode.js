'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _rcTree = require('rc-tree');

var _rcTree2 = _interopRequireDefault(_rcTree);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _uxcoreDropdown = require('uxcore-dropdown');

var _uxcoreDropdown2 = _interopRequireDefault(_uxcoreDropdown);

var _uxcoreIcon = require('uxcore-icon');

var _uxcoreIcon2 = _interopRequireDefault(_uxcoreIcon);

var _uxcoreMenu = require('uxcore-menu');

var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var LOAD_STATUS_LOADING = 1;

var ActionTreeNode = function (_RcTree$TreeNode) {
  _inherits(ActionTreeNode, _RcTree$TreeNode);

  function ActionTreeNode() {
    var _temp, _this, _ret;

    _classCallCheck(this, ActionTreeNode);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _RcTree$TreeNode.call.apply(_RcTree$TreeNode, [this].concat(args))), _this), _this.actionClickBlocker = false, _this.renderSelector = function () {
      var _this$state = _this.state,
          loadStatus = _this$state.loadStatus,
          dragNodeHighlight = _this$state.dragNodeHighlight;
      var _this$props = _this.props,
          title = _this$props.title,
          selected = _this$props.selected,
          icon = _this$props.icon;
      var _this$context$rcTree = _this.context.rcTree,
          prefixCls = _this$context$rcTree.prefixCls,
          showIcon = _this$context$rcTree.showIcon,
          treeIcon = _this$context$rcTree.icon,
          draggable = _this$context$rcTree.draggable,
          loadData = _this$context$rcTree.loadData,
          onNodeDoubleClick = _this$context$rcTree.onNodeDoubleClick;

      var disabled = _this.isDisabled();

      var wrapClass = prefixCls + '-node-content-wrapper';

      // Icon - Still show loading icon when loading without showIcon
      var $icon = void 0;

      if (showIcon) {
        var currentIcon = icon || treeIcon;

        $icon = currentIcon ? _react2["default"].createElement(
          'span',
          {
            className: (0, _classnames2["default"])(prefixCls + '-iconEle', prefixCls + '-icon__customize')
          },
          typeof currentIcon === 'function' ? _react2["default"].createElement(currentIcon, _this.props) : currentIcon
        ) : _this.renderIcon();
      } else if (loadData && loadStatus === LOAD_STATUS_LOADING) {
        $icon = _this.renderIcon();
      }

      // Title
      var $title = _react2["default"].createElement(
        'span',
        { className: prefixCls + '-title' },
        _this.renderTitle()
      );

      return _react2["default"].createElement(
        'span',
        {
          ref: _this.setSelectHandle,
          title: typeof title === 'string' ? title : '',
          className: (0, _classnames2["default"])('' + wrapClass, _this.getNodeState() ? wrapClass + '-' + (_this.getNodeState() || 'normal') : '', !disabled && (selected || dragNodeHighlight) && prefixCls + '-node-selected', !disabled && draggable && 'draggable'),
          draggable: !disabled && draggable || undefined,
          'aria-grabbed': !disabled && draggable || undefined,
          onMouseEnter: _this.onMouseEnter,
          onMouseLeave: _this.onMouseLeave,
          onContextMenu: _this.onContextMenu,
          onClick: function onClick(e) {
            // the event stop propagation will fial in popover under react@15 or smaller, so try to
            // block it by logic code
            if (e.target && e.target.closest) {
              _this.actionClickBlocker = false;
              if (e.target.closest('.uxcore-tree-node-actions-blocker')) {
                return;
              }
            } else if (_this.actionClickBlocker) {
              _this.actionClickBlocker = false;
              return;
            }

            _this.onSelectorClick(e);
          },
          onDragStart: _this.onDragStart,
          onDoubleClick: function onDoubleClick(e) {
            return onNodeDoubleClick(e, _this);
          }
        },
        $icon,
        $title
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  // Icon + Title


  ActionTreeNode.prototype.renderTitle = function renderTitle() {
    var _this2 = this;

    var _props = this.props,
        title = _props.title,
        actionAble = _props.actionAble,
        actionIcon = _props.actionIcon,
        actions = _props.actions;
    var prefixCls = this.context.rcTree.prefixCls;


    if (actionAble) {
      var renderActionContent = '';

      // bad smell: while call the onClick, haven't passed event as the first param at the
      // beginning, and now for the compatibility, we can't change the order
      if (Array.isArray(actions)) {
        var menuContent = [];
        actions.forEach(function (value, index) {
          menuContent.push(_react2["default"].createElement(
            _uxcoreMenu2["default"].Item,
            { key: '' + (index + 1) },
            _react2["default"].createElement(
              'div',
              { onClick: function onClick(e) {
                  e.stopPropagation();
                  _this2.actionClickBlocker = true;

                  value.onClick(value, index, e);
                }
              },
              value.icon ? _react2["default"].createElement(_uxcoreIcon2["default"], { usei: true, name: value.icon, className: 'kuma-tree-icon-valign' }) : null,
              value.text
            )
          ));
        });

        renderActionContent = _react2["default"].createElement(
          _uxcoreDropdown2["default"],
          {
            overlayClassName: (0, _classnames2["default"])(prefixCls + '-dropdown-menu', 'uxcore-tree-node-actions-blocker'),
            overlay: _react2["default"].createElement(
              _uxcoreMenu2["default"],
              null,
              menuContent
            ),
            getPopupContainer: function getPopupContainer(node) {
              return node.parentNode;
            }
          },
          _react2["default"].createElement(_uxcoreIcon2["default"], {
            usei: true,
            className: (0, _classnames2["default"])(prefixCls + '-dropdown-section-icon'),
            name: actionIcon,
            onClick: function onClick(e) {
              e.stopPropagation();
            }
          })
        );
      } else if (actions.icon) {
        renderActionContent = _react2["default"].createElement(_uxcoreIcon2["default"], {
          usei: true,
          className: (0, _classnames2["default"])(prefixCls + '-dropdown-section-icon'),
          name: actions.icon,
          title: actions.text,
          onClick: function onClick(e) {
            e.stopPropagation();
            actions.onClick(e);
          }
        });
      }

      return _react2["default"].createElement(
        'span',
        {
          className: (0, _classnames2["default"])(prefixCls + '-dropdown-section')
        },
        _react2["default"].createElement(
          'span',
          null,
          title
        ),
        _react2["default"].createElement(
          'div',
          {
            className: (0, _classnames2["default"])(prefixCls + '-dropdown-section-right-section')
          },
          renderActionContent
        )
      );
    }

    return title;
  };

  return ActionTreeNode;
}(_rcTree2["default"].TreeNode);

ActionTreeNode.propTypes = _extends({}, _rcTree2["default"].TreeNode.propTypes, {
  actionAble: _propTypes2["default"].bool,
  actionIcon: _propTypes2["default"].string,
  actions: _propTypes2["default"].any
});

ActionTreeNode.defaultProps = _extends({}, _rcTree2["default"].TreeNode.defaultProps, {
  actionAble: false,
  actionIcon: 'more-dot',
  actions: {
    text: '',
    onClick: function onClick() {},
    icon: ''
  }
});

exports["default"] = ActionTreeNode;
module.exports = exports['default'];