'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _SplitBar = require('./SplitBar');

var _SplitBar2 = _interopRequireDefault(_SplitBar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Splitter Component for uxcore
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author vincent.bian
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright 2015-2016, Uxcore Team, Alinw.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var Pane = function (_React$Component) {
  _inherits(Pane, _React$Component);

  // eslint-disable-line
  function Pane(props) {
    _classCallCheck(this, Pane);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      size: props.size || props.defaultSize,
      paneStyle: {},
      collapsed: props.collapse === 'collapsed' || props.defaultCollapse === 'collapsed',
      __size: null
    };
    _this.handleCollapse = _this.handleCollapse.bind(_this);
    return _this;
  }

  Pane.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (nextProps.size === this.props.size) {
      if (nextProps.collapse !== this.props.collapse) {
        this.updateByCollapse();
      } else if (nextProps.offset && nextProps.offset.align) {
        this.getPaneStyleByProps(nextProps);
      }
    } else {
      this.setState({
        size: nextProps.size
      }, function () {
        _this2.props.parentSplitter.calculatePaneOffset();
      });
    }
  };

  Pane.prototype.handleCollapse = function handleCollapse() {
    var collapse = this.props.collapse;
    var collapsed = this.state.collapsed;

    if (!collapse) {
      this.updateByCollapse();
    }
    this.props.onCollapse(!collapsed);
  };

  Pane.prototype.updateByCollapse = function updateByCollapse() {
    var _this3 = this;

    var _state = this.state,
        collapsed = _state.collapsed,
        size = _state.size,
        __size = _state.__size;

    var state = {
      collapsed: !collapsed
    };
    if (collapsed) {
      (0, _objectAssign2["default"])(state, {
        size: __size || this.props.size || this.props.defaultSize,
        __size: 0
      });
    } else {
      (0, _objectAssign2["default"])(state, {
        __size: size
      });
    }
    this.setState(state, function () {
      _this3.props.onTogglePane();
    });
  };

  Pane.prototype.getPaneStyleByProps = function getPaneStyleByProps(props) {
    var paneStyle = {};
    var offset = props.offset,
        orientation = props.orientation;

    var size = offset.align !== 'none' ? offset.size : 'auto';
    switch (orientation) {
      case 'vertical':
        if (offset.align === 'left') {
          (0, _objectAssign2["default"])(paneStyle, {
            left: offset.start,
            width: size
          });
        } else if (offset.align === 'right') {
          (0, _objectAssign2["default"])(paneStyle, {
            right: offset.end,
            width: size
          });
        } else {
          (0, _objectAssign2["default"])(paneStyle, {
            left: offset.start,
            right: offset.end
          });
        }
        break;
      case 'horizontal':
      default:
        if (offset.align === 'left') {
          (0, _objectAssign2["default"])(paneStyle, {
            top: offset.start,
            height: size
          });
        } else if (offset.align === 'right') {
          (0, _objectAssign2["default"])(paneStyle, {
            bottom: offset.end,
            height: size
          });
        } else {
          (0, _objectAssign2["default"])(paneStyle, {
            top: offset.start,
            bottom: offset.end
          });
        }
        break;
    }
    this.setState({
      paneStyle: paneStyle,
      size: size
    });
  };

  Pane.prototype.getCurrentSize = function getCurrentSize() {
    var collapsed = this.state.collapsed;

    return collapsed ? 'collapsed' : this.state.size;
  };

  Pane.prototype.render = function render() {
    var _this4 = this;

    var _props = this.props,
        className = _props.className,
        orientation = _props.orientation,
        offset = _props.offset,
        collapsible = _props.collapsible;
    var _state2 = this.state,
        paneStyle = _state2.paneStyle,
        collapsed = _state2.collapsed;

    var cls = void 0;
    if (offset) {
      cls = (0, _classnames3["default"])(className, _defineProperty({}, 'align-' + offset.align, offset));
    } else {
      cls = className;
    }
    return _react2["default"].createElement(
      'div',
      {
        className: (0, _classnames3["default"])(cls, {
          'pane-collapsed': collapsed
        }),
        style: paneStyle,
        ref: function ref(pane) {
          return _this4.pane = pane;
        }
      },
      collapsible ? _react2["default"].createElement('div', {
        className: (0, _classnames3["default"])('toggle-pane', {
          'toggle-pane-collapsed': collapsed
        }),
        onClick: this.handleCollapse
      }) : null,
      this.renderContent()
    );
  };

  Pane.prototype.renderContent = function renderContent() {
    var children = this.props.children;

    if (typeof children === 'string') {
      return _react2["default"].createElement(
        'div',
        { className: 'pane-content' },
        children
      );
    }
    return _react2["default"].createElement(
      'div',
      { className: 'pane-content' },
      _react2["default"].Children.map(children, function (Comp) {
        return _react2["default"].cloneElement(Comp);
      })
    );
  };

  return Pane;
}(_react2["default"].Component);

Pane.displayName = 'Pane';
Pane.defaultProps = {
  className: '',
  defaultSize: 'auto',
  size: undefined,
  resizable: false,
  collapsible: false,
  orientation: 'horizontal',
  offset: null,
  parentSplitter: null,
  collapse: null,
  defaultCollapse: null,
  onTogglePane: function onTogglePane() {},
  onCollapse: function onCollapse() {}
};
Pane.propTypes = {
  className: _propTypes2["default"].string,
  defaultSize: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
  size: _propTypes2["default"].oneOfType([_propTypes2["default"].string, _propTypes2["default"].number]),
  resizable: _propTypes2["default"].bool,
  collapsible: _propTypes2["default"].bool,
  orientation: _propTypes2["default"].oneOf(['vertical', 'horizontal']),
  offset: _propTypes2["default"].object,
  parentSplitter: _propTypes2["default"].object,
  collapse: _propTypes2["default"].oneOf(['collapsed', 'uncollapsed']),
  defaultCollapse: _propTypes2["default"].oneOf(['collapsed', 'uncollapsed']),
  onTogglePane: _propTypes2["default"].func,
  onCollapse: _propTypes2["default"].func
};
exports["default"] = Pane;
module.exports = exports['default'];